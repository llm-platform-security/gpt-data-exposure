<!DOCTYPE html><html lang="en"><head><meta charSet="utf-8"/><meta name="viewport" content="width=device-width"/><title>Wolfram|Alpha Full Results API Reference</title><meta name="description" content="Documentation to access Wolfram|Alpha capabilities through web-based API. Integrate Wolfram|Alpha into web, mobile, desktop, enterprise applications."/><meta property="og:url" content="url"/><meta property="og:type" content="website"/><meta property="og:title" content="Wolfram|Alpha Full Results API Reference"/><meta property="og:description" content="Documentation to access Wolfram|Alpha capabilities through web-based API. Integrate Wolfram|Alpha into web, mobile, desktop, enterprise applications."/><meta property="og:image" content="image"/><meta name="twitter:description" content="Documentation to access Wolfram|Alpha capabilities through web-based API. Integrate Wolfram|Alpha into web, mobile, desktop, enterprise applications."/><meta name="twitter:title" content="Wolfram|Alpha Full Results API Reference"/><meta name="twitter:site" content="@Wolfram_Alpha"/><meta name="twitter:card" content="summary_large_image"/><meta name="twitter:image" content="image"/><meta name="apple-itunes-app" content="app-id=548861535"/><link rel="shortcut icon" href="/_next/static/images/favicon_1zbE9hjk.ico"/><meta name="next-head-count" content="16"/><meta name="bingbot" content="nocache"/><link rel="preload" href="/_next/static/css/6f99c37c813214ed.css" as="style"/><link rel="stylesheet" href="/_next/static/css/6f99c37c813214ed.css" data-n-g=""/><link rel="preload" href="/_next/static/css/bfad64b52f08d11c.css" as="style"/><link rel="stylesheet" href="/_next/static/css/bfad64b52f08d11c.css" data-n-p=""/><noscript data-n-css=""></noscript><script defer="" nomodule="" src="/_next/static/chunks/polyfills-c67a75d1b6f99dc8.js"></script><script src="/_next/static/chunks/webpack-109585a0ed0ce53a.js" defer=""></script><script src="/_next/static/chunks/framework-c41ea8a791274584.js" defer=""></script><script src="/_next/static/chunks/main-0a967061d7d98d3b.js" defer=""></script><script src="/_next/static/chunks/pages/_app-9e3287af3c97ca08.js" defer=""></script><script src="/_next/static/chunks/1822-42241d1b75bdd0cb.js" defer=""></script><script src="/_next/static/chunks/pages/%5Bapi%5D/documentation-ca550e1caf214283.js" defer=""></script><script src="/_next/static/DHIeErcHWB5g43HR5O0gg/_buildManifest.js" defer=""></script><script src="/_next/static/DHIeErcHWB5g43HR5O0gg/_ssgManifest.js" defer=""></script><style data-styled="" data-styled-version="5.3.6">.jBBofQ{background:#ffffff;color:#000000;}/*!sc*/
.beFRHq{background:#444b59;color:#ffffff;}/*!sc*/
.kgUwf{background:#f5f5f5;color:#616670;}/*!sc*/
data-styled.g1[id="sc-21c13e9a-0"]{content:"jBBofQ,beFRHq,kgUwf,"}/*!sc*/
.ftfnmd{color:#535353;}/*!sc*/
.bZsicD{color:#616670;}/*!sc*/
.kPOmdP{color:#777777;}/*!sc*/
data-styled.g2[id="sc-21c13e9a-1"]{content:"ftfnmd,bZsicD,kPOmdP,"}/*!sc*/
.bjSUBp{color:#cb1000;background-color:transparent;border-color:#cb1000;}/*!sc*/
.bjSUBp .mainColor{fill:#cb1000;}/*!sc*/
.bjSUBp:hover{color:#ae0000;background-color:transparent;border-color:#ae0000;}/*!sc*/
.bjSUBp:hover .mainColor{fill:#ae0000;}/*!sc*/
.bjSUBp:active,.bjSUBp.active{color:#ae0000;background-color:transparent;border-color:#ae0000;outline:none;}/*!sc*/
.bjSUBp:active .mainColor,.bjSUBp.active .mainColor{fill:#ae0000;}/*!sc*/
.bjSUBp.disabled,.bjSUBp[disabled]{opacity:0.5;pointer-events:none;cursor:pointer;color:#cb1000;background-color:transparent;border-color:#cb1000;}/*!sc*/
.bjSUBp.disabled .mainColor,.bjSUBp[disabled] .mainColor{fill:#cb1000;}/*!sc*/
.cDxHrh{color:#ffffff;background-color:transparent;border-color:transparent;}/*!sc*/
.cDxHrh .mainColor{fill:#ffffff;}/*!sc*/
.cDxHrh:hover{color:#ec561a;background-color:transparent;border-color:transparent;}/*!sc*/
.cDxHrh:hover .mainColor{fill:#ec561a;}/*!sc*/
.cDxHrh:active,.cDxHrh.active{color:#ec561a;background-color:transparent;border-color:transparent;outline:none;}/*!sc*/
.cDxHrh:active .mainColor,.cDxHrh.active .mainColor{fill:#ec561a;}/*!sc*/
.cDxHrh.disabled,.cDxHrh[disabled]{opacity:0.5;pointer-events:none;cursor:pointer;color:#ffffff;background-color:transparent;border-color:transparent;}/*!sc*/
.cDxHrh.disabled .mainColor,.cDxHrh[disabled] .mainColor{fill:#ffffff;}/*!sc*/
.jojysd{color:#ff7e00;background-color:transparent;border-color:#ff7e00;}/*!sc*/
.jojysd .mainColor{fill:#ff7e00;}/*!sc*/
.jojysd:hover{color:#cb1000;background-color:transparent;border-color:#cb1000;}/*!sc*/
.jojysd:hover .mainColor{fill:#cb1000;}/*!sc*/
.jojysd:active,.jojysd.active{color:#cb1000;background-color:transparent;border-color:#cb1000;outline:none;}/*!sc*/
.jojysd:active .mainColor,.jojysd.active .mainColor{fill:#cb1000;}/*!sc*/
.jojysd.disabled,.jojysd[disabled]{opacity:0.5;pointer-events:none;cursor:pointer;color:#ff7e00;background-color:transparent;border-color:#ff7e00;}/*!sc*/
.jojysd.disabled .mainColor,.jojysd[disabled] .mainColor{fill:#ff7e00;}/*!sc*/
.cEBFzN{color:#333333;background-color:#f5f5f5;border-color:#cecece;}/*!sc*/
.cEBFzN .mainColor{fill:#333333;}/*!sc*/
.cEBFzN:hover{color:#333333;background-color:#f5f5f5;border-color:#cecece;}/*!sc*/
.cEBFzN:hover .mainColor{fill:#333333;}/*!sc*/
.cEBFzN:active,.cEBFzN.active{color:#333333;background-color:#f5f5f5;border-color:#cecece;outline:none;}/*!sc*/
.cEBFzN:active .mainColor,.cEBFzN.active .mainColor{fill:#333333;}/*!sc*/
.cEBFzN.disabled,.cEBFzN[disabled]{opacity:0.5;pointer-events:none;cursor:pointer;color:#333333;background-color:#f5f5f5;border-color:#cecece;}/*!sc*/
.cEBFzN.disabled .mainColor,.cEBFzN[disabled] .mainColor{fill:#333333;}/*!sc*/
.gUYtEt{color:#777777;background-color:transparent;border-color:transparent;}/*!sc*/
.gUYtEt .mainColor{fill:#777777;}/*!sc*/
.gUYtEt .alternateColor{fill:#777777;}/*!sc*/
.gUYtEt:hover{color:#ec561a;background-color:transparent;border-color:transparent;}/*!sc*/
.gUYtEt:hover .mainColor{fill:#ec561a;}/*!sc*/
.gUYtEt:hover .alternateColor{fill:#ec561a;}/*!sc*/
.gUYtEt:active,.gUYtEt.active{color:#cb1000;background-color:transparent;border-color:#cb1000;outline:none;}/*!sc*/
.gUYtEt:active .mainColor,.gUYtEt.active .mainColor{fill:#cb1000;}/*!sc*/
.gUYtEt:active .alternateColor,.gUYtEt.active .alternateColor{fill:#cb1000;}/*!sc*/
.gUYtEt.disabled,.gUYtEt[disabled]{opacity:0.5;pointer-events:none;cursor:pointer;color:#777777;background-color:transparent;border-color:transparent;}/*!sc*/
.gUYtEt.disabled .mainColor,.gUYtEt[disabled] .mainColor{fill:#777777;}/*!sc*/
.gUYtEt.disabled .alternateColor fill:.alternateColor,.gUYtEt[disabled] .alternateColor fill:.alternateColor{fill:#777777;}/*!sc*/
data-styled.g11[id="sc-34cb55e4-2"]{content:"bjSUBp,cwjaCb,cDxHrh,jojysd,cEBFzN,gUYtEt,"}/*!sc*/
.iwpMVR{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;border-radius:3px;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}/*!sc*/
.bEbSlT{padding:0;vertical-align:baseline;white-space:normal;border:none;}/*!sc*/
.cAcIXE{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:3px;margin:3px 0;border:0;}/*!sc*/
data-styled.g12[id="sc-34cb55e4-3"]{content:"kPdgYi,iwpMVR,bEbSlT,cAcIXE,"}/*!sc*/
.lcFVpX{width:100%;height:46px;font-size:14px;position:relative;z-index:1100;font-family:'Source Sans Pro',Arial,Helvetica,sans-serif;}/*!sc*/
data-styled.g83[id="sc-f6e2b26e-0"]{content:"lcFVpX,"}/*!sc*/
.huHPOz{width:100%;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 11px 0 20px;box-sizing:border-box;position:relative;background:#ffffff;border-bottom:1px solid #dfdfdf;}/*!sc*/
data-styled.g84[id="sc-iBYQkv"]{content:"huHPOz,"}/*!sc*/
.eqFKRt{vertical-align:text-top;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;list-style:none;margin:0;padding:0;margin-left:8px;}/*!sc*/
data-styled.g86[id="sc-f88f312b-0"]{content:"eqFKRt,"}/*!sc*/
.cfByJr{padding:0;margin:0 4px;height:14px;width:14px;}/*!sc*/
.cfByJr:first-child{margin-left:0;}/*!sc*/
.cfByJr:last-child{margin-right:0;}/*!sc*/
data-styled.g87[id="sc-f88f312b-1"]{content:"cfByJr,"}/*!sc*/
.expwDU{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 4px 0 0px;line-height:1.33;}/*!sc*/
.expwDU:not(:last-child):after{content:'';display:block;height:11px;width:1px;background:#777777;margin-left:4px;}/*!sc*/
.dgCyrk{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 4px 0 0px;line-height:1.33;}/*!sc*/
data-styled.g88[id="sc-4fa8b0c-0"]{content:"expwDU,dgCyrk,"}/*!sc*/
.fbsQmA{padding:4px;white-space:nowrap;}/*!sc*/
data-styled.g89[id="sc-f808361a-0"]{content:"fbsQmA,"}/*!sc*/
.cvcVox{margin-right:2px;}/*!sc*/
data-styled.g90[id="sc-f808361a-1"]{content:"cvcVox,"}/*!sc*/
.kSqHck{width:112px;height:25px;margin-right:5px;}/*!sc*/
.kSqHck .sc-70463ee1-0{fill:#777777;}/*!sc*/
.kSqHck .sc-70463ee1-1{fill:#cb1000;}/*!sc*/
data-styled.g93[id="sc-55c933b2-0"]{content:"kSqHck,"}/*!sc*/
.ODzEY{font-family:'Source Sans Pro',Arial,Helvetica,sans-serif;padding:0;margin:0;list-style:none;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-bottom:5px;font-size:12px;font-weight:600;}/*!sc*/
.jJVOkq{font-family:'Source Sans Pro',Arial,Helvetica,sans-serif;padding:0;margin:0;list-style:none;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-bottom:5px;font-size:12px;font-weight:400;}/*!sc*/
.fKqrZN{font-family:'Source Sans Pro',Arial,Helvetica,sans-serif;padding:0;margin:0;list-style:none;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-top:0;font-size:12px;font-weight:600;}/*!sc*/
data-styled.g94[id="sc-9bd020f4-0"]{content:"ODzEY,jJVOkq,fKqrZN,"}/*!sc*/
.bjcLUr{width:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;z-index:2;background:#ffffff;color:#777777;padding:30px 0;}/*!sc*/
data-styled.g95[id="sc-ef5a1635-0"]{content:"bjcLUr,"}/*!sc*/
body,html{margin:0;padding:0;border:0;font:inherit;vertical-align:baseline;box-sizing:border-box;background:#ffffff;}/*!sc*/
data-styled.g96[id="sc-global-kVCJVd1"]{content:"sc-global-kVCJVd1,"}/*!sc*/
.bOyBat{position:fixed;height:100%;width:100%;z-index:999999;}/*!sc*/
data-styled.g97[id="sc-7cb10fd6-0"]{content:"bOyBat,"}/*!sc*/
.jafCFo{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;position:absolute;top:19%;left:0;right:0;}/*!sc*/
@media (max-width:610px){.jafCFo{margin:0 20px;}}/*!sc*/
data-styled.g98[id="sc-7cb10fd6-1"]{content:"jafCFo,"}/*!sc*/
.iCYDsY{max-width:450px;}/*!sc*/
@media (max-width:610px){.iCYDsY{max-width:100%;}}/*!sc*/
data-styled.g99[id="sc-7cb10fd6-2"]{content:"iCYDsY,"}/*!sc*/
.lkKAQL{font-family:WebRoboto,"Hiragino Kaku Gothic ProN","ヒラギノ角ゴ ProN",Meiryo,メイリオ,Arial,Helvetica,sans-serif;font-size:21px;font-weight:400;font-size:21px;line-height:1.4;text-align:center;margin-top:40px;}/*!sc*/
data-styled.g100[id="sc-7cb10fd6-3"]{content:"lkKAQL,"}/*!sc*/
.hgqgEt{font-family:WebRoboto,"Hiragino Kaku Gothic ProN","ヒラギノ角ゴ ProN",Meiryo,メイリオ,Arial,Helvetica,sans-serif;font-size:21px;font-weight:400;font-size:14px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;line-height:1.6;margin-top:15px;max-width:510px;min-width:300px;}/*!sc*/
@media (max-width:610px){.hgqgEt{display:inline;text-align:center;}}/*!sc*/
data-styled.g101[id="sc-7cb10fd6-4"]{content:"hgqgEt,"}/*!sc*/
.gsBcoR{margin-left:0px;}/*!sc*/
@media (max-width:610px){.gsBcoR{margin-left:3px;}}/*!sc*/
data-styled.g102[id="sc-7cb10fd6-5"]{content:"gsBcoR,"}/*!sc*/
.iSvoyN{border:none;padding:0;margin-left:3px;vertical-align:baseline;}/*!sc*/
data-styled.g103[id="sc-7cb10fd6-6"]{content:"iSvoyN,"}/*!sc*/
.dPuCGv{-webkit-flex:1 1 auto;-ms-flex:1 1 auto;flex:1 1 auto;position:relative;}/*!sc*/
data-styled.g104[id="sc-18f6fa98-0"]{content:"dPuCGv,"}/*!sc*/
.ketkwL{margin:0 10px 0 0;padding:0;}/*!sc*/
data-styled.g113[id="sc-b2e70d6d-0"]{content:"ketkwL,"}/*!sc*/
.dqytTd{border:none;}/*!sc*/
data-styled.g114[id="sc-b2e70d6d-1"]{content:"dqytTd,"}/*!sc*/
.kXasHc{width:166px;height:25px;}/*!sc*/
data-styled.g115[id="sc-b2e70d6d-2"]{content:"kXasHc,"}/*!sc*/
.lgduUk{width:100%;font-family:'Source Sans Pro',Arial,Helvetica,sans-serif;}/*!sc*/
data-styled.g116[id="sc-fdd1194d-0"]{content:"lgduUk,"}/*!sc*/
.dIgZlI{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}/*!sc*/
data-styled.g191[id="sc-427d7f8b-5"]{content:"dIgZlI,"}/*!sc*/
.tBWWr{max-width:1045px;margin:0 auto;}/*!sc*/
data-styled.g192[id="sc-427d7f8b-6"]{content:"tBWWr,"}/*!sc*/
.kKsDPQ{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}/*!sc*/
data-styled.g193[id="sc-427d7f8b-7"]{content:"kKsDPQ,"}/*!sc*/
.hUbQay{font-size:20px;padding:15px 12px;border:none;}/*!sc*/
.hUbQay:last-child{margin-right:14px;}/*!sc*/
data-styled.g196[id="sc-427d7f8b-10"]{content:"hUbQay,"}/*!sc*/
.edNNVm{font-size:15px;}/*!sc*/
data-styled.g197[id="sc-cwSeag"]{content:"edNNVm,"}/*!sc*/
.fQDaCq{width:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row-reverse;-ms-flex-direction:row-reverse;flex-direction:row-reverse;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;font-size:15px;font-family:'Source Sans Pro',Arial,Helvetica,sans-serif;padding:0;border:none;}/*!sc*/
.fQDaCq .sc-34cb55e4-1{width:20px;}/*!sc*/
data-styled.g199[id="sc-427d7f8b-12"]{content:"fQDaCq,"}/*!sc*/
.iqcnhK{padding-bottom:10px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}/*!sc*/
.iqcnhK:last-child{padding-bottom:0;}/*!sc*/
data-styled.g480[id="sc-d34bd529-0"]{content:"iqcnhK,"}/*!sc*/
.guwHDQ{text-transform:uppercase;font-size:15px;line-height:25px;margin-right:18px;}/*!sc*/
data-styled.g481[id="sc-d34bd529-1"]{content:"guwHDQ,"}/*!sc*/
.hssUa-D{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}/*!sc*/
data-styled.g482[id="sc-d34bd529-2"]{content:"hssUa-D,"}/*!sc*/
.eOiLmF{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}/*!sc*/
.eOiLmF:not(:last-child)::after{color:#aaaaaa;content:'|';padding:0 15px;}/*!sc*/
data-styled.g483[id="sc-d34bd529-3"]{content:"eOiLmF,"}/*!sc*/
.fHRpxq{padding:0;border:none;white-space:normal;display:inline-block;vertical-align:unset;}/*!sc*/
data-styled.g485[id="sc-d34bd529-5"]{content:"fHRpxq,"}/*!sc*/
.cHypDI{background:none;font-weight:600;}/*!sc*/
data-styled.g486[id="sc-c1a65243-0"]{content:"cHypDI,"}/*!sc*/
.gYyYOR{font-size:13px;font-family:'Source Code Pro',Arial,Helvetica,sans-serif;}/*!sc*/
data-styled.g487[id="sc-c1a65243-1"]{content:"gYyYOR,"}/*!sc*/
.jgTDUw{padding:17px 18px;margin:-0.416667em 0 1em;font-family:'Source Code Pro',Arial,Helvetica,sans-serif;font-size:12px;line-height:18px;border:0.076923em solid #cecece;white-space:pre-wrap;word-break:break-word;}/*!sc*/
data-styled.g488[id="sc-c1a65243-2"]{content:"jgTDUw,"}/*!sc*/
.gmYvfm{max-width:100%;height:auto;width:auto;}/*!sc*/
data-styled.g489[id="sc-c1a65243-3"]{content:"gmYvfm,"}/*!sc*/
.evUEeE{margin:10px 0;font-size:15px;}/*!sc*/
data-styled.g490[id="sc-c1a65243-4"]{content:"evUEeE,"}/*!sc*/
.hfjzpF{margin:0 auto;max-width:800px;color:#535353;font-family:'Source Sans Pro',Arial,Helvetica,sans-serif;line-height:1.6;}/*!sc*/
data-styled.g491[id="sc-c1a65243-5"]{content:"hfjzpF,"}/*!sc*/
.cXTVDo{border-color:#cecece;}/*!sc*/
data-styled.g492[id="sc-c1a65243-6"]{content:"cXTVDo,"}/*!sc*/
.cznmTI{padding-top:122px;border-top:1px solid;border-color:inherit;padding-top:122px;}/*!sc*/
.cznmTI::after{content:" ";display:block;height:1px;border:0;padding:0;margin-bottom:5px;}/*!sc*/
data-styled.g493[id="sc-hTBuwn"]{content:"cznmTI,"}/*!sc*/
.iVSlPZ{margin-top:25px;font-size:21px;color:#ff7e00;}/*!sc*/
data-styled.g494[id="sc-c1a65243-7"]{content:"iVSlPZ,"}/*!sc*/
.eCUcKo{font-size:35px;font-weight:300;font-family:'Source Sans Pro Light',Arial,Helvetica,sans-serif;}/*!sc*/
data-styled.g495[id="sc-c1a65243-8"]{content:"eCUcKo,"}/*!sc*/
</style></head><body><script>window.ENV_DATA = {"serviceEnv":{"iPhoneAppStore":"https://apps.apple.com/us/app/wolfram-alpha/id548861535","androidAppStore":"https://play.google.com/store/apps/details?id=com.wolfram.android.alphapro","windowsAppStore":"https://apps.microsoft.com/store/detail/wolframalpha/9WZDNCRDMZKP","iPhonePoweredAppStore":"https://apps.apple.com/us/developer/wolfram-group-llc/id715130979","androidPoweredAppStore":"https://play.google.com/store/apps/developer?id=Wolfram+Group","windowsPoweredAppStore":"https://apps.microsoft.com/store/search?hl=en-us&gl=us&publisher=Wolfram%20Group%20LLC","androidAmazonStore":"https://www.amazon.com/Wolfram-Alpha-LLC/dp/B004J1DBJI/","mediaNKS":"https://www.wolfram-media.com/products/nksipad.html","waExplorerCommonApi":"https://www.wolframalpha.com/input/apiExplorer.jsp","waV2queryApi":"https://api.wolframalpha.com/v2/query","queryRecognizerExplorer":"https://www.wolframalpha.com/queryrecognizer/query.jsp","shortAnswerApi":"https://api.wolframalpha.com/v1/result","wolframCDNConsentCookie":"www.wolframcdn.com/consent/cookie-consent.php","spokenResultsApi":"https://api.wolframalpha.com/v1/spoken"},"base":"https://www.wolframalpha.com","baseJA":"https://ja.wolframalpha.com","baseDE":"https://de.wolframalpha.com","baseES":"https://es.wolframalpha.com","baseFR":"https://fr.wolframalpha.com","baseKO":"https://ko.wolframalpha.com","basePT":"https://pt.wolframalpha.com","baseRU":"https://ru.wolframalpha.com","baseTW":"https://tw.wolframalpha.com","baseZH":"https://zh.wolframalpha.com","wolfram":"https://www.wolfram.com","wolframLanguage":"https://www.wolfram.com/language","wolframLanguageES":"https://www.wolfram.com/language/index.php.es","wolframLanguageJA":"https://www.wolfram.com/language/index.php.ja","wolframMathematica":"https://www.wolfram.com/mathematica","wolframMathematicaES":"https://www.wolfram.com/mathematica/index.php.es","wolframMathematicaJA":"https://www.wolfram.com/mathematica/index.php.ja","product":"https://products.wolframalpha.com","developer":"https://developer.wolframalpha.com","account":"https://account.wolfram.com","billing":"https://billing.wolfram.com","blog":"https://blog.wolfram.com","community":"https://community.wolfram.com","connect":"https://www.wolfram.com/connect/","youtube":"https://www.youtube.com/user/WolframAlpha","company":"https://company.wolfram.com","reference":"https://reference.wolfram.com","wolframScience":"https://www.wolframscience.com/","demonstration":"https://demonstrations.wolfram.com","mathworld":"https://mathworld.wolfram.com","functions":"http://functions.wolfram.com/","walTracking":"//wal.wolfram.com","notebookApi":"https://www.open.wolframcloud.com/opencloud/files","pricing":"/pro/pricing/","pricingStudent":"/pro/pricing/students/","pricingEducator":"/pro/pricing/educators/","privacy":"https://www.wolfram.com/legal/privacy/wolfram/index.html","privacyJA":"https://www.wolfram.com/legal/privacy/wolfram/index.ja.html","geoIpApi":"/n/v1/api/geoIp","results":"/n/v1/api/fetcher/results","webSocketProtocol":"wss://","fetcherDomain":"","enableDataTest":false,"enableMathMode":true,"disableUploads":false,"enableDarkMode":false,"randomizerApi":"/n/v1/api/randomizer","autocompleteApi":"/n/v1/api/autocomplete","sampleDataApi":"/n/v1/api/samplefiles","sourcerApi":"/n/v1/api/sourcer","cdn":"https://www.wolframcdn.com","logconfig":"production","feedbackApi":"/n/v1/api/feedback","supportApi":"/input/sendFormData.jsp","uploadExamples":"https://www.wolframalpha.com/input/pro/uploadexamples/","pressCenter":"https://company.wolfram.com/press-center/wolframalpha/","stephenWritings":"https://writings.stephenwolfram.com/category/wolfram-alpha/","captchaApi":"/n/v1/api/captcha","displayDebuggingInfo":"off","userApi":"https://www.wolframalpha.com/users","authApi":"https://www.wolframalpha.com/auth","fileApi":"https://www.wolframalpha.com/users/me/files","contact":"/contact-us","downloads":"/downloads","samplefiles":"/samplefiles/filedownload","temporaryFileApi":"/api/v1/fileinput/data","queryHistoryLimit":"20","firefoxExtension":"https://addons.mozilla.org/firefox/downloads/file/3569991/wolframalpha_search_engine-1.0.2-an+fx.xpi","edgeExtension":"https://microsoftedge.microsoft.com/addons/detail/wolframalpha-official/gnehniboaligpegecmikojohlpngkobh","chromeExtension":"https://chrome.google.com/webstore/detail/wolframalpha-official/icncamkooinmbehmkeilcccmoljfkdhp","w3MathML":"https://www.w3.org/Math/","continuedFractionReference":"https://reference.wolfram.com/language/ref/ContinuedFraction.html","piReference":"https://reference.wolfram.com/language/ref/Pi.html","interpreterReference":"https://reference.wolfram.com/language/ref/Interpreter.html","developerApps":"/portal/myapps","developerWidgets":"/portal/mywidgets","service":"r-product","calculatorBottomDerivative":"https://reference.wolfram.com/language/ref/D.html","fakeUploadDelay":1500,"wolframSolutions":"https://www.wolframsolutions.com","simpleExplorerApi":"https://api.wolframalpha.com/v1/simple","devPortalApi":"/n/v1/api/devportal","notebook":"https://www.wolfram.com/wolfram-alpha-notebook-edition","notebookES":"https://www.wolfram.com/wolfram-alpha-notebook-edition/index.php.es","cookieDomain":".wolframalpha.com","createAuthCookies":false,"authCookieAppend":"","examplesApi":"/n/v1/api/examples","secureCookie":true,"nksBlogPost":"https://blog.wolfram.com/2009/05/14/7-years-of-nksand-its-first-killer-app/","sw":"https://www.stephenwolfram.com/","disableLanguages":[],"partialTranslate":false,"oauth":"legacy","ads":["BTS2023Banner"]};window.IS_TOUCH = false;</script><script>window.onerror = function() {
                    var script = document.createElement('script');
                    script.setAttribute('type', 'text/javascript');
                    script.setAttribute('src', '/_next/static/chunks/explorerWarning.js');
                    document.head.appendChild(script);
                    }</script><div id="__next"><div class="__trY"><noscript class="sc-7cb10fd6-0 bOyBat"><div class="sc-7cb10fd6-1 jafCFo"><img src="/_next/static/images/running-man_2cHgyknz.png" alt="no-js-running-man-logo" class="sc-7cb10fd6-2 iCYDsY"/><span class="sc-21c13e9a-1 ftfnmd sc-7cb10fd6-3 lkKAQL"><span>Uh oh! Wolfram|Alpha doesn&#x27;t run without JavaScript.</span></span><div class="sc-21c13e9a-1 ftfnmd sc-7cb10fd6-4 hgqgEt"><span>Please enable JavaScript. If you don&#x27;t know how, you can find instructions</span><a href="https://enable-javascript.com/" target="_blank" class="_3BQD noScriptInstructionsLink _ZJzB sc-34cb55e4-2 sc-34cb55e4-3 bjSUBp kPdgYi sc-7cb10fd6-6 iSvoyN"><span class="sc-34cb55e4-0 hLNrE"><span>here</span></span></a><span>.</span><span class="sc-7cb10fd6-5 gsBcoR"><span>Once you&#x27;ve done that, refresh this page to start using Wolfram|Alpha.</span></span></div></div></noscript><header class="sc-f6e2b26e-0 lcFVpX"><nav class="sc-iBYQkv huHPOz"><h1 class="sc-b2e70d6d-0 ketkwL"><a href="https://www.wolframalpha.com" class="_3BQD _dGJe _ZJzB sc-34cb55e4-2 sc-34cb55e4-3 cwjaCb kPdgYi sc-b2e70d6d-1 dqytTd"><img src="/_next/static/images/wolfram-alpha-logo_6XLh1tbc.svg" alt="Wolfram|Alpha" class="sc-b2e70d6d-2 kXasHc"/></a></h1></nav></header><main class="sc-21c13e9a-0 jBBofQ sc-18f6fa98-0 dPuCGv"><div class="_uT5V"><div><div><nav class="sc-21c13e9a-0 beFRHq sc-fdd1194d-0 lgduUk"><div class="sc-427d7f8b-6 tBWWr"><div class="sc-427d7f8b-7 kKsDPQ"><a href="/api" class="_3BQD subDropdownMenu _ZJzB sc-34cb55e4-2 sc-34cb55e4-3 cDxHrh kPdgYi sc-427d7f8b-10 hUbQay"><span class="sc-34cb55e4-0 hLNrE"><span>Wolfram|Alpha APIs</span></span></a><div class="sc-427d7f8b-5 dIgZlI"><a responsive="standard" href="/api" class="_3BQD subDropdownMenu _ZJzB sc-34cb55e4-2 sc-34cb55e4-3 cDxHrh kPdgYi sc-427d7f8b-10 sc-cwSeag hUbQay edNNVm"><span class="sc-34cb55e4-0 hLNrE"><span>Overview</span></span></a><span><div><button tabindex="0" aria-pressed="false" type="button" class="_3BQD subDropdownMenu buttonNoPaddingNoMargin sc-34cb55e4-2 sc-34cb55e4-3 cDxHrh iwpMVR sc-427d7f8b-12 fQDaCq"><svg class="sc-34cb55e4-1 cPAvSd __Csy" data-name="Layer 1" viewBox="0 0 32 32"><path class="mainColor" d="M16.003 18.626l7.081-7.081L25 13.46l-8.997 8.998-9.003-9 1.917-1.916z"></path></svg><span class="sc-34cb55e4-0 hLNrE _YVy_"><span>Documentation</span></span></button></div></span><a responsive="standard" href="/api/pricing" class="_3BQD subDropdownMenu _ZJzB sc-34cb55e4-2 sc-34cb55e4-3 cDxHrh kPdgYi sc-427d7f8b-10 sc-cwSeag hUbQay edNNVm"><span class="sc-34cb55e4-0 hLNrE"><span>Pricing</span></span></a></div></div></div></nav></div></div><div class="_nBC_"><div style="position:absolute;top:0;left:0;right:0"></div><nav class="_p9sY"><ul class="_tqoe" style="top:0;margin-top:0"><li class="_uLRH"><a href="/api/documentation?scrollTo=top" class="_3BQD _PXZk _32DA sc-34cb55e4-2 sc-34cb55e4-3 cwjaCb kPdgYi"><span class="sc-34cb55e4-0 hLNrE"><span>Introduction</span></span></a></li><li class="_uLRH _S_j9"><a href="/api/documentation?scrollTo=getting-started" class="_3BQD _PXZk _32DA sc-34cb55e4-2 sc-34cb55e4-3 cwjaCb kPdgYi"><span class="sc-34cb55e4-0 hLNrE">Getting Started</span></a></li><li class="_uLRH _S_j9"><a href="/api/documentation?scrollTo=explanation-of-pods" class="_3BQD _PXZk _32DA sc-34cb55e4-2 sc-34cb55e4-3 cwjaCb kPdgYi"><span class="sc-34cb55e4-0 hLNrE">Explanation of Pods</span></a></li><li class="_uLRH _S_j9"><a href="/api/documentation?scrollTo=formatting-output" class="_3BQD _PXZk _32DA sc-34cb55e4-2 sc-34cb55e4-3 cwjaCb kPdgYi"><span class="sc-34cb55e4-0 hLNrE">Formatting Output</span></a></li><li class="_uLRH _S_j9"><a href="/api/documentation?scrollTo=specifying-your-location" class="_3BQD _PXZk _32DA sc-34cb55e4-2 sc-34cb55e4-3 cwjaCb kPdgYi"><span class="sc-34cb55e4-0 hLNrE">Specifying Your Location</span></a></li><li class="_uLRH _S_j9"><a href="/api/documentation?scrollTo=informational-elements" class="_3BQD _PXZk _32DA sc-34cb55e4-2 sc-34cb55e4-3 cwjaCb kPdgYi"><span class="sc-34cb55e4-0 hLNrE">Informational Elements</span></a></li><li class="_uLRH _S_j9"><a href="/api/documentation?scrollTo=using-assumptions" class="_3BQD _PXZk _32DA sc-34cb55e4-2 sc-34cb55e4-3 cwjaCb kPdgYi"><span class="sc-34cb55e4-0 hLNrE">Using Assumptions</span></a></li><li class="_uLRH _S_j9"><a href="/api/documentation?scrollTo=advanced-topics" class="_3BQD _PXZk _32DA sc-34cb55e4-2 sc-34cb55e4-3 cwjaCb kPdgYi"><span class="sc-34cb55e4-0 hLNrE">Advanced Topics</span></a></li></ul><footer class="sc-21c13e9a-0 kgUwf _e5A8" style="margin-top:auto;position:inherit"><span>API Version 2.0 Documentation Revision A</span></footer></nav><div class="_JwTF"><div class="_F07F"><section class="_lUSF"><section id="top"><div class="_sw14"><div><h1 class="_cJ5F"><img class="_pNb_" src="/_next/static/images/full-api-icon_25JklHvJ.png" alt="Wolfram|Alpha Full Results API"/><div><span class="_p2Ko"><span>Wolfram|Alpha Full Results API</span></span><span class="__s6f"><span>Reference</span></span></div></h1><p class="_H4Ch"><span>The Wolfram|Alpha Full Results API provides a web-based API allowing the computational and presentation capabilities of Wolfram|Alpha to be integrated into web, mobile, desktop and enterprise applications.</span></p></div><p class="_6pwr"><span>The API allows clients to submit free-form queries similar to the queries one might enter at the Wolfram|Alpha website, and for the computed results to be returned in a variety of formats. It is implemented in a standard REST protocol using HTTP GET requests. Each result is returned as a descriptive XML or JSON structure wrapping the requested content format.</span></p><p class="_6pwr"><span>Although the majority of data available through the Wolfram|Alpha website is also available through this API, certain subjects may be restricted by default. To request access to additional topics, <a href="https://products.wolframalpha.com/contact-us/#general" class="_3BQD _dGJe _ZJzB sc-34cb55e4-2 sc-34cb55e4-3 cwjaCb kPdgYi _qHlt"><span class="sc-34cb55e4-0 hLNrE"><span>contact us</span></span></a>. Use of the Full Results API is subject to the <a href="/api/termsofuse" class="_3BQD _dGJe _ZJzB sc-34cb55e4-2 sc-34cb55e4-3 cwjaCb kPdgYi _rH_w"><span class="sc-34cb55e4-0 hLNrE"><span>API Terms of Use</span></span></a>.</span></p><div class="_DwL7"><a href="https://developer.wolframalpha.com" class="_3BQD _dGJe _ZJzB sc-34cb55e4-2 sc-34cb55e4-3 cwjaCb kPdgYi _e8Vs"><span class="sc-34cb55e4-0 hLNrE"><span>Get Started</span></span></a><a href="https://products.wolframalpha.com/contact-us/#general" class="_3BQD _dGJe _ZJzB sc-34cb55e4-2 sc-34cb55e4-3 cwjaCb kPdgYi _jA79"><span class="sc-34cb55e4-0 hLNrE"><span>Contact Us</span></span></a><a href="https://products.wolframalpha.com/api/explorer/" class="_3BQD _dGJe _ZJzB sc-34cb55e4-2 sc-34cb55e4-3 cwjaCb kPdgYi _jA79"><span class="sc-34cb55e4-0 hLNrE"><span>API Explorer</span></span></a><div><button tabindex="0" aria-pressed="false" type="button" class="_3BQD _z7S3 _z7S3 sc-34cb55e4-2 sc-34cb55e4-3 cwjaCb kPdgYi"><svg class="sc-34cb55e4-1 cPAvSd __Csy" data-name="Layer 1" viewBox="0 0 32 32"><path class="_AU84" d="M16.003 18.626l7.081-7.081L25 13.46l-8.997 8.998-9.003-9 1.917-1.916z"></path></svg><span class="sc-34cb55e4-0 hLNrE _YVy_"><span>Language Libraries</span></span></button></div></div><section><div class="sc-d34bd529-0 iqcnhK"><h2 class="sc-21c13e9a-1 bZsicD sc-d34bd529-1 guwHDQ"><span>RESOURCES:</span></h2><ul class="sc-d34bd529-2 hssUa-D"><li class="sc-d34bd529-3 eOiLmF"><a href="/api/faqs" class="_3BQD orange19RedHover _ZJzB sc-34cb55e4-2 sc-34cb55e4-3 jojysd kPdgYi sc-d34bd529-5 fHRpxq"><span class="sc-34cb55e4-0 hLNrE"><span>FAQ</span></span></a></li><li class="sc-d34bd529-3 eOiLmF"><a href="/api" class="_3BQD orange19RedHover _ZJzB sc-34cb55e4-2 sc-34cb55e4-3 jojysd kPdgYi sc-d34bd529-5 fHRpxq"><span class="sc-34cb55e4-0 hLNrE"><span>APIs Overview</span></span></a></li></ul></div></section></div></section></section><div class="sc-c1a65243-6 cXTVDo"><section class="sc-hTBuwn cznmTI"><div class="sc-c1a65243-5 hfjzpF"><h1 id="getting-started"><header class="sc-c1a65243-8 eCUcKo"><span>Getting Started</span></header></h1><span><span>Start using the Full Results API in minutes by following these basic steps.</span></span><div><h1 id="signup-and-login"><header class="sc-c1a65243-7 iVSlPZ"><span>Signup and Login</span></header></h1><p class="sc-c1a65243-4 evUEeE"><span>To get started, you must register a Wolfram ID and sign in at the <a href="https://developer.wolframalpha.com" class="_3BQD orange19RedHover inlineLink sc-34cb55e4-2 sc-34cb55e4-3 jojysd bEbSlT"><span class="sc-34cb55e4-0 hLNrE"><span>Wolfram|Alpha Developer Portal</span></span></a>.</span></p></div><div><div class="sc-c1a65243-3 gmYvfm"><img src="/_next/static/images/01-WA-dev-portal_2y7ZtAvg.png" alt="WolframAlpha Developer Portal screenshot" class="sc-c1a65243-3 gmYvfm"/></div></div><div><h1 id="obtaining-an-appid"><header class="sc-c1a65243-7 iVSlPZ"><span>Obtaining an AppID</span></header></h1><p class="sc-c1a65243-4 evUEeE"><span>Click the &quot;Get an AppID&quot; button to get your first AppID button to start the app creation process. Give your application a name, a simple description and select which app type to register an AppID. Each application must have its own unique AppID.</span></p></div><div><h1 id="sample-query"><header class="sc-c1a65243-7 iVSlPZ"><span>Sample Query</span></header></h1><div><span><p class="sc-c1a65243-4 evUEeE"><span>Now that you have an AppID, you can make your first query. The base URL for queries is:</span></p><code><pre color="productsCodeSample" class="sc-34cb55e4-2 sc-34cb55e4-3 sc-c1a65243-2 cEBFzN kPdgYi jgTDUw"><span>http://api.wolframalpha.com/v2/query</span></pre></code></span></div><div><span><p class="sc-c1a65243-4 evUEeE"><span>Every query requires two pieces of information—an AppID and an input value—in order to be processed correctly. The appid parameter tells your query which AppID to use:</span></p><code><pre color="productsCodeSample" class="sc-34cb55e4-2 sc-34cb55e4-3 sc-c1a65243-2 cEBFzN kPdgYi jgTDUw"><span>http://api.wolframalpha.com/v2/query<span class="sc-c1a65243-0 cHypDI"><span>?appid=DEMO</span></span></span></pre></code></span></div><div><span><p class="sc-c1a65243-4 evUEeE"><span>Next, use the input parameter to specify the URL-encoded input for your query. For instance, here is a query for “population of France”:</span></p><code><pre color="productsCodeSample" class="sc-34cb55e4-2 sc-34cb55e4-3 sc-c1a65243-2 cEBFzN kPdgYi jgTDUw"><span>http://api.wolframalpha.com/v2/query?appid=DEMO<span class="sc-c1a65243-0 cHypDI"><span>&amp;input=population%20of%20france</span></span></span></pre></code></span></div><div><span><p class="sc-c1a65243-4 evUEeE"><span>When executed with a valid AppID, this URL will return an XML document with informational elements (referred to as <a href="/api/documentation?scrollTo=" class="_3BQD orange19RedHover inlineLink sc-34cb55e4-2 sc-34cb55e4-3 jojysd bEbSlT"><span class="sc-34cb55e4-0 hLNrE"><span>pods</span></span></a> relating to the input. Here is the XML output for the &quot;population of France&quot; query, with most elements collapsed for brevity:</span></p><code><pre color="productsCodeSample" class="sc-34cb55e4-2 sc-34cb55e4-3 sc-c1a65243-2 cEBFzN kPdgYi jgTDUw"><span>&lt;queryresult success=&quot;true&quot; error=&quot;false&quot; numpods=&quot;5&quot; datatypes=&quot;Country&quot; timedout=&quot;Data,Percent,Unit,AtmosphericProperties,UnitInformation,Music,Geometry&quot; timedoutpods=&quot;&quot; timing=&quot;6.272&quot; parsetiming=&quot;0.27&quot; parsetimedout=&quot;false&quot; version=&quot;2.6&quot;&gt;
    &lt;pod title=&quot;Input interpretation&quot; scanner=&quot;Identity&quot; id=&quot;Input&quot; position=&quot;100&quot; error=&quot;false&quot; numsubpods=&quot;1&quot;&gt;...&lt;/pod&gt;
    &lt;pod title=&quot;Result&quot; scanner=&quot;Data&quot; id=&quot;Result&quot; position=&quot;200&quot; error=&quot;false&quot; numsubpods=&quot;1&quot; primary=&quot;true&quot;&gt;
    &lt;subpod title=&quot;&quot;&gt;
        &lt;plaintext&gt;
        64.1 million people (world rank: 21st) (2014 estimate)
        &lt;/plaintext&gt;
        &lt;img src=&quot;http://www1.wolframalpha.com/Calculate/MSP/MSP291g37h8915724h4b800004ec2h0de24da9sbp?MSPStoreType=image/gif&amp;s=12&quot; alt=&quot;64.1 million people (world rank: 21st) (2014 estimate)&quot; title=&quot;64.1 million people (world rank: 21st) (2014 estimate)&quot; width=&quot;313&quot; height=&quot;18&quot;/&gt;
    &lt;/subpod&gt;
    &lt;/pod&gt;
    &lt;pod title=&quot;Recent population history&quot; scanner=&quot;Data&quot; id=&quot;RecentHistory:Population:CountryData&quot; position=&quot;300&quot; error=&quot;false&quot; numsubpods=&quot;1&quot;&gt;...&lt;/pod&gt;
    &lt;pod title=&quot;Long-term population history&quot; scanner=&quot;Data&quot; id=&quot;LongTermHistory:Population:CountryData&quot; position=&quot;400&quot; error=&quot;false&quot; numsubpods=&quot;1&quot;&gt;...&lt;/pod&gt;
    &lt;pod title=&quot;Demographics&quot; scanner=&quot;Data&quot; id=&quot;DemographicProperties:CountryData&quot; position=&quot;500&quot; error=&quot;false&quot; numsubpods=&quot;1&quot;&gt;...&lt;/pod&gt;
    &lt;warnings count=&quot;1&quot;&gt;...&lt;/warnings&gt;
    &lt;sources count=&quot;1&quot;&gt;...&lt;/sources&gt;
    &lt;/queryresult&gt;&lt;queryresult success=&quot;true&quot; error=&quot;false&quot; numpods=&quot;5&quot; datatypes=&quot;Country&quot; timedout=&quot;Data,Percent,Unit,AtmosphericProperties,UnitInformation,Music,Geometry&quot; timedoutpods=&quot;&quot; timing=&quot;6.272&quot; parsetiming=&quot;0.27&quot; parsetimedout=&quot;false&quot; version=&quot;2.6&quot;&gt;
    &lt;pod title=&quot;Input interpretation&quot; scanner=&quot;Identity&quot; id=&quot;Input&quot; position=&quot;100&quot; error=&quot;false&quot; numsubpods=&quot;1&quot;&gt;...&lt;/pod&gt;
    &lt;pod title=&quot;Result&quot; scanner=&quot;Data&quot; id=&quot;Result&quot; position=&quot;200&quot; error=&quot;false&quot; numsubpods=&quot;1&quot; primary=&quot;true&quot;&gt;
    &lt;subpod title=&quot;&quot;&gt;
        &lt;plaintext&gt;
        64.1 million people (world rank: 21st) (2014 estimate)
        &lt;/plaintext&gt;
        &lt;img src=&quot;http://www1.wolframalpha.com/Calculate/MSP/MSP291g37h8915724h4b800004ec2h0de24da9ife?MSPStoreType=image/gif&amp;s=12&quot; alt=&quot;64.1 million people (world rank: 21st) (2014 estimate)&quot; title=&quot;64.1 million people (world rank: 21st) (2014 estimate)&quot; width=&quot;313&quot; height=&quot;18&quot;/&gt;
    &lt;/subpod&gt;
    &lt;/pod&gt;
    &lt;pod title=&quot;Recent population history&quot; scanner=&quot;Data&quot; id=&quot;RecentHistory:Population:CountryData&quot; position=&quot;300&quot; error=&quot;false&quot; numsubpods=&quot;1&quot;&gt;...&lt;/pod&gt;
    &lt;pod title=&quot;Long-term population history&quot; scanner=&quot;Data&quot; id=&quot;LongTermHistory:Population:CountryData&quot; position=&quot;400&quot; error=&quot;false&quot; numsubpods=&quot;1&quot;&gt;...&lt;/pod&gt;
    &lt;pod title=&quot;Demographics&quot; scanner=&quot;Data&quot; id=&quot;DemographicProperties:CountryData&quot; position=&quot;500&quot; error=&quot;false&quot; numsubpods=&quot;1&quot;&gt;...&lt;/pod&gt;
    &lt;warnings count=&quot;1&quot;&gt;...&lt;/warnings&gt;
    &lt;sources count=&quot;1&quot;&gt;...&lt;/sources&gt;
    &lt;/queryresult&gt;</span></pre></code></span></div></div><div><h1 id="formatting-input"><header class="sc-c1a65243-7 iVSlPZ"><span>Formatting Input</span></header></h1><div><span><p class="sc-c1a65243-4 evUEeE"><span>All URLs used to make queries must be URL encoded (e.g. spaces represented as &quot;%20&quot; and backslashes represented as &quot;%5c&quot;).</span></p></span></div><div><span><p class="sc-c1a65243-4 evUEeE"><span>For mathematical queries, Wolfram|Alpha will also accept input formatted using presentation LaTeX or MathML. This can be useful when passing information back and forth between the API and a website or application using one of these formats.</span></p></span></div></div><div><h1 id="adding-parameters"><header class="sc-c1a65243-7 iVSlPZ"><span>Adding Parameters</span></header></h1><div><span><p class="sc-c1a65243-4 evUEeE"><span>You can add URL-encoded <a href="/api/documentation?scrollTo=parameter-reference" class="_3BQD orange19RedHover inlineLink sc-34cb55e4-2 sc-34cb55e4-3 jojysd bEbSlT"><span class="sc-34cb55e4-0 hLNrE"><span>parameters</span></span></a> to customize output. For instance, if you only wanted the &quot;Result&quot; pod from the above output, you could use the <a href="/api/documentation?scrollTo=selecting-pods-by-id" class="_3BQD orange19RedHover inlineLink sc-34cb55e4-2 sc-34cb55e4-3 jojysd bEbSlT"><span class="sc-34cb55e4-0 hLNrE"><span>includepodid</span></span></a> parameter:</span></p><code><pre color="productsCodeSample" class="sc-34cb55e4-2 sc-34cb55e4-3 sc-c1a65243-2 cEBFzN kPdgYi jgTDUw"><span>http://api.wolframalpha.com/v2/query?appid=DEMO&amp;input=population%20france<span class="sc-c1a65243-0 cHypDI"><span>&amp;includepodid=Result</span></span></span></pre></code></span><span><p class="sc-c1a65243-4 evUEeE"><span>This way, only pods with that exact ID are returned in the XML output:</span></p><code><pre color="productsCodeSample" class="sc-34cb55e4-2 sc-34cb55e4-3 sc-c1a65243-2 cEBFzN kPdgYi jgTDUw"><span>&lt;queryresult success=&quot;true&quot; error=&quot;false&quot; numpods=&quot;1&quot; datatypes=&quot;&quot; timedout=&quot;&quot; timedoutpods=&quot;&quot; timing=&quot;0.895&quot; parsetiming=&quot;0.277&quot; parsetimedout=&quot;false&quot; recalculate=&quot;&quot; id=&quot;MSPa201c626hgh07fd2ee900003c1966c16708edi1&quot; host=&quot;http://www1.wolframalpha.com&quot; server=&quot;13&quot; related=&quot;http://www1.wolframalpha.com/api/v2/relatedQueries.jsp?id=MSPa211c626hgh07fd2ee90000368i61d9578b12h4&amp;s=13&quot; version=&quot;2.6&quot;&gt;
    <span class="sc-c1a65243-0 cHypDI"><span>&lt;pod title=&quot;Result&quot; scanner=&quot;Data&quot; id=&quot;Result&quot; position=&quot;100&quot; error=&quot;false&quot; numsubpods=&quot;1&quot; primary=&quot;true&quot;&gt;
        &lt;subpod title=&quot;&quot;&gt;
        &lt;plaintext&gt;
            64.1 million people (world rank: 21st) (2014 estimate)
        &lt;/plaintext&gt;
        &lt;img src=&quot;http://www1.wolframalpha.com/Calculate/MSP/MSP221c626hgh07fd2ee900004eagdagf39fchhhg?MSPStoreType=image/gif&amp;s=13&quot; 
            alt=&quot;64.1 million people (world rank: 21st) (2014 estimate)&quot; 
            title=&quot;64.1 million people (world rank: 21st) (2014 estimate)&quot; 
            width=&quot;313&quot; height=&quot;18&quot;/&gt;
        &lt;/subpod&gt;
    &lt;/pod&gt;</span></span> 
   &lt;sources count=&quot;1&quot;&gt;...&lt;/sources&gt;
    &lt;/queryresult&gt;</span></pre></code></span><span><p class="sc-c1a65243-4 evUEeE"><span>Note that this result returns both a <span class="sc-c1a65243-1 gYyYOR"><span>&lt;plaintext&gt;</span></span> element and an <span class="sc-c1a65243-1 gYyYOR"><span>&lt;img&gt;</span></span> element. You can select which output type you prefer using <a href="/api/documentation?scrollTo=formatting-output" class="_3BQD orange19RedHover inlineLink sc-34cb55e4-2 sc-34cb55e4-3 jojysd bEbSlT"><span class="sc-34cb55e4-0 hLNrE"><span>the format parameter</span></span></a>:</span></p><code><pre color="productsCodeSample" class="sc-34cb55e4-2 sc-34cb55e4-3 sc-c1a65243-2 cEBFzN kPdgYi jgTDUw"><span>http://api.wolframalpha.com/v2/query?appid=DEMO&amp;input=population%20france&amp;includepodid=Result<span class="sc-c1a65243-0 cHypDI"><span>&amp;format=plaintext</span></span></span></pre></code></span><span><p class="sc-c1a65243-4 evUEeE"><span>By using parameters in your queries, you can reduce the output to just the pieces you need. Notice how much shorter this output is than that of the original query:</span></p><code><pre color="productsCodeSample" class="sc-34cb55e4-2 sc-34cb55e4-3 sc-c1a65243-2 cEBFzN kPdgYi jgTDUw"><span>&lt;queryresult success=&quot;true&quot; error=&quot;false&quot; numpods=&quot;1&quot; datatypes=&quot;&quot; timedout=&quot;&quot; timedoutpods=&quot;&quot; timing=&quot;0.723&quot; parsetiming=&quot;0.266&quot; parsetimedout=&quot;false&quot; recalculate=&quot;&quot; id=&quot;MSPa1751g37h8915724h4b80000365icce2he8ca3g1&quot; host=&quot;http://www1.wolframalpha.com&quot; server=&quot;12&quot; related=&quot;http://www1.wolframalpha.com/api/v2/relatedQueries.jsp?id=MSPa1761g37h8915724h4b80000267ba77dbgig0651&amp;s=12&quot; version=&quot;2.6&quot;&gt;
<span class="sc-c1a65243-0 cHypDI"><span>    &lt;pod title=&quot;Result&quot; scanner=&quot;Data&quot; id=&quot;Result&quot; position=&quot;100&quot; error=&quot;false&quot; numsubpods=&quot;1&quot; primary=&quot;true&quot;&gt;
        &lt;subpod title=&quot;&quot;&gt;
        &lt;plaintext&gt;
            64.1 million people (world rank: 21st) (2014 estimate)
        &lt;/plaintext&gt;
        &lt;/subpod&gt;
    &lt;/pod&gt;</span></span>    &lt;sources count=&quot;1&quot;&gt;...&lt;/sources&gt;
    &lt;/queryresult&gt;</span></pre></code></span><span><p class="sc-c1a65243-4 evUEeE"><span>A list of possible parameters is included below.</span></p></span></div></div></div></section></div><div class="_HD0s"><h1 id="parameter-reference"><header class="_2Aia"><span>Parameter Reference</span></header></h1><div><h2 class="_c49R"><span>Basic Parameters</span></h2><div class="_OXEg"><table class="_Rpbj"><thead><tr class="_BTgn"><th class="_njnW"><span>PARAMETER NAME</span></th><th><span>FUNCTION</span></th><th><span>SAMPLE VALUES</span></th><th><span>DEFAULT VALUES</span></th><th><span>NOTES</span></th></tr></thead><tbody><tr class="_L7Hf"><td class="_VcGf"><a href="/api/documentation?scrollTo=sample-query" class="_3BQD _dGJe _ZJzB sc-34cb55e4-2 sc-34cb55e4-3 cwjaCb kPdgYi _72sI"><span>input</span></a></td><td class="_JR35"><span>URL-encoded text specifying the input string</span></td><td class="_c_Pu"><span>&quot;5+largest+countries&quot;,
&quot;Doppler%20shift&quot;,
&quot;pascal%27s%20triangle&quot;</span></td><td class="_iwZf"><span>N/A (Queries without an input value will fail)</span></td><td class="_kx7V"><span>Required parameter</span></td></tr><tr class="_L7Hf"><td class="_VcGf"><a href="/api/documentation?scrollTo=obtaining-an-appid" class="_3BQD _dGJe _ZJzB sc-34cb55e4-2 sc-34cb55e4-3 cwjaCb kPdgYi _72sI"><span>appid</span></a></td><td class="_JR35"><span>An ID provided by Wolfram Research that identifies the application or organization making the request</span></td><td class="_c_Pu"><span>X7WEHY-W45KYJL3C9</span></td><td class="_iwZf"><span>N/A (Queries without an AppID will fail)</span></td><td class="_kx7V"><span>Required parameter</span></td></tr><tr class="_L7Hf"><td class="_VcGf"><a href="/api/documentation?scrollTo=format-parameter" class="_3BQD _dGJe _ZJzB sc-34cb55e4-2 sc-34cb55e4-3 cwjaCb kPdgYi _72sI"><span>format</span></a></td><td class="_JR35"><span>The desired format for individual result pods</span></td><td class="_c_Pu"><span>&quot;image&quot;, &quot;imagemap&quot;, &quot;plaintext&quot;, &quot;minput&quot;, &quot;moutput&quot;, &quot;cell&quot;, &quot;mathml&quot;, &quot;sound&quot;, &quot;wav&quot;</span></td><td class="_iwZf"><span>Return basic text and image formats (&quot;plaintext,image&quot;)</span></td><td class="_kx7V"><span>All possible values for this parameter are listed here. For multiple formats, separate values with a comma. </span></td></tr><tr class="_L7Hf"><td class="_VcGf"><a href="/api/documentation?scrollTo=output-parameter" class="_3BQD _dGJe _ZJzB sc-34cb55e4-2 sc-34cb55e4-3 cwjaCb kPdgYi _72sI"><span>output</span></a></td><td class="_JR35"><span>The desired format for full results</span></td><td class="_c_Pu"><span>&quot;xml&quot;, &quot;json&quot;</span></td><td class="_iwZf"><span>Return an XML document</span></td><td class="_kx7V"><span>All possible values for this parameter are listed here</span></td></tr></tbody></table></div></div><div><h2 class="_c49R"><span>Pod Selection</span></h2><div class="_OXEg"><table class="_Rpbj"><thead><tr class="_BTgn"><th class="_njnW"><span>PARAMETER NAME</span></th><th><span>FUNCTION</span></th><th><span>SAMPLE VALUES</span></th><th><span>DEFAULT VALUES</span></th><th><span>NOTES</span></th></tr></thead><tbody><tr class="_L7Hf"><td class="_VcGf"><a href="/api/documentation?scrollTo=selecting-pods-by-id" class="_3BQD _dGJe _ZJzB sc-34cb55e4-2 sc-34cb55e4-3 cwjaCb kPdgYi _72sI"><span>includepodid</span></a></td><td class="_JR35"><span>Specifies a pod ID to include in the result</span></td><td class="_c_Pu"><span>&quot;Result&quot;,
&quot;BasicInformation:PeopleData&quot;,
&quot;DecimalApproximation&quot;</span></td><td class="_iwZf"><span>All pods included	</span></td><td class="_kx7V"><span>To specify multiple elements, use multiple instances of the parameter</span></td></tr><tr class="_L7Hf"><td class="_VcGf"><a href="/api/documentation?scrollTo=selecting-pods-by-id" class="_3BQD _dGJe _ZJzB sc-34cb55e4-2 sc-34cb55e4-3 cwjaCb kPdgYi _72sI"><span>excludepodid</span></a></td><td class="_JR35"><span>Specifies a pod ID to exclude from the result</span></td><td class="_c_Pu"><span>&quot;Result&quot;,
&quot;BasicInformation:PeopleData&quot;,
&quot;DecimalApproximation&quot;</span></td><td class="_iwZf"><span>No pods excluded</span></td><td class="_kx7V"><span>To specify multiple elements, use multiple instances of the parameter</span></td></tr><tr class="_L7Hf"><td class="_VcGf"><a href="/api/documentation?scrollTo=selecting-pods-by-title" class="_3BQD _dGJe _ZJzB sc-34cb55e4-2 sc-34cb55e4-3 cwjaCb kPdgYi _72sI"><span>podtitle</span></a></td><td class="_JR35"><span>Specifies a pod title to include in the result</span></td><td class="_c_Pu"><span>&quot;Basic+Information&quot;,
&quot;Image&quot;,
&quot;Alternative%20representations&quot;</span></td><td class="_iwZf"><span>All pods returned</span></td><td class="_kx7V"><span>To specify multiple elements, use multiple instances of the parameter. Use * as a wildcard to match zero or more characters in pod titles.</span></td></tr><tr class="_L7Hf"><td class="_VcGf"><a href="/api/documentation?scrollTo=selecting-pods-by-index" class="_3BQD _dGJe _ZJzB sc-34cb55e4-2 sc-34cb55e4-3 cwjaCb kPdgYi _72sI"><span>podindex</span></a></td><td class="_JR35"><span>Specifies the index(es) of the pod(s) to return</span></td><td class="_c_Pu"><span>&quot;1&quot;, &quot;7&quot;, &quot;5,12,13&quot;</span></td><td class="_iwZf"><span>All pods returned</span></td><td class="_kx7V"><span>To specify multiple elements, separate values with a comma</span></td></tr><tr class="_L7Hf"><td class="_VcGf"><a href="/api/documentation?scrollTo=selecting-pods-by-scanner" class="_3BQD _dGJe _ZJzB sc-34cb55e4-2 sc-34cb55e4-3 cwjaCb kPdgYi _72sI"><span>scanner</span></a></td><td class="_JR35"><span>Specifies that only pods produced by the given scanner should be returned</span></td><td class="_c_Pu"><span>&quot;Numeric&quot;, &quot;Data&quot;, &quot;Traveling&quot;</span></td><td class="_iwZf"><span>Pods from all scanners returned</span></td><td class="_kx7V"><span>To specify multiple elements, use multiple instances of the parameter</span></td></tr></tbody></table></div></div><div><h2 class="_c49R"><span>Location</span></h2><div class="_OXEg"><table class="_Rpbj"><thead><tr class="_BTgn"><th class="_njnW"><span>PARAMETER NAME</span></th><th><span>FUNCTION</span></th><th><span>SAMPLE VALUES</span></th><th><span>DEFAULT VALUES</span></th><th><span>NOTES</span></th></tr></thead><tbody><tr class="_L7Hf"><td class="_VcGf"><a href="/api/documentation?scrollTo=ip-address" class="_3BQD _dGJe _ZJzB sc-34cb55e4-2 sc-34cb55e4-3 cwjaCb kPdgYi _72sI"><span>ip</span></a></td><td class="_JR35"><span>Specifies a custom query location based on an IP address</span></td><td class="_c_Pu"><span>&quot;192.168.1.1&quot;, &quot;127.0.0.1&quot;</span></td><td class="_iwZf"><span>Use caller&#x27;s IP address for location</span></td><td class="_kx7V"><span>Only one location parameter may be used at a time. IPv4 and IPv6 addresses are supported.</span></td></tr><tr class="_L7Hf"><td class="_VcGf"><a href="/api/documentation?scrollTo=latitude-and-longitude" class="_3BQD _dGJe _ZJzB sc-34cb55e4-2 sc-34cb55e4-3 cwjaCb kPdgYi _72sI"><span>latlong</span></a></td><td class="_JR35"><span>Specifies a custom query location based on a latitude/longitude pair</span></td><td class="_c_Pu"><span>&quot;40.42,-3.71&quot;, &quot;40.11, -88.24&quot;, &quot;0,0&quot;</span></td><td class="_iwZf"><span>Use caller&#x27;s IP address for location</span></td><td class="_kx7V"><span>Only one location parameter may be used at a time</span></td></tr><tr class="_L7Hf"><td class="_VcGf"><a href="/api/documentation?scrollTo=semantic-location" class="_3BQD _dGJe _ZJzB sc-34cb55e4-2 sc-34cb55e4-3 cwjaCb kPdgYi _72sI"><span>location</span></a></td><td class="_JR35"><span>Specifies a custom query location based on a string</span></td><td class="_c_Pu"><span>&quot;Boston, MA&quot;, &quot;The North Pole&quot;, &quot;Beijing&quot;</span></td><td class="_iwZf"><span>Use caller&#x27;s IP address for location</span></td><td class="_kx7V"><span>Only one location parameter may be used at a time</span></td></tr></tbody></table></div></div><div><h2 class="_c49R"><span>Size</span></h2><div class="_OXEg"><table class="_Rpbj"><thead><tr class="_BTgn"><th class="_njnW"><span>PARAMETER NAME</span></th><th><span>FUNCTION</span></th><th><span>SAMPLE VALUES</span></th><th><span>DEFAULT VALUES</span></th><th><span>NOTES</span></th></tr></thead><tbody><tr class="_L7Hf"><td class="_VcGf"><a href="/api/documentation?scrollTo=width-width" class="_3BQD _dGJe _ZJzB sc-34cb55e4-2 sc-34cb55e4-3 cwjaCb kPdgYi _72sI"><span>width</span></a></td><td class="_JR35"><span>Specify an approximate width limit for text and tables</span></td><td class="_c_Pu"><span>&quot;200&quot;, &quot;500&quot;</span></td><td class="_iwZf"><span>Width set at 500 pixels</span></td><td class="_kx7V"><span>This parameter does not affect plots or graphics. Width values are approximate; behavior may vary for different content.</span></td></tr><tr class="_L7Hf"><td class="_VcGf"><a href="/api/documentation?scrollTo=width-maxwidth" class="_3BQD _dGJe _ZJzB sc-34cb55e4-2 sc-34cb55e4-3 cwjaCb kPdgYi _72sI"><span>maxwidth</span></a></td><td class="_JR35"><span>Specify an extended maximum width for large objects</span></td><td class="_c_Pu"><span>&quot;200&quot;, &quot;500&quot;</span></td><td class="_iwZf"><span>Width set at 500 pixels</span></td><td class="_kx7V"><span>This parameter does not affect plots or graphics. Width values are approximate; behavior may vary for different content.</span></td></tr><tr class="_L7Hf"><td class="_VcGf"><a href="/api/documentation?scrollTo=width-plotwidth" class="_3BQD _dGJe _ZJzB sc-34cb55e4-2 sc-34cb55e4-3 cwjaCb kPdgYi _72sI"><span>plotwidth</span></a></td><td class="_JR35"><span>Specify an approximate width limit for plots and graphics</span></td><td class="_c_Pu"><span>&quot;100&quot;, &quot;200&quot;</span></td><td class="_iwZf"><span>Plot width set at 200 pixels</span></td><td class="_kx7V"><span>This parameter does not affect text or tables. Width values are approximate; behavior may vary for different content.</span></td></tr><tr class="_L7Hf"><td class="_VcGf"><a href="/api/documentation?scrollTo=width-mag" class="_3BQD _dGJe _ZJzB sc-34cb55e4-2 sc-34cb55e4-3 cwjaCb kPdgYi _72sI"><span>mag</span></a></td><td class="_JR35"><span>Specify magnification of objects within a pod</span></td><td class="_c_Pu"><span>&quot;0.5&quot;, &quot;1.0&quot;, &quot;2.0&quot;</span></td><td class="_iwZf"><span>Magnification factor of 1.0</span></td><td class="_kx7V"><span>Changing this parameter does not affect the overall size of pods</span></td></tr></tbody></table></div></div><div><h2 class="_c49R"><span>Timeouts/Async</span></h2><div class="_OXEg"><table class="_Rpbj"><thead><tr class="_BTgn"><th class="_njnW"><span>PARAMETER NAME</span></th><th><span>FUNCTION</span></th><th><span>SAMPLE VALUES</span></th><th><span>DEFAULT VALUES</span></th><th><span>NOTES</span></th></tr></thead><tbody><tr class="_L7Hf"><td class="_VcGf"><a href="/api/documentation?scrollTo=podtimeout-scantimeout" class="_3BQD _dGJe _ZJzB sc-34cb55e4-2 sc-34cb55e4-3 cwjaCb kPdgYi _72sI"><span>scantimeout</span></a></td><td class="_JR35"><span>The number of seconds to allow Wolfram|Alpha to compute results in the &quot;scan&quot; stage of processing</span></td><td class="_c_Pu"><span>&quot;0.5&quot;, &quot;5.0&quot;</span></td><td class="_iwZf"><span>Scan stage times out after 3.0 seconds</span></td><td class="_kx7V"><span>This parameter effectively limits the number and breadth of subtopics that will be included in a result</span></td></tr><tr class="_L7Hf"><td class="_VcGf"><a href="/api/documentation?scrollTo=podtimeout-formattimeout" class="_3BQD _dGJe _ZJzB sc-34cb55e4-2 sc-34cb55e4-3 cwjaCb kPdgYi _72sI"><span>podtimeout</span></a></td><td class="_JR35"><span>The number of seconds to allow Wolfram|Alpha to spend in the &quot;format&quot; stage for any one pod</span></td><td class="_c_Pu"><span>&quot;0.5&quot;, &quot;5.0&quot;</span></td><td class="_iwZf"><span>Individual pods time out after 4.0 seconds</span></td><td class="_kx7V"><span>This parameter can be used to prevent a single pod from dominating too much processing time, or to return only the &quot;quick&quot; information in your result</span></td></tr><tr class="_L7Hf"><td class="_VcGf"><a href="/api/documentation?scrollTo=podtimeout-formattimeout" class="_3BQD _dGJe _ZJzB sc-34cb55e4-2 sc-34cb55e4-3 cwjaCb kPdgYi _72sI"><span>formattimeout</span></a></td><td class="_JR35"><span>The number of seconds to allow Wolfram|Alpha to spend in the &quot;format&quot; stage for the entire collection of pods</span></td><td class="_c_Pu"><span>&quot;0.5&quot;, &quot;5.0&quot;</span></td><td class="_iwZf"><span>Format stage times out after 8.0 seconds	</span></td><td class="_kx7V"><span>Use this parameter in conjunction with podtimeout to balance between returning a few large results and numerous quick results</span></td></tr><tr class="_L7Hf"><td class="_VcGf"><a href="/api/documentation?scrollTo=podtimeout-parsetimeout" class="_3BQD _dGJe _ZJzB sc-34cb55e4-2 sc-34cb55e4-3 cwjaCb kPdgYi _72sI"><span>parsetimeout</span></a></td><td class="_JR35"><span>The number of seconds to allow Wolfram|Alpha to spend in the &quot;parsing&quot; stage of processing</span></td><td class="_c_Pu"><span>&quot;0.5&quot;, &quot;5.0&quot;</span></td><td class="_iwZf"><span>Parsing stage times out after 5.0 seconds</span></td><td class="_kx7V"><span>Queries that time out in this phase will return a &lt;queryresult&gt; element with success=false and parsetimeout=true. Very few queries will exceed the default.</span></td></tr><tr class="_L7Hf"><td class="_VcGf"><a href="/api/documentation?scrollTo=podtimeout-totaltimeout" class="_3BQD _dGJe _ZJzB sc-34cb55e4-2 sc-34cb55e4-3 cwjaCb kPdgYi _72sI"><span>totaltimeout</span></a></td><td class="_JR35"><span>The total number of seconds to allow Wolfram|Alpha to spend on a query</span></td><td class="_c_Pu"><span>&quot;0.5&quot;, &quot;5.0&quot;</span></td><td class="_iwZf"><span>Queries time out after 20.0 seconds</span></td><td class="_kx7V"><span>Combine with other timeout parameters to define a last-resort time limit for queries.</span></td></tr><tr class="_L7Hf"><td class="_VcGf"><a href="/api/documentation?scrollTo=podtimeout-async" class="_3BQD _dGJe _ZJzB sc-34cb55e4-2 sc-34cb55e4-3 cwjaCb kPdgYi _72sI"><span>async</span></a></td><td class="_JR35"><span>Toggles asynchronous mode to allow partial results to return before all the pods are computed</span></td><td class="_c_Pu"><span>&quot;true&quot;, &quot;false&quot;, &quot;3.0&quot;</span></td><td class="_iwZf"><span>Asynchronous mode disabled (&quot;false&quot;)</span></td><td class="_kx7V"><span>Specifying a number sets the time limit (in seconds) for returning partial results</span></td></tr></tbody></table></div></div><div><h2 class="_c49R"><span>Miscellaneous</span></h2><div class="_OXEg"><table class="_Rpbj"><thead><tr class="_BTgn"><th class="_njnW"><span>PARAMETER NAME</span></th><th><span>FUNCTION</span></th><th><span>SAMPLE VALUES</span></th><th><span>DEFAULT VALUES</span></th><th><span>NOTES</span></th></tr></thead><tbody><tr class="_L7Hf"><td class="_VcGf"><a href="/api/documentation?scrollTo=misc-reinterpret" class="_3BQD _dGJe _ZJzB sc-34cb55e4-2 sc-34cb55e4-3 cwjaCb kPdgYi _72sI"><span>reinterpret</span></a></td><td class="_JR35"><span>Whether to allow Wolfram|Alpha to reinterpret queries that would otherwise not be understood</span></td><td class="_c_Pu"><span>&quot;true&quot;, &quot;false&quot;</span></td><td class="_iwZf"><span>Do not reinterpret queries (&quot;false&quot;)</span></td><td class="_kx7V"><span>This parameter will force the API to decide among &lt;didyoumeans&gt; and similar XML results</span></td></tr><tr class="_L7Hf"><td class="_VcGf"><a href="/api/documentation?scrollTo=misc-translation" class="_3BQD _dGJe _ZJzB sc-34cb55e4-2 sc-34cb55e4-3 cwjaCb kPdgYi _72sI"><span>translation</span></a></td><td class="_JR35"><span>Whether to allow Wolfram|Alpha to try to translate simple queries into English</span></td><td class="_c_Pu"><span>&quot;true&quot;, &quot;false&quot;</span></td><td class="_iwZf"><span>Do not attempt translation (&quot;false&quot;)</span></td><td class="_kx7V"><span>Translation attempts are displayed as &lt;translation&gt; warnings in XML results</span></td></tr><tr class="_L7Hf"><td class="_VcGf"><a href="/api/documentation?scrollTo=misc-ignorecase" class="_3BQD _dGJe _ZJzB sc-34cb55e4-2 sc-34cb55e4-3 cwjaCb kPdgYi _72sI"><span>ignorecase</span></a></td><td class="_JR35"><span>Whether to force Wolfram|Alpha to ignore case in queries</span></td><td class="_c_Pu"><span>&quot;true&quot;, &quot;false&quot;</span></td><td class="_iwZf"><span>Do not ignore case (&quot;false&quot;)</span></td><td class="_kx7V"><span>This can be useful for differentiating abbreviations, acronyms and titles</span></td></tr><tr class="_L7Hf"><td class="_VcGf"><a href="/api/documentation?scrollTo=misc-sig" class="_3BQD _dGJe _ZJzB sc-34cb55e4-2 sc-34cb55e4-3 cwjaCb kPdgYi _72sI"><span>sig</span></a></td><td class="_JR35"><span>A special signature that can be applied to guard against misuse of your AppID</span></td><td class="_c_Pu"><span>N/A</span></td><td class="_iwZf"><span>No signature applied</span></td><td class="_kx7V"><span>For access to this feature, <a href="https://products.wolframalpha.com/contact-us/#general" class="_3BQD _72sI _ZJzB sc-34cb55e4-2 sc-34cb55e4-3 cwjaCb kPdgYi"><span class="sc-34cb55e4-0 hLNrE"><span>contact us</span></span></a></span></td></tr><tr class="_L7Hf"><td class="_VcGf"><a href="/api/documentation?scrollTo=using-assumptions" class="_3BQD _dGJe _ZJzB sc-34cb55e4-2 sc-34cb55e4-3 cwjaCb kPdgYi _72sI"><span>assumption</span></a></td><td class="_JR35"><span>Specifies an assumption, such as the meaning of a word or the value of a formula variable</span></td><td class="_c_Pu"><span>&quot;*C.pi-_*Movie&quot;, &quot;DateOrder_**Day.Month.Year--&quot;</span></td><td class="_iwZf"><span>Assumptions made implicitly by the API</span></td><td class="_kx7V"><span>Values for this parameter are given by the <span class="_Uum3"><span>input</span></span> properties of &lt;value&gt; subelements of &lt;assumption&gt; elements in XML results</span></td></tr><tr class="_L7Hf"><td class="_VcGf"><a href="/api/documentation?scrollTo=pod-states" class="_3BQD _dGJe _ZJzB sc-34cb55e4-2 sc-34cb55e4-3 cwjaCb kPdgYi _72sI"><span>podstate</span></a></td><td class="_JR35"><span>Specifies a pod state change, which replaces a pod with a modified version, such as displaying more digits of a large decimal value</span></td><td class="_c_Pu"><span>&quot;WeatherCharts:WeatherData__Past+5+years&quot;, &quot;2@DecimalApproximation__More+digits&quot;</span></td><td class="_iwZf"><span>Pod states generated implicitly by the API</span></td><td class="_kx7V"><span>Specify consecutive state changes with the @ symbol (e.g. podstate=2@DecimalApproximation__More+digits)</span></td></tr><tr class="_L7Hf"><td class="_VcGf"><a href="/api/documentation?scrollTo=misc-units" class="_3BQD _dGJe _ZJzB sc-34cb55e4-2 sc-34cb55e4-3 cwjaCb kPdgYi _72sI"><span>units</span></a></td><td class="_JR35"><span>Lets you specify the preferred measurement system, either &quot;metric&quot; or &quot;nonmetric&quot; (US customary units)</span></td><td class="_c_Pu"><span>&quot;metric&quot;, &quot;nonmetric&quot;</span></td><td class="_iwZf"><span>Chosen based on caller&#x27;s IP address</span></td><td class="_kx7V"><span>Using location parameters will affect the units displayed for a query)</span></td></tr></tbody></table></div></div></div><div class="_4o8i"><h1 id="xml-result-elements"><header class="_QWbW"><span>List of XML Result Elements</span></header></h1><section><div class="_nt9P"><span>This pseudo-XML shows the general hierarchy of XML results from the Full Results API. Note that some elements (e.g. &lt;states&gt;) can appear in multiple places. Additionally, not all these elements will be returned in one result (e.g. &lt;tips&gt; only appears for results not understood by the interpreter, so it would not be seen next to &lt;pod&gt; in a result).</span></div><div class="_Tpm6"><span><span>&lt;</span><a href="/api/documentation?scrollTo=result-queryresult" class="_3BQD orange19RedHover _8T9T sc-34cb55e4-2 sc-34cb55e4-3 jojysd kPdgYi"><span class="sc-34cb55e4-0 hLNrE"><span>queryresult</span></span></a><span>&gt;</span>
    <span>&lt;</span><a href="/api/documentation?scrollTo=result-languagemsg" class="_3BQD orange19RedHover _8T9T sc-34cb55e4-2 sc-34cb55e4-3 jojysd kPdgYi"><span class="sc-34cb55e4-0 hLNrE"><span>languagemsg</span></span></a><span>&gt;</span>
    <span>&lt;</span><a href="/api/documentation?scrollTo=result-tips" class="_3BQD orange19RedHover _8T9T sc-34cb55e4-2 sc-34cb55e4-3 jojysd kPdgYi"><span class="sc-34cb55e4-0 hLNrE"><span>tips</span></span></a><span>&gt;</span>
        &lt;tip&gt;
    <span>&lt;</span><a href="/api/documentation?scrollTo=result-futuretopic" class="_3BQD orange19RedHover _8T9T sc-34cb55e4-2 sc-34cb55e4-3 jojysd kPdgYi"><span class="sc-34cb55e4-0 hLNrE"><span>futuretopic</span></span></a><span>&gt;</span>
    <span>&lt;</span><a href="/api/documentation?scrollTo=result-pod" class="_3BQD orange19RedHover _8T9T sc-34cb55e4-2 sc-34cb55e4-3 jojysd kPdgYi"><span class="sc-34cb55e4-0 hLNrE"><span>pod</span></span></a><span>&gt;</span>
        <span>&lt;</span><a href="/api/documentation?scrollTo=result-subpod" class="_3BQD orange19RedHover _8T9T sc-34cb55e4-2 sc-34cb55e4-3 jojysd kPdgYi"><span class="sc-34cb55e4-0 hLNrE"><span>subpod</span></span></a><span>&gt;</span>
            <span>&lt;</span><a href="/api/documentation?scrollTo=result-img" class="_3BQD orange19RedHover _8T9T sc-34cb55e4-2 sc-34cb55e4-3 jojysd kPdgYi"><span class="sc-34cb55e4-0 hLNrE"><span>img</span></span></a><span>&gt;</span>
            <span>&lt;</span><a href="/api/documentation?scrollTo=result-imagemap" class="_3BQD orange19RedHover _8T9T sc-34cb55e4-2 sc-34cb55e4-3 jojysd kPdgYi"><span class="sc-34cb55e4-0 hLNrE"><span>imagemap</span></span></a><span>&gt;</span>
                &lt;rect&gt;
            <span>&lt;</span><a href="/api/documentation?scrollTo=result-plaintext" class="_3BQD orange19RedHover _8T9T sc-34cb55e4-2 sc-34cb55e4-3 jojysd kPdgYi"><span class="sc-34cb55e4-0 hLNrE"><span>plaintext</span></span></a><span>&gt;</span>
            <span>&lt;</span><a href="/api/documentation?scrollTo=result-mathml" class="_3BQD orange19RedHover _8T9T sc-34cb55e4-2 sc-34cb55e4-3 jojysd kPdgYi"><span class="sc-34cb55e4-0 hLNrE"><span>mathml</span></span></a><span>&gt;</span>
                &lt;math&gt;
            <span>&lt;</span><a href="/api/documentation?scrollTo=result-sound" class="_3BQD orange19RedHover _8T9T sc-34cb55e4-2 sc-34cb55e4-3 jojysd kPdgYi"><span class="sc-34cb55e4-0 hLNrE"><span>sound</span></span></a><span>&gt;</span>
            <span>&lt;</span><a href="/api/documentation?scrollTo=result-minput" class="_3BQD orange19RedHover _8T9T sc-34cb55e4-2 sc-34cb55e4-3 jojysd kPdgYi"><span class="sc-34cb55e4-0 hLNrE"><span>minput</span></span></a><span>&gt;</span>
            <span>&lt;</span><a href="/api/documentation?scrollTo=result-moutput" class="_3BQD orange19RedHover _8T9T sc-34cb55e4-2 sc-34cb55e4-3 jojysd kPdgYi"><span class="sc-34cb55e4-0 hLNrE"><span>moutput</span></span></a><span>&gt;</span>
            <span>&lt;</span><a href="/api/documentation?scrollTo=result-cell" class="_3BQD orange19RedHover _8T9T sc-34cb55e4-2 sc-34cb55e4-3 jojysd kPdgYi"><span class="sc-34cb55e4-0 hLNrE"><span>cell</span></span></a><span>&gt;</span>
                &lt;![CDATA[...]]&gt;
            <span>&lt;</span><a href="/api/documentation?scrollTo=result-states" class="_3BQD orange19RedHover _8T9T sc-34cb55e4-2 sc-34cb55e4-3 jojysd kPdgYi"><span class="sc-34cb55e4-0 hLNrE"><span>states</span></span></a><span>&gt;</span>
                <span>&lt;</span><a href="/api/documentation?scrollTo=result-state" class="_3BQD orange19RedHover _8T9T sc-34cb55e4-2 sc-34cb55e4-3 jojysd kPdgYi"><span class="sc-34cb55e4-0 hLNrE"><span>state</span></span></a><span>&gt;</span>
        <span>&lt;</span><a href="/api/documentation?scrollTo=result-states" class="_3BQD orange19RedHover _8T9T sc-34cb55e4-2 sc-34cb55e4-3 jojysd kPdgYi"><span class="sc-34cb55e4-0 hLNrE"><span>states</span></span></a><span>&gt;</span>
            <span>&lt;</span><a href="/api/documentation?scrollTo=result-state" class="_3BQD orange19RedHover _8T9T sc-34cb55e4-2 sc-34cb55e4-3 jojysd kPdgYi"><span class="sc-34cb55e4-0 hLNrE"><span>state</span></span></a><span>&gt;</span>
        <span>&lt;</span><a href="/api/documentation?scrollTo=result-infos" class="_3BQD orange19RedHover _8T9T sc-34cb55e4-2 sc-34cb55e4-3 jojysd kPdgYi"><span class="sc-34cb55e4-0 hLNrE"><span>infos</span></span></a><span>&gt;</span>
            &lt;info&gt;
        <span>&lt;</span><a href="/api/documentation?scrollTo=result-error" class="_3BQD orange19RedHover _8T9T sc-34cb55e4-2 sc-34cb55e4-3 jojysd kPdgYi"><span class="sc-34cb55e4-0 hLNrE"><span>error</span></span></a><span>&gt;</span>
    <span>&lt;</span><a href="/api/documentation?scrollTo=result-assumptions" class="_3BQD orange19RedHover _8T9T sc-34cb55e4-2 sc-34cb55e4-3 jojysd kPdgYi"><span class="sc-34cb55e4-0 hLNrE"><span>assumptions</span></span></a><span>&gt;</span>
        <span>&lt;</span><a href="/api/documentation?scrollTo=result-assumption" class="_3BQD orange19RedHover _8T9T sc-34cb55e4-2 sc-34cb55e4-3 jojysd kPdgYi"><span class="sc-34cb55e4-0 hLNrE"><span>assumption</span></span></a><span>&gt;</span>
    <span>&lt;</span><a href="/api/documentation?scrollTo=result-examplepage" class="_3BQD orange19RedHover _8T9T sc-34cb55e4-2 sc-34cb55e4-3 jojysd kPdgYi"><span class="sc-34cb55e4-0 hLNrE"><span>examplepage</span></span></a><span>&gt;</span>
    <span>&lt;</span><a href="/api/documentation?scrollTo=result-warnings" class="_3BQD orange19RedHover _8T9T sc-34cb55e4-2 sc-34cb55e4-3 jojysd kPdgYi"><span class="sc-34cb55e4-0 hLNrE"><span>warnings</span></span></a><span>&gt;</span>
        <span>&lt;</span><a href="/api/documentation?scrollTo=result-spellcheck" class="_3BQD orange19RedHover _8T9T sc-34cb55e4-2 sc-34cb55e4-3 jojysd kPdgYi"><span class="sc-34cb55e4-0 hLNrE"><span>spellcheck</span></span></a><span>&gt;</span>
        <span>&lt;</span><a href="/api/documentation?scrollTo=result-delimiters" class="_3BQD orange19RedHover _8T9T sc-34cb55e4-2 sc-34cb55e4-3 jojysd kPdgYi"><span class="sc-34cb55e4-0 hLNrE"><span>delimiters</span></span></a><span>&gt;</span>
        <span>&lt;</span><a href="/api/documentation?scrollTo=result-translation" class="_3BQD orange19RedHover _8T9T sc-34cb55e4-2 sc-34cb55e4-3 jojysd kPdgYi"><span class="sc-34cb55e4-0 hLNrE"><span>translation</span></span></a><span>&gt;</span>
        <span>&lt;</span><a href="/api/documentation?scrollTo=result-reinterpret" class="_3BQD orange19RedHover _8T9T sc-34cb55e4-2 sc-34cb55e4-3 jojysd kPdgYi"><span class="sc-34cb55e4-0 hLNrE"><span>reinterpret</span></span></a><span>&gt;</span>
    <span>&lt;</span><a href="/api/documentation?scrollTo=result-sources" class="_3BQD orange19RedHover _8T9T sc-34cb55e4-2 sc-34cb55e4-3 jojysd kPdgYi"><span class="sc-34cb55e4-0 hLNrE"><span>sources</span></span></a><span>&gt;</span>
        &lt;source&gt;
    <span>&lt;</span><a href="/api/documentation?scrollTo=result-generalization" class="_3BQD orange19RedHover _8T9T sc-34cb55e4-2 sc-34cb55e4-3 jojysd kPdgYi"><span class="sc-34cb55e4-0 hLNrE"><span>generalization</span></span></a><span>&gt;</span>
    <span>&lt;</span><a href="/api/documentation?scrollTo=result-didyoumeans" class="_3BQD orange19RedHover _8T9T sc-34cb55e4-2 sc-34cb55e4-3 jojysd kPdgYi"><span class="sc-34cb55e4-0 hLNrE"><span>didyoumeans</span></span></a><span>&gt;</span>
        &lt;didyoumean&gt;
    <span>&lt;</span><a href="/api/documentation?scrollTo=result-error" class="_3BQD orange19RedHover _8T9T sc-34cb55e4-2 sc-34cb55e4-3 jojysd kPdgYi"><span class="sc-34cb55e4-0 hLNrE"><span>error</span></span></a><span>&gt;</span></span></div><ul><div><h4 class="_qtS_"><span>&lt;queryresult&gt;</span></h4><div class="_Q0cu"><span><span class="_Ekfq"><span>&lt;queryresult&gt;</span></span> contains the entire API result. The <span class="_Ekfq"><span>&lt;queryresult&gt;</span></span> element is a superelement of all others listed. It has the following attributes:</span></div><ul class="_U6n5"><li class="_JUkb"><span><span class="_XAxc"><span>success</span></span> — true or false depending on whether the input could be successfully understood. If false, there will be no <span class="_Ekfq"><span>&lt;pod&gt;</span></span> subelements.</span></li><li class="_JUkb"><span><span class="_XAxc"><span>error</span></span> — true or false depending on whether a serious processing error occurred, such as a missing required parameter. If true, there will be no pod content, just an <span class="_Ekfq"><span>&lt;error&gt;</span></span> subelement.</span></li><li class="_JUkb"><span><span class="_XAxc"><span>numpods</span></span> — The number of pods.</span></li><li class="_JUkb"><span><span class="_XAxc"><span>version</span></span> — The version specification of the API on the server that produced this result.</span></li><li class="_JUkb"><span><span class="_XAxc"><span>datatypes</span></span> — Categories and types of data represented in the results (e.g. &quot;Financial&quot;).</span></li><li class="_JUkb"><span><span class="_XAxc"><span>timing</span></span> — The wall-clock time in seconds required to generate the output.</span></li><li class="_JUkb"><span><span class="_XAxc"><span>timedout</span></span> — The number of pods that are missing because they timed out (see the <span class="_XAxc"><a href="/api/documentation?scrollTo=timeouts-and-asynchronous-behavior" class="_3BQD orange19RedHover _8T9T sc-34cb55e4-2 sc-34cb55e4-3 jojysd kPdgYi"><span class="sc-34cb55e4-0 hLNrE"><span>timeout query parameters</span></span></a></span>).</span></li><li class="_JUkb"><span><span class="_XAxc"><span>parsetiming</span></span> — The time in seconds required by the parsing phase.</span></li><li class="_JUkb"><span><span class="_XAxc"><span>parsedtimeout</span></span> — Whether the parsing stage timed out (try a longer <span class="_XAxc"><a href="/api/documentation?scrollTo=podtimeout-parsetimeout" class="_3BQD orange19RedHover _8T9T sc-34cb55e4-2 sc-34cb55e4-3 jojysd kPdgYi"><span class="sc-34cb55e4-0 hLNrE"><span>parsetimeout</span></span></a></span> parameter if true).</span></li><li class="_JUkb"><span><span class="_XAxc"><span>recalculate</span></span> — A URL to use to recalculate the query and get more pods.</span></li></ul></div><div><h4 class="_qtS_"><span>&lt;pod&gt;</span></h4><div class="_Q0cu"><span><span class="_Ekfq"><span>&lt;pod&gt;</span></span> elements are the main output of the Full Results API. Each pod contains a piece or category of information about the given query. It has the following attributes:</span></div><ul class="_U6n5"><li class="_JUkb"><span><span class="_XAxc"><span>title</span></span> — The pod title, used to identify the pod and its contents.</span></li><li class="_JUkb"><span><span class="_XAxc"><span>error</span></span> — true or false depending on whether a serious processing error occurred with this specific pod. If true, there will be an &lt;error&gt; subelement</span></li><li class="_JUkb"><span><span class="_XAxc"><span>position</span></span> — A number indicating the intended position of the pod in a visual display. These numbers are typically multiples of 100, and they form an increasing sequence from top to bottom.</span></li><li class="_JUkb"><span><span class="_XAxc"><span>scanner</span></span> — The name of the scanner that produced this pod. A general guide to the type of data it holds.</span></li><li class="_JUkb"><span><span class="_XAxc"><span>id</span></span> — A unique identifier for a pod, used for selecting specific pods to include or exclude.</span></li><li class="_JUkb"><span><span class="_XAxc"><span>numsubpods</span></span> — The number of subpod elements present.</span></li></ul></div><div><h4 class="_qtS_"><span>&lt;subpod&gt;</span></h4><div class="_Q0cu"><span>Subelements of <span class="_XAxc"><span>&lt;subpod&gt;</span></span> that contain the results for a single subpod. &lt;subpod&gt; has a title attribute, which is usually an empty string because most subpods have no title.</span></div><ul class="_U6n5"></ul></div><div><h4 class="_qtS_"><span>&lt;img&gt;</span></h4><div class="_Q0cu"><span>HTML <span class="_XAxc"><span>&lt;img&gt;</span></span> elements suitable for direct inclusion in a webpage. They point to stored image files giving a formatted visual representation of a single subpod. They only appear in pods if the requested result formats include img. In most cases, the image will be in GIF format, although in a few cases it will be in JPEG format. The filename in the <span class="_XAxc"><span>&lt;img&gt;</span></span> URL will tell you whether it is GIF or JPEG. The <span class="_XAxc"><span>&lt;img&gt;</span></span> tag also contains the following attributes:</span></div><ul class="_U6n5"><li class="_JUkb"><span><span class="_XAxc"><span>src</span></span> — The exact URL of the image being displayed, to be used for displaying the image.</span></li><li class="_JUkb"><span><span class="_XAxc"><span>alt</span></span> — Alternate text to display in case the image does not render correctly—usually the same as the <span class="_Ekfq"><span>&lt;plaintext&gt;</span></span> representation of the image.</span></li><li class="_JUkb"><span><span class="_XAxc"><span>title</span></span> — Descriptive title for internal identification of an image—usually the same as the <span class="_Ekfq"><span>&lt;plaintext&gt;</span></span> representation of the image.</span></li><li class="_JUkb"><span><span class="_XAxc"><span>width</span></span> — The width of the image in pixels; can be changed using the <span class="_XAxc"><a href="/api/documentation?scrollTo=controlling-width-of-results" class="_3BQD orange19RedHover _8T9T sc-34cb55e4-2 sc-34cb55e4-3 jojysd kPdgYi"><span class="sc-34cb55e4-0 hLNrE"><span>width control parameters</span></span></a></span>.</span></li><li class="_JUkb"><span><span class="_XAxc"><span>height</span></span>: — The height of the image in pixels; scales depending on width setting.</span></li></ul></div><div><h4 class="_qtS_"><span>&lt;imagemap&gt;</span></h4><div class="_Q0cu"><span>HTML image maps for visual elements that can be clicked to execute further queries. Contains <span class="_Ekfq"><span>&lt;rect&gt;</span></span> subelements that specify the corners of clickable areas with coordinates (using the top-left corner as the origin).</span></div><ul class="_U6n5"></ul></div><div><h4 class="_qtS_"><span>&lt;plaintext&gt;</span></h4><div class="_Q0cu"><span>Textual representation of a single subpod. Only appears if the requested result formats include plain text. <span class="_Ekfq"><span>&lt;plaintext&gt;</span></span> has no attributes or subelements.</span></div><ul class="_U6n5"></ul></div><div><h4 class="_qtS_"><span>&lt;mathml&gt;</span></h4><div class="_Q0cu"><span>Contains the MathML representation of a single subpod. MathML output opens with <span class="_Ekfq"><span>&lt;math&gt;</span></span> and includes formatting subelements such as <span class="_Ekfq"><span>&lt;mfrac&gt;</span></span> and <span class="_Ekfq"><span>&lt;msup&gt;</span></span>. This element type will only appear if the requested result formats include mathml.</span></div><ul class="_U6n5"></ul></div><div><h4 class="_qtS_"><span>&lt;sound&gt;</span></h4><div class="_Q0cu"><span>HTML <span class="_Ekfq"><span>&lt;sound&gt;</span></span> elements suitable for direct inclusion in a webpage. They point to stored sound files giving an audio representation of a single subpod. These elements only appear in pods if the requested result formats include sound or wav. The type attribute will tell whether the format is MIDI or WAV.</span></div><ul class="_U6n5"></ul></div><div><h4 class="_qtS_"><span>&lt;minput&gt;</span></h4><div class="_Q0cu"><span>Wolfram Language input that can be executed within a Wolfram Language environment to provide the result given in a single subpod.</span></div><ul class="_U6n5"></ul></div><div><h4 class="_qtS_"><span>&lt;moutput&gt;</span></h4><div class="_Q0cu"><span>Wolfram Language output representation of the result given in a single subpod.</span></div><ul class="_U6n5"></ul></div><div><h4 class="_qtS_"><span>&lt;cell&gt;</span></h4><div class="_Q0cu"><span>A Wolfram Language Cell expression that can be interpreted in a Wolfram Language environment to render exactly the same output as the Wolfram|Alpha website for a single subpod. The expression is wrapped in a <span class="_Ekfq"><span>&lt;![CDATA[...]]&gt;</span></span> element, and can sometimes span across multiple elements.</span></div><ul class="_U6n5"></ul></div><div><h4 class="_qtS_"><span>&lt;assumptions&gt;</span></h4><div class="_Q0cu"><span>The <span class="_Ekfq"><span>&lt;assumptions&gt;</span></span> element is a subelement of <span class="_Ekfq"><span>&lt;queryresult&gt;</span></span>. Its content is a series of <span class="_Ekfq"><span>&lt;assumption&gt;</span></span> elements. It has a count attribute, giving the number of <span class="_Ekfq"><span>&lt;assumption&gt;</span></span>&gt; subelements.</span></div><ul class="_U6n5"></ul></div><div><h4 class="_qtS_"><span>&lt;assumption&gt;</span></h4><div class="_Q0cu"><span>The <span class="_Ekfq"><span>&lt;assumption&gt;</span></span> element is a subelement of <span class="_Ekfq"><span>&lt;assumptions&gt;</span></span>. It defines a single assumption, typically about the meaning of a word or phrase, and a series of possible other values. It has the following attributes:</span></div><ul class="_U6n5"><li class="_JUkb"><span><span class="_XAxc"><span>type</span></span> — Classification of an assumption that defines how it will function.</span></li><li class="_JUkb"><span><span class="_XAxc"><span>word</span></span> — The central word/phrase to which the assumption is applied.</span></li><li class="_JUkb"><span><span class="_XAxc"><span>template</span></span> — A statement outlining the way an assumption will be applied.</span></li><li class="_JUkb"><span><span class="_XAxc"><span>count</span></span> — Number of possible values available from an assumption.</span></li></ul></div><div><h4 class="_qtS_"><span>&lt;states&gt;</span></h4><div class="_Q0cu"><span>The <span class="_Ekfq"><span>&lt;states&gt;</span></span> element is a subelement of <span class="_Ekfq"><span>&lt;pod&gt;</span></span> or <span class="_Ekfq"><span>&lt;subpod&gt;</span></span>. It has a count attribute and it contains a series of <span class="_Ekfq"><span>&lt;state&gt;</span></span> and/or <span class="_Ekfq"><span>&lt;statelist&gt;</span></span> elements. See the <span class="_XAxc"><a href="/api/documentation?scrollTo=pod-states" class="_3BQD orange19RedHover _8T9T sc-34cb55e4-2 sc-34cb55e4-3 jojysd kPdgYi"><span class="sc-34cb55e4-0 hLNrE"><span>&quot;Pod States&quot;</span></span></a></span> section of the main text for more details.</span></div><ul class="_U6n5"></ul></div><div><h4 class="_qtS_"><span>&lt;state&gt;</span></h4><div class="_Q0cu"><span>The <span class="_Ekfq"><span>&lt;state&gt;</span></span> element, always a subelement of <span class="_Ekfq"><span>&lt;states&gt;</span></span>, contains a particular pod state for a single pod or subpod. It has a name attribute that describes the pod state and an input attribute that can be used to modify subsequent queries.,</span></div><ul class="_U6n5"></ul></div><div><h4 class="_qtS_"><span>&lt;warnings&gt;</span></h4><div class="_Q0cu"><span>The &lt;warnings&gt; element occurs as a subelement of &lt;queryresult&gt;. It contains &lt;warning&gt; subelements, each of which describes a particular warning generated during the query.</span></div><ul class="_U6n5"></ul></div><div><h4 class="_qtS_"><span>&lt;spellcheck&gt;</span></h4><div class="_Q0cu"><span>The &lt;spellcheck&gt; element contains a warning about a word that was reinterpreted because Wolfram|Alpha concluded it was misspelled. It contains the following attributes:</span></div><ul class="_U6n5"><li class="_JUkb"><span><span class="_XAxc"><span>word</span></span> — The exact word taken from the original query.</span></li><li class="_JUkb"><span><span class="_XAxc"><span>suggestion</span></span> — Wolfram|Alpha&#x27;s suggested respelling of the word.</span></li><li class="_JUkb"><span><span class="_XAxc"><span>text</span></span> — The message normally displayed to the user when a word is reinterpreted because of a &lt;spellcheck&gt; warning.,</span></li></ul></div><div><h4 class="_qtS_"><span>&lt;delimiters&gt;</span></h4><div class="_Q0cu"><span>The <span class="_Ekfq"><span>&lt;delimiters&gt;</span></span> element contains a warning about mismatched parentheses or other bracketing elements that Wolfram|Alpha attempted to rectify. Currently, the only attribute is text, and its value is the message &quot;An attempt was made to fix mismatched parentheses, brackets or braces.&quot;</span></div><ul class="_U6n5"></ul></div><div><h4 class="_qtS_"><span>&lt;translation&gt;</span></h4><div class="_Q0cu"><span>The <span class="_Ekfq"><span>&lt;translation&gt;</span></span> element contains a warning about a phrase in a query that Wolfram|Alpha attempted to translate to English before computation. It has the following attributes:</span></div><ul class="_U6n5"><li class="_JUkb"><span><span class="_XAxc"><span>phrase</span></span> — The exact phrase taken from the original query.</span></li><li class="_JUkb"><span><span class="_XAxc"><span>trans</span></span> — Wolfram|Alpha&#x27;s suggested translation of the phrase.</span></li><li class="_JUkb"><span><span class="_XAxc"><span>lang</span></span> — The language from which Wolfram|Alpha attempted to translate.</span></li><li class="_JUkb"><span><span class="_XAxc"><span>text</span></span> — The message normally displayed on the Wolfram|Alpha website to inform the user of this warning (e.g. &quot;Translating from German to &#x27;weather today&#x27;&quot;).</span></li></ul></div><div><h4 class="_qtS_"><span>&lt;reinterpret&gt;</span></h4><div class="_Q0cu"><span>The <span class="_Ekfq"><span>&lt;reinterpret&gt;</span></span> element contains a warning about a query or part of a query that was reinterpreted by Wolfram|Alpha to provide more useful and/or relevant results. It has a text attribute displaying the message &quot;Using closest Wolfram|Alpha interpretation:&quot;, along with a list of <span class="_Ekfq"><span>&lt;alternative&gt;</span></span> elements showing other possible interpretations.</span></div><ul class="_U6n5"></ul></div><div><h4 class="_qtS_"><span>&lt;error&gt;</span></h4><div class="_Q0cu"><span>The <span class="_Ekfq"><span>&lt;error&gt;</span></span> element occurs as either a subelement of <span class="_Ekfq"><span>&lt;queryresult&gt;</span></span>, if there was a failure that prevented any result from being returned, or as a subelement of &lt;pod&gt;, if there was an error that only prevented the result from a given pod from being returned. &lt;error&gt; has the following attributes:</span></div><ul class="_U6n5"><li class="_JUkb"><span><span class="_XAxc"><span>code</span></span> — The error code, an integer.</span></li><li class="_JUkb"><span><span class="_XAxc"><span>msg</span></span> — A short message describing the error.</span></li></ul></div><div><h4 class="_qtS_"><span>&lt;sources&gt;</span></h4><div class="_Q0cu"><span>The <span class="_Ekfq"><span>&lt;sources&gt;</span></span> element is a subelement of <span class="_Ekfq"><span>&lt;queryresult&gt;</span></span>. The <span class="_Ekfq"><span>&lt;sources&gt;</span></span> element contains a series of <span class="_Ekfq"><span>&lt;source&gt;</span></span> subelements, each one defining a link to a webpage of source information. See <span class="_XAxc"><a href="/api/documentation?scrollTo=sources" class="_3BQD orange19RedHover _8T9T sc-34cb55e4-2 sc-34cb55e4-3 jojysd kPdgYi"><span class="sc-34cb55e4-0 hLNrE"><span>the &quot;Sources&quot; section</span></span></a></span> for more details.</span></div><ul class="_U6n5"></ul></div><div><h4 class="_qtS_"><span>&lt;infos&gt;</span></h4><div class="_Q0cu"><span>The <span class="_Ekfq"><span>&lt;infos&gt;</span></span> element contains <span class="_Ekfq"><span>&lt;info&gt;</span></span> elements that contain pieces of information about the contents of a pod.</span></div><ul class="_U6n5"></ul></div><div><h4 class="_qtS_"><span>&lt;languagemsg&gt;</span></h4><div class="_Q0cu"><span>The <span class="_Ekfq"><span>&lt;languagemsg&gt;</span></span> element appears if the input is recognized as a foreign language that is not supported. It includes messages in English and the unsupported language stating that the language is not yet supported.</span></div><ul class="_U6n5"></ul></div><div><h4 class="_qtS_"><span>&lt;generalization&gt;</span></h4><div class="_Q0cu"><span>The <span class="_Ekfq"><span>&lt;generalization&gt;</span></span> element appears when Wolfram|Alpha recognizes that more information is available on a broader query than the one specified.</span></div><ul class="_U6n5"></ul></div><div><h4 class="_qtS_"><span>&lt;tips&gt;</span></h4><div class="_Q0cu"><span>The <span class="_Ekfq"><span>&lt;tips&gt;</span></span> element contains various <span class="_Ekfq"><span>&lt;tip&gt;</span></span> subelements with text offering pointers for better queries.</span></div><ul class="_U6n5"></ul></div><div><h4 class="_qtS_"><span>&lt;didyoumeans&gt;</span></h4><div class="_Q0cu"><span>The <span class="_Ekfq"><span>&lt;didyoumeans&gt;</span></span> element contains various <span class="_Ekfq"><span>&lt;didyoumean&gt;</span></span> elements with text suggesting alternative queries with similar spelling. Because it is difficult to verify the relevance of these suggestions, we recommend against using them in your implementations.</span></div><ul class="_U6n5"></ul></div><div><h4 class="_qtS_"><span>&lt;futuretopic&gt;</span></h4><div class="_Q0cu"><span>The <span class="_Ekfq"><span>&lt;futuretopic&gt;</span></span> element appears when a query result refers to a topic still under development.</span></div><ul class="_U6n5"></ul></div><div><h4 class="_qtS_"><span>&lt;examplepage&gt;</span></h4><div class="_Q0cu"><span>The <span class="_Ekfq"><span>&lt;examplepage&gt;</span></span> element appears when a query is recognized as a category for which a set of example queries has already been prepared.</span></div><ul class="_U6n5"></ul></div></ul></section></div><div class="_iwaL"><div class="_48MV"><section id="explanation-of-pods"><h1 class="_JLFn"><span>Explanation of Pods</span></h1><div><h2 id="explanation-of-pods"><div class="_4aml"><span>By default, the Wolfram|Alpha website returns a large set of categorized information related to a given query. Each category of output is contained in a rectangular pod, which in turn includes subpods with individual pieces of data. Every pod has a title (displayed in the top-left corner) and at least one subpod. Most information is displayed as a GIF image by default. Here is the main Wolfram|Alpha output for the &quot;tides Seattle&quot; query:</span></div></h2></div><div><div><img src="/_next/static/images/02-explanation_of_pods_1EekwlNs.png" alt="WolframAlpha Developer Portal screenshot" class="_qxSu"/></div></div><div><h2 id="explanation-of-pods"><div class="_4aml"><span>When you make a call to the Full Results API, it will return pod and subpod information as an XML document. Using only the required parameters, all pods from a particular query are returned in their default format and state. Here is the Full Results API output for the same query (with some XML elements truncated for brevity and readability):</span></div></h2></div><div><h2 id="explanation-of-pods"><div class="_S_tS"><span>&lt;queryresult success=&quot;true&quot; error=&quot;false&quot; numpods=&quot;4&quot; datatypes=&quot;Tide&quot; timedout=&quot;&quot; timedoutpods=&quot;&quot; timing=&quot;2.041&quot; parsetiming=&quot;0.159&quot; parsetimedout=&quot;false&quot; recalculate=&quot;&quot; id=&quot;MSPa2841c605802big7c5h700001bi6h0g908bch9ei&quot; host=&quot;http://www1.wolframalpha.com&quot; server=&quot;13&quot; related=&quot;http://www1.wolframalpha.com/api/v2/relatedQueries.jsp?id=MSPa2851c605802big7c5h700003d89ihc926f55828&amp;s=13&quot; version=&quot;2.6&quot;&gt;
  &lt;pod title=&quot;Input interpretation&quot; scanner=&quot;Identity&quot; id=&quot;Input&quot; position=&quot;100&quot; error=&quot;false&quot; numsubpods=&quot;1&quot;&gt;...&lt;/pod&gt;
  &lt;pod title=&quot;Result&quot; scanner=&quot;Tide&quot; id=&quot;Result&quot; position=&quot;200&quot; error=&quot;false&quot; numsubpods=&quot;1&quot; primary=&quot;true&quot;&gt;
    &lt;subpod title=&quot;&quot;&gt;
      &lt;plaintext&gt;
        Tuesday, February 11, 2014 | | | |
        high tide | 4:06 am PST (4 h 10 min ago) | +11 feet | | | | | | 
        low tide | 9:32 am PST (1 h 16 min from now) | +6.7 feet | | | | | | 
        high tide | 2:10 pm PST (5 h 55 min from now) | +9.9 feet | | | | | | 
        low tide | 8:59 pm PST  | +0.5 feet | | | | | | 
        (computed using historical data, not taking into account weather, etc. heights relative to all-time average lowest daily tide)
      &lt;/plaintext&gt;
      &lt;img src=&quot;http://www1.wolframalpha.com/Calculate/MSP/MSP2871c605802big7c5h70000185h5d64e91gb027?MSPStoreType=image/gif&amp;s=13&quot; alt=&quot; ... &quot; title=&quot; ... &quot; width=&quot;400&quot; height=&quot;326&quot;/&gt;
    &lt;/subpod&gt;
    &lt;states count=&quot;5&quot;&gt;...&lt;/states&gt;
    &lt;infos count=&quot;1&quot;&gt;...&lt;/infos&gt;
  &lt;/pod&gt;
  &lt;pod title=&quot;Averages&quot; scanner=&quot;Tide&quot; id=&quot;Averages&quot; position=&quot;300&quot; error=&quot;false&quot; numsubpods=&quot;1&quot;&gt;...&lt;/pod&gt;
  &lt;pod title=&quot;Tide measurement station&quot; scanner=&quot;Tide&quot; id=&quot;TideMeasurementStation&quot; position=&quot;400&quot; error=&quot;false&quot; numsubpods=&quot;1&quot;&gt;...&lt;/pod&gt;
  &lt;assumptions count=&quot;1&quot;&gt;...&lt;/assumptions&gt;
&lt;/queryresult&gt;</span></div></h2></div><div><h2 id="pod-selection"><div class="_UX7b"><span>Pod Selection</span></div></h2></div><div><h2 id="pod-selection"><div class="_4aml"><span>It is often the case that applications using the Full Results API are not interested in the complete set of pods returned for a given query. For example, if you are writing an application that wants to acquire weather information from Wolfram|Alpha, and you are only interested in the pod that displays the table of current weather conditions, you need a way to ask the API to return only that pod. Because Wolfram|Alpha has much less work to do to generate only that one pod, this query will execute much more quickly than getting all the pods and picking out the one you want yourself.</span></div></h2></div><div><h2 id="pod-selection"><div class="_4aml"><span>The following sections describe various parameters that you can use to control the set of pods returned for a given query. These parameters can be used together in the same query, in which case a pod will be included in the result if it meets any (not necessarily all) of the included specifications.</span></div></h2></div><div><div><div class="_1EgR"><span>Selecting Pods by ID</span></div></div></div><div><h2 id="pod-selection"><div class="_4aml"><span>The most robust way to identify an individual pod is by its ID, which is given by its <span class="_v_lT"><span>id</span></span> attribute. Because the title parameter can vary in its wording (which may include time, location or other query-specific information), it is not effective at identifying pods by general content. Similarly, the index parameter may change from query to query or as the API is updated, reducing its usefulness in broader contexts. Using the pod ID ensures consistent output for a category of queries.</span></div></h2></div><div><h2 id="pod-selection"><div class="_4aml"><span>You can choose to include or exclude pods based on their IDs. The URL parameters for these actions are <span class="_v_lT"><span>includepodid</span></span> and <span class="_v_lT"><span>excludepodid</span></span>. Let&#x27;s say that you have a weather application, and you want to display the pod that gives current weather information for a given location. Here is what that pod looks like for the query &quot;weather Chicago&quot; (with some elements collapsed for brevity):</span></div></h2></div><div><h2 id="pod-selection"><div class="_S_tS"><span>&lt;pod title=&quot;Latest recorded weather for Chicago, Illinois&quot; scanner=&quot;Data&quot; <span class="_v_lT"><span>id=&quot;InstantaneousWeather:WeatherData&quot;</span></span> position=&quot;200&quot; error=&quot;false&quot; numsubpods=&quot;1&quot; primary=&quot;true&quot;&gt;
  &lt;subpod title=&quot;&quot;&gt;
    &lt;plaintext&gt;
      temperature | 73 \[Degree]F (wind chill: 73 \[Degree]F)
      conditions | partly cloudy 
      relative humidity | 29% (dew point: 39 \[Degree]F) 
      wind speed | 17 mph (51 minutes ago)
    &lt;/plaintext&gt;
    &lt;img ... /&gt;
  &lt;/subpod&gt;
  &lt;states count=&quot;2&quot;&gt;...&lt;/states&gt;
  &lt;infos count=&quot;1&quot;&gt;...&lt;/infos&gt;
&lt;/pod&gt;</span></div></h2></div><div><h2 id="pod-selection"><div class="_4aml"><span>The title includes the name of the city, but the ID is a logical description of the contents of the pod. If you wanted Wolfram|Alpha to return only this one pod, you would use the includepodid parameter like this:</span></div></h2></div><div><h2 id="pod-selection"><div class="_S_tS"><span>http://api.wolframalpha.com/v2/query?appid=DEMO&amp;input=weather+Chicago<span class="_v_lT"><span>&amp;includepodid=InstantaneousWeather:WeatherData</span></span></span></div></h2></div><div><h2 id="pod-selection"><div class="_4aml"><span>Similarly, if you wanted to include all the pods except for this one, you would use the excludepodid parameter. You can include or exclude multiple pods by specifying more than one instance of either parameter. However, you cannot mix includepodid and excludepodid in one query, as this is not a meaningful operation.</span></div></h2></div><div><div><div class="_1EgR"><span>Selecting Pods by Title</span></div></div></div><div><h2 id="pod-selection"><div class="_4aml"><span>You can also choose to identify pods by their titles. The title is the text that appears in the upper-left corner of each pod. Note that the trailing colon is not part of the title. The <span class="_v_lT"><span>podtitle</span></span> parameter allows you to specify one or more pod titles to include; any pods that do not have matching titles will be excluded. You can specify a specific title or match a class of titles by using &quot;*&quot; as a wildcard that matches zero or more characters. To specify more than one title, use multiple podtitle parameters. For example, this query requests two pods: the one titled &quot;Weather station information&quot;, and the one that begins with &quot;Latest recorded weather&quot; (using a wildcard to match the rest of the title because it ends with the requested location, which may change from query to query).</span></div></h2></div><div><h2 id="pod-selection"><div class="_S_tS"><span>http://api.wolframalpha.com/v2/query?appid=DEMO&amp;input=weather+Chicago<span class="_v_lT"><span>&amp;podtitle=Weather+station+information&amp;podtitle=Latest+recorded+weather*</span></span></span></div></h2></div><div><div><div class="_1EgR"><span>Selecting Pods by Index</span></div></div></div><div><h2 id="pod-selection"><div class="_4aml"><span>Another way to specify pods is by their indices (<span class="_v_lT"><span>podindex</span></span>). The index is an incremental count representing the order in which pods were computed by Wolfram|Alpha, starting at 1. It corresponds to the top-to-bottom ordering of pods on the website and in the XML returned by the API. You can specify a single pod or several pods. For example, podindex=2 requests only the second pod, and podindex=1,2,4 requests those three specific pods.</span></div></h2></div><div><h2 id="pod-selection"><div class="_4aml"><span>Pod indices are not a very stable way to identify specific pods, as ordering of pods in Wolfram|Alpha can change over time as new pod types are created or existing ones are promoted or demoted in importance. The first pod gives the input interpretation, but after that the output is likely to change over time. Additionally, pod indices are not explicitly stated in the XML output, making it difficult to track what pods should be returned for a given query. Using pod indices is good when you just want to say something like, &quot;Give me whatever Wolfram|Alpha thinks are the five most important pods.&quot;</span></div></h2></div><div><h2 id="pod-selection"><div class="_4aml"><span>If you are using the <a href="/api/documentation?scrollTo=podtimeout-formattimeout" class="_3BQD orange19RedHover _xzt6 _hCSh sc-34cb55e4-2 sc-34cb55e4-3 jojysd kPdgYi"><span class="sc-34cb55e4-0 hLNrE"><span>podtimeout parameter</span></span></a>, it is important to note that the index numbers are decided at the close of the &quot;scan&quot; stage. The culling of pods based on index is done before the later format stage, so pods that are dropped because they time out in formatting have no bearing on the index numbers.</span></div></h2></div><div><div><div class="_1EgR"><span>Selecting Pods by Scanner</span></div></div></div><div><h2 id="pod-selection"><div class="_4aml"><span>Each pod is produced by a software component called a scanner. There are many scanners in Wolfram|Alpha, each one corresponding roughly to a subject area or data type. The <span class="_HR3c"><span>&lt;pod&gt;</span></span> element has a <span class="_v_lT"><span>scanner</span></span> attribute that shows the name of the scanner that produced it, and this name is a guide to the type of content that the pod contains. You can use the scanner parameter to include only pods generated by one or more specific scanners. To specify more than one scanner, you can either use commas to separate names, such as <span class="_HR3c"><span>scanner=Numeric,MathematicalFunctionData</span></span>, or multiple scanner specifications, like <span class="_HR3c"><span>scanner=Numeric&amp;scanner=MathematicalFunctionData</span></span>.</span></div></h2></div></section></div></div><div class="_iwaL"><div class="_48MV"><section id="formatting-output"><h1 class="_JLFn"><span>Formatting Output</span></h1><div><h2><div class="_UX7b"><span>The Output Parameter</span></div></h2></div><div><h2 id="output-parameter"><div class="_4aml"><span>By default, the Full Results API returns an XML document with individual elements representing the different parts of a Wolfram|Alpha result. Using the output parameter, you can tell the API to return a JSON result instead:</span></div></h2></div><div><h2 id="output-parameter"><div class="_S_tS"><span>http://api.wolframalpha.com/v2/query?appid=DEMO&amp;input=tides%20seattle<span class="_v_lT"><span>&amp;output=json</span></span></span></div></h2></div><div><h2 id="output-parameter"><div class="_4aml"><span>Here is the &quot;Result&quot; pod from this query:</span></div></h2></div><div><h2 id="output-parameter"><div class="_S_tS"><span>{
    &quot;title&quot; : &quot;Result&quot;, 
    &quot;scanner&quot; : &quot;Tide&quot;, 
    &quot;id&quot; : &quot;Result&quot;, 
    &quot;position&quot; : 200, 
    &quot;error&quot; : false, 
    &quot;numsubpods&quot; : 1, 
    &quot;primary&quot; : true, 
    &quot;subpods&quot; : [
        { ... } 
    ] 
 }</span></div></h2></div><div><h2 id="output-parameter"><div class="_4aml"><span>Note that this parameter only changes the web format of the result; all pods have the same output elements and values regardless of which setting you use.</span></div></h2></div><div><h2><div class="_UX7b"><span>The Format Parameter</span></div></h2></div><div><h2 id="format-parameter"><div class="_4aml"><span>To change the output format of a pod or pods, use the <span class="_v_lT"><span>format</span></span> parameter in your URL. Not all results are available in all the formats listed below; the parameter will apply itself to any pods that allow the specified format. Multiple format options can be used in the same URL, separated by commas, and each applicable option will display in the result.</span></div></h2></div><div><div><div class="_1EgR"><span>image</span></div></div></div><div><h2 id="format-parameter"><div class="_4aml"><span>The <span class="_v_lT"><span>image</span></span> format option gives you the same types of GIF images as seen on the Wolfram|Alpha site. Each subpod is returned as an HTML &lt;img&gt; tag ready for direct inclusion in a webpage:</span></div></h2></div><div><h2 id="format-parameter"><div class="_S_tS"><span>http://api.wolframalpha.com/v2/query?appid=DEMO&amp;input=tides%20seattle&amp;<span class="_v_lT"><span>&amp;format=image</span></span></span></div></h2></div><div><h2 id="format-parameter"><div class="_4aml"><span>In some cases, JPEG images are returned instead of GIF. The filename in the <span class="_HR3c"><span>&lt;img&gt;</span></span> URL will tell you whether it is GIF or JPEG. The image below shows the &quot;Result&quot; pod that is returned from the &quot;tides Seattle&quot; query, with the image URL highlighted:</span></div></h2></div><div><h2 id="format-parameter"><div class="_S_tS"><span>&lt;pod title=&quot;Result&quot; scanner=&quot;Tide&quot; id=&quot;Result&quot; position=&quot;200&quot; error=&quot;false&quot; numsubpods=&quot;1&quot; primary=&quot;true&quot;&gt;
  &lt;subpod title=&quot;&quot;&gt;
    &lt;img src=<span class="_v_lT"><span>&quot;http://www1.wolframalpha.com/Calculate/MSP/MSP2251baf4ff97adai0b200001b128d6ace53249f?MSPStoreType=image/gif&amp;s=14&quot;</span></span> 
         alt=&quot; Tuesday, November 3, 2015 | | | | low tide ... lowest daily tide)&quot; 
         width=&quot;400&quot; height=&quot;366&quot;/&gt;
  &lt;/subpod&gt;
  &lt;states count=&quot;5&quot;&gt;...&lt;/states&gt;
  &lt;infos count=&quot;1&quot;&gt;...&lt;/infos&gt;
&lt;/pod&gt;</span></div></h2></div><div><h2 id="format-parameter"><div class="_4aml"><span>Loading this URL (or embedding the <span class="_HR3c"><span>&lt;img&gt;</span></span> tag in an HTML document) gives you back the exact image that would normally be displayed inside that pod:</span></div></h2></div><div><div><img src="/_next/static/images/03-results_pod_1Oav4Tq3.png" alt="WolframAlpha Results diagram" class="_qxSu"/></div></div><div><h2 id="format-parameter"><div class="_4aml"><span>The HTML alt text for the image is usually the same text returned by using the plaintext format option.</span></div></h2></div><div><div><div class="_1EgR"><span>imagemap</span></div></div></div><div><h2 id="format-parameter"><div class="_4aml"><span>Many pods on the Wolfram|Alpha website have HTML image maps associated with them so that you can click parts of the pod image to execute queries. Most table-style pods have this property, so that each element in the table or list can be clicked to trigger a query based on the content of that item. This is useful for dynamic visual elements with different parts that can be clicked to trigger another query. The API provides information that you can use to replicate this &quot;image map&quot; functionality in your own programs.</span></div></h2></div><div><h2 id="format-parameter"><div class="_4aml"><span>We will use the &quot;France&quot; query as an example. To get image map data in the result, you need to include imagemap as a format type (in addition to image):</span></div></h2></div><div><h2 id="format-parameter"><div class="_S_tS"><span>http://api.wolframalpha.com/v2/query?appid=DEMO&amp;input=france<span class="_v_lT"><span>&amp;format=image,imagemap</span></span></span></div></h2></div><div><h2 id="format-parameter"><div class="_4aml"><span>For reference, here is the &quot;Name&quot; pod on the website, with the links highlighted as they are when the mouse is hovering over the pod:</span></div></h2></div><div><div><img src="/_next/static/images/04-name_pod_UMP_yIc3.png" alt="image of high and low tides" class="_qxSu"/></div></div><div><h2 id="format-parameter"><div class="_4aml"><span>This is what the &quot;Name&quot; pod looks like in the API result from the above query:</span></div></h2></div><div><h2 id="format-parameter"><div class="_S_tS"><span>&lt;pod title=&#x27;Name&#x27;
      scanner=&#x27;Data&#x27; id=&#x27;Identifiers:CountryData&#x27; position=&#x27;200&#x27;
      error=&#x27;false&#x27; numsubpods=&#x27;1&#x27;&gt;
   &lt;subpod title=&#x27;&#x27;&gt;
     &lt;img src=&#x27;http://www1.wolframalpha.com/Calculate/MSP/MSP93ff?MSStoreType=image/gif&#x27;
       alt=&#x27;full name | French Republic
            full native name | République française
            internet code | .fr&#x27;
            title=&#x27;full name | French Republic
            full native name | République française
            internet code | .fr&#x27;
       width=&#x27;294&#x27; height=&#x27;106&#x27; /&gt;<span class="_v_lT"><span>
      &lt;imagemap&gt;
       &lt;rect left=&#x27;12&#x27; top=&#x27;8&#x27; right=&#x27;39&#x27; bottom=&#x27;28&#x27;
         query=&#x27;France+full+name&#x27;
         assumptions=&#x27;ClashPrefs_*Country.France.CountryProperty.FullName-&#x27;
         title=&#x27;France full name&#x27; /&gt;
       &lt;rect left=&#x27;39&#x27; top=&#x27;8&#x27; right=&#x27;76&#x27; bottom=&#x27;28&#x27;
         query=&#x27;France+full+name&#x27;
         assumptions=&#x27;ClashPrefs_*Country.France.CountryProperty.FullName-&#x27;
         title=&#x27;France full name&#x27; /&gt;
       &lt;rect left=&#x27;12&#x27; top=&#x27;42&#x27; right=&#x27;39&#x27; bottom=&#x27;62&#x27;
         query=&#x27;France+full+native+name&#x27;
         assumptions=&#x27;ClashPrefs_*Country.France.CountryProperty.FullNativeNames-&#x27;
         title=&#x27;France full native name&#x27; /&gt;
       &lt;rect left=&#x27;39&#x27; top=&#x27;42&#x27; right=&#x27;83&#x27; bottom=&#x27;62&#x27;
         query=&#x27;France+full+native+name&#x27;
         assumptions=&#x27;ClashPrefs_*Country.France.CountryProperty.FullNativeNames-&#x27;
         title=&#x27;France full native name&#x27; /&gt;
       &lt;rect left=&#x27;83&#x27; top=&#x27;42&#x27; right=&#x27;120&#x27; bottom=&#x27;62&#x27;
         query=&#x27;France+full+native+name&#x27;
         assumptions=&#x27;ClashPrefs_*Country.France.CountryProperty.FullNativeNames-&#x27;
         title=&#x27;France full native name&#x27; /&gt;
       &lt;rect left=&#x27;12&#x27; top=&#x27;76&#x27; right=&#x27;68&#x27; bottom=&#x27;96&#x27;
         query=&#x27;France+internet+code&#x27;
         assumptions=&#x27;ClashPrefs_*Country.France.CountryProperty.InternetCode-&#x27;
         title=&#x27;France internet code&#x27; /&gt;
       &lt;rect left=&#x27;68&#x27; top=&#x27;76&#x27; right=&#x27;98&#x27; bottom=&#x27;96&#x27;
         query=&#x27;France+internet+code&#x27;
         assumptions=&#x27;ClashPrefs_*Country.France.CountryProperty.InternetCode-&#x27;
         title=&#x27;France internet code&#x27; /&gt;
     &lt;/imagemap&gt;
   </span></span>&lt;/subpod&gt;
   &lt;states count=&#x27;1&#x27;&gt;
     &lt;state name=&#x27;More&#x27;
         input=&#x27;Identifiers:CountryData__More&#x27; /&gt;
   &lt;/states&gt;
 &lt;/pod&gt;</span></div></h2></div><div><h2 id="format-parameter"><div class="_4aml"><span>The <span class="_HR3c"><span>&lt;imagemap&gt;</span></span> element contains information that you can use to identify clickable areas within the pod and the queries that should be issued if those areas are clicked. Each <span class="_HR3c"><span>&lt;rect&gt;</span></span> subelement identifies a separate region. Notice that in this case, seven <span class="_HR3c"><span>&lt;rect&gt;</span></span> elements appear within the <span class="_HR3c"><span>&lt;imagemap&gt;</span></span> tag—each word in the boxes is considered a separate region. The coordinates are based on (0, 0) being the top-left corner of the pod. The query attribute gives the query input, and it is already URL encoded for direct use in a subsequent query URL. The title attribute is a text string that shows the query in a readable form, which you might want to display as a tooltip when the mouse hovers over the region.</span></div></h2></div><div><h2 id="format-parameter"><div class="_4aml"><span>The <span class="_HR3c"><span>assumptions</span></span> attribute gives a value you would include in the query to ensure that it is interpreted as desired. For example, to simulate a user click in the region identified by the first <span class="_HR3c"><span>&lt;rect&gt;</span></span> element in the above pod, you might execute the following query:</span></div></h2></div><div><h2 id="format-parameter"><div class="_S_tS"><span>http://api.wolframalpha.com/v2/query?appid=DEMO&amp;input=France+full+name<span class="_v_lT"><span>&amp;assumption=ClashPrefs_*Country.France.CountryProperty.FullName-</span></span></span></div></h2></div><div><h2 id="format-parameter"><div class="_4aml"><span>See <a href="/api/documentation?scrollTo=using-assumptions" class="_3BQD orange19RedHover _xzt6 _hCSh sc-34cb55e4-2 sc-34cb55e4-3 jojysd kPdgYi"><span class="sc-34cb55e4-0 hLNrE"><span>the Assumptions section</span></span></a> for more information about using assumptions to customize output.</span></div></h2></div><div><div><div class="_1EgR"><span>plaintext</span></div></div></div><div><h2 id="format-parameter"><div class="_4aml"><span>The <span class="_v_lT"><span>plaintext</span></span> format option produces the text format that you see when you highlight a pod and click the &quot;Plaintext&quot; button on the Wolfram|Alpha site. The result is contained in the <span class="_HR3c"><span>&lt;plaintext&gt;</span></span> tag and can be extracted as-is.</span></div></h2></div><div><h2 id="format-parameter"><div class="_S_tS"><span>&lt;pod title=&quot;Result&quot; scanner=&quot;Tide&quot; id=&quot;Result&quot; position=&quot;200&quot; error=&quot;false&quot; numsubpods=&quot;1&quot; primary=&quot;true&quot;&gt;
  &lt;subpod title=&quot;&quot;&gt;
    &lt;plaintext&gt;
      <span class="_v_lT"><span>Tuesday, November 3, 2015 | | | | 
      low tide | 3:27 am PST (9 h 58 min ago) | +1.1 feet | | | | | | 
      high tide | 11:02 am PST (2 h 23 min ago) | +11.2 feet | | | | | | 
      low tide | 5:42 pm PST (4 h 17 min
      from now) | +5.3 feet | | | | | | 
      high tide | 10:20 pm PST (8 h 54 min from now) | +7.9 feet | | | | | | 
      (computed using historical data, not taking into account weather, etc. heights relative to all-time average lowest daily tide)
    </span></span>&lt;/plaintext&gt;
  &lt;/subpod&gt;
  &lt;states count=&quot;5&quot;&gt;...&lt;/states&gt;
  &lt;infos count=&quot;1&quot;&gt;...&lt;/infos&gt;
&lt;/pod&gt;</span></div></h2></div><div><h2 id="format-parameter"><div class="_4aml"><span>You may find it difficult to write general-purpose code to analyze text in this format, so use it only if you want simple text to display to your users, or if you know the structure of the text in advance (e.g., it will be a number, a latitude-longitude pair, a table, etc.).</span></div></h2></div><div><div><div class="_1EgR"><span>MathML</span></div></div></div><div><h2 id="format-parameter"><div class="_4aml"><span>Some Wolfram|Alpha results are mathematical expressions or formulas that require traditional math notation to be readable (e.g. superscripts, fractions, integral signs). Presentation <a href="https://www.w3.org/Math/" class="_3BQD _dGJe _ZJzB sc-34cb55e4-2 sc-34cb55e4-3 cwjaCb kPdgYi _h_2l"><span class="sc-34cb55e4-0 hLNrE"><span>MathML</span></span></a> is a W3C standard XML format for mathematics. Many browsers can render MathML (either natively or through a plugin), and it is widely used in scientific software and popular equation editors.</span></div></h2></div><div><h2 id="format-parameter"><div class="_4aml"><span>MathML output is provided when you request the <span class="_v_lT"><span>mathml</span></span> format type. The following is the &quot;Statement&quot; pod from the query &quot;pythagorean theorem&quot;, using the mathml option:</span></div></h2></div><div><h2 id="format-parameter"><div class="_S_tS"><span>&lt;pod title=&quot;Statement&quot; scanner=&quot;Data&quot; id=&quot;StatementPod:FamousMathProblem&quot; position=&quot;200&quot; error=&quot;false&quot; numsubpods=&quot;1&quot;&gt;
  &lt;subpod title=&quot;&quot;&gt;
    &lt;mathml&gt;
      <span class="_v_lT"><span>&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot; xmlns:mathematica=&quot;http://www.wolfram.com/XML/&quot; mathematica:form=&quot;StandardForm&quot;&gt;
        &lt;mrow&gt;
          &lt;mtext&gt;For a right triangle with legs&lt;/mtext&gt;
          &lt;mrow&gt;
            &lt;mi&gt;a&lt;/mi&gt;
          &lt;/mrow&gt;
          &lt;mtext&gt;and&lt;/mtext&gt;
          &lt;mrow&gt;
            &lt;mi&gt;b&lt;/mi&gt;
          &lt;/mrow&gt;
          &lt;mtext&gt;and hypotenuse&lt;/mtext&gt;
          &lt;mrow&gt;
            &lt;mrow&gt;
              &lt;mi&gt;c&lt;/mi&gt;
            &lt;/mrow&gt;
            &lt;mtext&gt;,&lt;/mtext&gt;
          &lt;/mrow&gt;
          &lt;mrow&gt;
            &lt;mrow&gt;
              &lt;mrow&gt;
                &lt;mrow&gt;
                  &lt;msup&gt;
                    &lt;mi&gt;a&lt;/mi&gt;
                    &lt;mn&gt;2&lt;/mn&gt;
                  &lt;/msup&gt;
                  &lt;mo&gt;+&lt;/mo&gt;
                  &lt;msup&gt;
                    &lt;mi&gt;b&lt;/mi&gt;
                    &lt;mn&gt;2&lt;/mn&gt;
                  &lt;/msup&gt;
                &lt;/mrow&gt;
                &lt;mo&gt;=&lt;/mo&gt;
                &lt;msup&gt;
                  &lt;mi&gt;c&lt;/mi&gt;
                  &lt;mn&gt;2&lt;/mn&gt;
                &lt;/msup&gt;
              &lt;/mrow&gt;
            &lt;/mrow&gt;
            &lt;mo&gt;.&lt;/mo&gt;
          &lt;/mrow&gt;
        &lt;/mrow&gt;
      &lt;/math&gt;
    </span></span>&lt;/mathml&gt;
  &lt;/subpod&gt;
&lt;/pod&gt;</span></div></h2></div><div><h2 id="format-parameter"><div class="_4aml"><span>When the MathML output (enclosed in the <span class="_v_lT"><span>&lt;math&gt;</span></span> tag) is parsed in a web document, it displays clean, formatted mathematical text:</span></div></h2></div><div><h2 id="format-parameter"><div class="_S_tS"><span>For a right triangle with legs <span class="_8rLA"><span>a</span></span> and <span class="_8rLA"><span>b</span></span> and hypotenuse <span class="_8rLA"><span>c</span></span>, <span class="_8rLA"><span>a</span></span><sup class="_F3L_ _8rLA"><span>2</span></sup>+<span class="_8rLA"><span>b</span></span><sup class="_F3L_ _8rLA"><span>2</span></sup>=(<span class="_8rLA"><span>c</span></span><sup class="_F3L_ _8rLA"><span>2</span></sup>).</span></div></h2></div><div><div><div class="_1EgR"><span>Sound</span></div></div></div><div><h2 id="format-parameter"><div class="_4aml"><span>Some pods have sounds associated with them. Using the <span class="_v_lT"><span>sound</span></span> format type will return audio data as either &quot;audio/midi&quot; (MIDI format) or &quot;audio/x-wav&quot; (WAV format), depending on the nature of the result.</span></div></h2></div><div><h2 id="format-parameter"><div class="_S_tS"><span>http://api.wolframalpha.com/v2/query?appid=DEMO&amp;input=C+major&amp;podtitle=Music+notation<span class="_v_lT"><span>&amp;format=sound</span></span></span></div></h2></div><div><h2 id="format-parameter"><div class="_S_tS"><span>&lt;pod title=&quot;Music notation&quot; scanner=&quot;Music&quot; id=&quot;MusicNotation&quot; position=&quot;300&quot; error=&quot;false&quot; numsubpods=&quot;0&quot;&gt;
  &lt;sounds count=&quot;1&quot;&gt;
    &lt;sound url=&quot;<span class="_v_lT"><span>http://www1.wolframalpha.com/Calculate/MSP/MSP3831c605804acbi0aeb000016c4402g20b8c038?MSPStoreType=audio/midi&amp;s=13</span></span>&quot; type=&quot;audio/midi&quot;/&gt;
  &lt;/sounds&gt;
&lt;/pod&gt;</span></div></h2></div><div><h2 id="format-parameter"><div class="_4aml"><span>The MIME type is specified within the <span class="_HR3c"><span>&lt;sound&gt;</span></span> tag; in this case, the output is a MIDI object. As with the image format type, the highlighted link leads directly to an audio file that can be embedded into an HTML page using the <span class="_HR3c"><span>&lt;sound&gt;</span></span> tag. Note that the sound format will only provide output for queries that generate a sound as part of their natural output—it will not convert text or other visual formats to audio.</span></div></h2></div><div><div><div class="_1EgR"><span>wav</span></div></div></div><div><h2 id="format-parameter"><div class="_4aml"><span>For programs that can only handle WAV sounds, the <span class="_v_lT"><span>wav</span></span> format type returns audio data as an uncompressed audio file. Here is the result of using the wav option on the same query as above:</span></div></h2></div><div><h2 id="format-parameter"><div class="_S_tS"><span>&lt;pod title=&quot;Music notation&quot; scanner=&quot;Music&quot; id=&quot;MusicNotation&quot; position=&quot;300&quot; error=&quot;false&quot; numsubpods=&quot;0&quot;&gt;
  &lt;sounds count=&quot;1&quot;&gt;
    &lt;sound url=&quot;<span class="_v_lT"><span>http://www1.wolframalpha.com/Calculate/MSP/MSP731g35g30d3e5h09e600005bhcec0af7cf0g5e?MSPStoreType=audio/x-wav&amp;s=12</span></span>&quot; type=&quot;audio/x-wav&quot;/&gt;
  &lt;/sounds&gt;
&lt;/pod&gt;</span></div></h2></div><div><h2 id="format-parameter"><div class="_4aml"><span>The pod is nearly identical, except that the audio type has changed to &quot;audio/x-wav&quot;. This format type is a more robust way to retrieve sounds, since the WAV format is understood by most platforms. As with the sound format, this will not convert text or other visual formats to audio.</span></div></h2></div><div><div><div class="_1EgR"><span>Wolfram Language Input</span></div></div></div><div><h2 id="format-parameter"><div class="_4aml"><span>This is the text format that you see in the &quot;Wolfram Language plaintext input&quot; popup that appears when you click some results on the Wolfram|Alpha site. Some results can be generated directly by single Wolfram Language input expressions. For example, the &quot;Continued fraction&quot; pod in the Wolfram|Alpha result for the query &quot;pi&quot; has a Wolfram Language input representation of <a href="https://reference.wolfram.com/language/ref/ContinuedFraction.html" class="_3BQD _dGJe _ZJzB sc-34cb55e4-2 sc-34cb55e4-3 cwjaCb kPdgYi _h_2l"><span class="sc-34cb55e4-0 hLNrE"><span>ContinuedFraction</span></span></a>[<a href="https://reference.wolfram.com/language/ref/Pi.html" class="_3BQD _dGJe _ZJzB sc-34cb55e4-2 sc-34cb55e4-3 cwjaCb kPdgYi _h_2l"><span class="sc-34cb55e4-0 hLNrE"><span>Pi</span></span></a>, 27]. Use the <span class="_v_lT"><span>minput</span></span> option to get this type of result. This can be useful if you want to feed the input into Wolfram Language code for manipulating results:</span></div></h2></div><div><h2 id="format-parameter"><div class="_S_tS"><span>&lt;pod title=&quot;Continued fraction&quot; scanner=&quot;ContinuedFraction&quot; id=&quot;ContinuedFraction&quot; position=&quot;500&quot; error=&quot;false&quot; numsubpods=&quot;1&quot;&gt;
  &lt;subpod title=&quot;&quot;&gt;
    &lt;minput&gt;<span class="_v_lT"><span>ContinuedFraction[Pi, 27]</span></span>&lt;/minput&gt;
  &lt;/subpod&gt;
  &lt;states count=&quot;2&quot;&gt;...&lt;/states&gt;
&lt;/pod&gt;</span></div></h2></div><div><div><div class="_1EgR"><span>Wolfram Language Output</span></div></div></div><div><h2 id="format-parameter"><div class="_4aml"><span>Using the <span class="_v_lT"><span>moutput</span></span> option returns the text format that you see in the &quot;Wolfram Language plaintext output&quot; popup that appears when you click some results on the Wolfram|Alpha site. This format is not available for all results, and it will sometimes be large (e.g. for mathematical plots), or not very useful (e.g. when the original source data is only available to the Wolfram Language as a raster image, such as a country&#x27;s flag). The first formula in the &quot;Continued fraction&quot; pod in the Wolfram|Alpha output for the query &quot;pi&quot; has a Wolfram Language output representation of {3, 7, 15, 1, 292, 1, 1, 1, 2, 1, 3, 1, 14, 2, 1, 1, 2, 2, 2, 2, 1, 84, 2, 1, 1, 15, 3}. This can be useful if you want to feed the output into a Wolfram Language environment:</span></div></h2></div><div><h2 id="format-parameter"><div class="_S_tS"><span>&lt;pod title=&quot;Continued fraction&quot; scanner=&quot;ContinuedFraction&quot; id=&quot;ContinuedFraction&quot; position=&quot;100&quot; error=&quot;false&quot; numsubpods=&quot;1&quot;&gt;
  &lt;subpod title=&quot;&quot;&gt;
    &lt;moutput&gt;
      <span class="_v_lT"><span>{3, 7, 15, 1, 292, 1, 1, 1, 2, 1, 3, 1, 14, 2, 1, 1, 2, 2, 2, 2, 1, 84, 2, 1, 1, 15, 3}</span></span>
    &lt;/moutput&gt;
  &lt;/subpod&gt;
  &lt;states count=&quot;2&quot;&gt;...&lt;/states&gt;
&lt;/pod&gt;</span></div></h2></div><div><h2 id="format-parameter"><div class="_4aml"><span>Note that the results from the minput type will evaluate directly to the results from the moutput type when entered in a Wolfram Language environment.</span></div></h2></div><div><h2 id="format-parameter"><div class="_4aml _FEu4"><span>In[1]:= <span class="_v_lT"><span>ContinuedFraction[Pi, 27]</span></span></span></div></h2></div><div><h2 id="format-parameter"><div class="_4aml _FEu4"><span>Out[1]= {3, 7, 15, 1, 292, 1, 1, 1, 2, 1, 3, 1, 14, 2, 1, 1, 2, 2, 2, 2, 1, 84, 2, 1, 1, 15, 3}</span></div></h2></div><div><div><div class="_1EgR"><span>Wolfram Language Cell Expression</span></div></div></div><div><h2 id="format-parameter"><div class="_4aml"><span>The cell format type returns Wolfram Language Cell expressions. These are the same cells rendered by Wolfram|Alpha to produce the pod images you see on the website. Here is the <span class="_v_lT"><span>cell</span></span> output of the same pod from the &quot;pi&quot; query, with the Wolfram Language Cell expression highlighted:</span></div></h2></div><div><h2 id="format-parameter"><div class="_S_tS"><span>&lt;pod title=&quot;Continued fraction&quot; scanner=&quot;ContinuedFraction&quot; id=&quot;ContinuedFraction&quot; position=&quot;500&quot; error=&quot;false&quot; numsubpods=&quot;1&quot;&gt;
  &lt;subpod title=&quot;&quot;&gt;
    &lt;cell compressed=&quot;false&quot;&gt;
      &lt;![CDATA[
        <span class="_v_lT"><span>Cell[BoxData[FormBox[TagBox[GridBox[List[List[TemplateBox[List[&quot;\&quot;[\&quot;&quot;, &quot;\&quot;
        3; 7, 15, 1, 292, 1, 1, 1, 2, 1, 3, 1, 14, 2, 1, 1, 2, 2, 2, 2, 1, 84, 2, 1, 1, 15,\&quot;&quot;, &quot;\&quot; \[Ellipsis]]\&quot;&quot;], 
        &quot;RowDefault&quot;]]], Rule[GridBoxAlignment, List[Rule[&quot;Columns&quot;, List[List[Left]]]]], 
        Rule[DefaultBaseStyle, &quot;Column&quot;], Rule[GridBoxItemSize, List[Rule[&quot;Columns&quot;, List[List[Scaled[1.003`]]]]]]], &quot;Column&quot;], 
        TraditionalForm]], &quot;Output&quot;, List[], Rule[PageWidth, 500], Rule[Magnification, 1], Rule[CellMargins, List[List[0, 0], List[0, 0]]], 
        Rule[ShowCellBracket, False], Rule[FontFamily, &quot;Bitstream Charter&quot;], Rule[FontSize, 14], Rule[NumberSeparator, &quot;\[ThinSpace]&quot;]]</span></span>
      ]]&gt;
    &lt;/cell&gt;
  &lt;/subpod&gt;
&lt;states count=&quot;2&quot;&gt;...&lt;/states&gt;
&lt;/pod&gt;</span></div></h2></div><div><h2 id="format-parameter"><div class="_4aml"><span>Although it can be cumbersome to look at, this cell statement is interpreted by the Wolfram Language to provide a parsed version of the pod content. In this particular case, the cell returned (when processed as a Wolfram Language statement) is essentially the plaintext result with added formatting:</span></div></h2></div><div><h2 id="format-parameter"><div class="_4aml _FEu4"><span>[3; 7, 15, 1, 292, 1, 1, 1, 2, 1, 3, 1, 14, 2, 1, 1, 2, 2, 2, 2, 1, 84, 2, 1, 1, 15, 3, 13, ...]</span></div></h2></div><div><h2 id="format-parameter"><div class="_4aml"><span>The Wolfram Language has rich, direct integration with Wolfram|Alpha, using the API internally to process these cell expressions. If for any reason you want to obtain them outside of the Wolfram Language, you can request the cell format type.</span></div></h2></div><div><h2><div class="_UX7b"><span>Controlling the Width of Results</span></div></h2></div><div><h2 id="controlling-width-of-results"><div class="_4aml"><span>Wolfram|Alpha formats pod images to a default maximum width of 500 pixels. If you want to change this width, such as for a small mobile device screen, the API provides four parameters you can use. The <a href="/api/documentation?scrollTo=width-width" class="_3BQD orange19RedHover _xzt6 _hCSh sc-34cb55e4-2 sc-34cb55e4-3 jojysd kPdgYi"><span class="sc-34cb55e4-0 hLNrE"><span>width</span></span></a> and <a href="/api/documentation?scrollTo=width-maxwidth" class="_3BQD orange19RedHover _xzt6 _hCSh sc-34cb55e4-2 sc-34cb55e4-3 jojysd kPdgYi"><span class="sc-34cb55e4-0 hLNrE"><span>maxwidth</span></span></a> parameters apply to images of text and tables, which are the majority of Wolfram|Alpha output, whereas <a href="/api/documentation?scrollTo=width-plotwidth" class="_3BQD orange19RedHover _xzt6 _hCSh sc-34cb55e4-2 sc-34cb55e4-3 jojysd kPdgYi"><span class="sc-34cb55e4-0 hLNrE"><span>plotwidth</span></span></a> only applies to plots and other graphics. You can use the <a href="/api/documentation?scrollTo=width-mag" class="_3BQD orange19RedHover _xzt6 _hCSh sc-34cb55e4-2 sc-34cb55e4-3 jojysd kPdgYi"><span class="sc-34cb55e4-0 hLNrE"><span>mag</span></span></a> parameter to change the size of a pod&#x27;s content without changing the size of the pod. It&#x27;s important to note that these values are approximate, and the result of using these parameters may vary for different query types.</span></div></h2></div><div><div><div class="_1EgR"><span>Width</span></div></div></div><div><h2 id="controlling-width-of-results"><div class="_4aml"><span>The <span class="_v_lT"><span>width</span></span> parameter specifies a &quot;hard limit&quot; on the width of text and table elements. An easy way to see the effect of the width parameter is to look at the &quot;Decimal approximation&quot; pod from the &quot;pi&quot; query. Here is that pod when the width parameter is not specified:</span></div></h2></div><div><h2 id="controlling-width-of-results"><div class="_S_tS"><span>&lt;pod title=&quot;Decimal approximation&quot; scanner=&quot;Numeric&quot; id=&quot;DecimalApproximation&quot; position=&quot;100&quot; error=&quot;false&quot; numsubpods=&quot;1&quot; primary=&quot;true&quot;&gt;
  &lt;subpod title=&quot;&quot;&gt;
    &lt;plaintext&gt;
      <span class="_v_lT"><span>3.1415926535897932384626433832795028841971693993751058...</span></span>
    &lt;/plaintext&gt;
    &lt;img src=&quot;http://www1.wolframalpha.com/Calculate/MSP/MSP291g37i75c7bh16e7b0000698324f506ghc9c5?MSPStoreType=image/gif&amp;s=12&quot; 
         alt=&quot;3.1415926535897932384626433832795028841971693993751058...&quot;
         title=&quot;3.1415926535897932384626433832795028841971693993751058...&quot; 
         <span class="_v_lT"><span>width=&quot;443&quot;</span></span> height=&quot;20&quot;/&gt;
  &lt;/subpod&gt;
  &lt;states count=&quot;1&quot;&gt;...&lt;/states&gt;
&lt;/pod&gt;</span></div></h2></div><div><h2 id="controlling-width-of-results"><div class="_4aml"><span>The number of digits shown in the plaintext representation is chosen so as to fit within a width of 500 pixels, and you can see that the width attribute of the <span class="_HR3c"><span>&lt;img&gt;</span></span> element shows that the rendered image is 443 pixels wide. If we try this query again and add the parameter <span class="_HR3c"><span>width=250</span></span>, here is the new pod:</span></div></h2></div><div><h2 id="controlling-width-of-results"><div class="_S_tS"><span>&lt;pod title=&quot;Decimal approximation&quot; scanner=&quot;Numeric&quot; id=&quot;DecimalApproximation&quot; position=&quot;100&quot; error=&quot;false&quot; numsubpods=&quot;1&quot; primary=&quot;true&quot;&gt;
  &lt;subpod title=&quot;&quot;&gt;
    &lt;plaintext&gt;
      <span class="_v_lT"><span>3.1415926535897932384626433832795028841971693993751058...</span></span>
    &lt;/plaintext&gt;
    &lt;img src=&quot;http://www1.wolframalpha.com/Calculate/MSP/MSP141g37i758a591379d00006ac21dae92c98172?MSPStoreType=image/gif&amp;s=12&quot; 
         alt=&quot;3.141592653589793238462643...&quot; 
         title=&quot;3.141592653589793238462643...&quot; 
         <span class="_v_lT"><span>width=&quot;219&quot;</span></span> height=&quot;20&quot;/&gt;
  &lt;/subpod&gt;
  &lt;states count=&quot;1&quot;&gt;...&lt;/states&gt;
&lt;/pod&gt;</span></div></h2></div><div><h2 id="controlling-width-of-results"><div class="_4aml"><span>With this smaller width requested, Wolfram|Alpha displays fewer digits, and the new image width is 219 pixels. This option works well for single-element or plain text results, since Wolfram|Alpha can choose to truncate the output. However, for more complex output, requesting a specific width can force elements to be displayed in an undesirable way (e.g. mid-expression line breaks, awkward vertical spacing, etc.).</span></div></h2></div><div><div><div class="_1EgR"><span>Max Width</span></div></div></div><div><h2 id="controlling-width-of-results"><div class="_4aml"><span>The <span class="_v_lT"><span>maxwidth</span></span> parameter allows users of the API to adopt a two-part strategy for controlling width. You can specify a desired width using the width parameter, but if you also specify a higher maxwidth value, then when Wolfram|Alpha formats results to the width value, it will attempt to detect undesirable line breaks and automatically reformat to your larger maxwidth. In other words, using width and maxwidth together lets you tell the API, &quot;Please format text and tables to a certain width, but if this is going to look really ugly, I&#x27;d rather have it formatted at a higher width instead.&quot;</span></div></h2></div><div><h2 id="controlling-width-of-results"><div class="_4aml"><span>Consider the effect of using this strategy on the &quot;Doppler shift&quot; query. If you wanted most output to be limited to 100 pixels but you realized that some elements would display poorly this way, you might set a maxwidth of 200.</span></div></h2></div><div><div><div class="_1EgR"><span>Plot Width</span></div></div></div><div><h2 id="controlling-width-of-results"><div class="_4aml"><span>The <span class="_v_lT"><span>plotwidth</span></span> parameter controls the width at which plots and graphics are rendered. The default value is 200 pixels. Many graphics in Wolfram|Alpha are deliberately rendered at larger sizes to accommodate their content. Specifying plotwidth is currently an experimental feature that does not yet affect many type of graphics.</span></div></h2></div><div><div><div class="_1EgR"><span>Magnification</span></div></div></div><div><h2 id="controlling-width-of-results"><div class="_4aml"><span>The <span class="_v_lT"><span>mag</span></span> parameter controls the magnification of pod images. The default value is 1.0, meaning no magnification. Magnification does not affect the pixel width of images, so if you specify a width parameter or accept the default of 500 pixels, images will still come back at that size if you specify a magnification value. For instance, if you specify <span class="_HR3c"><span>mag=2.0</span></span>, then the pod image is formatted to a width of half the requested width (say, 250 pixels) and then blown up by a factor of 2 during rendering, to 500 pixels. This option is useful for displaying image elements like font sizes, tick marks, line-wrapping and spacing on high-density screens (e.g. tablets or mobile phones). Since such elements can be very sensitive to formatting width, they may fit on a screen but be too small to read or interpret; magnification can &quot;blow up&quot; an image without changing its absolute size.</span></div></h2></div><div><h2 id="controlling-width-of-results"><div class="_4aml"><span>For instance, suppose you wanted to display the &quot;Averages&quot; pod from the &quot;tides Seattle&quot; query on a small vertical screen. Without any size parameters, this table is wider than it is tall:</span></div></h2></div><div><div><img src="/_next/static/images/05-wider_table_21dBqmex.png" alt="France results &quot;Name&quot; pod" class="_qxSu"/></div></div><div><h2 id="controlling-width-of-results"><div class="_4aml"><span>This would be okay for a normal wide screen, but shrinking it to fit on a vertical screen would make the text too small to read. Combining the mag and width parameters (in this case, <span class="_HR3c"><span>&quot;mag=2&quot;</span></span> and <span class="_HR3c"><span>&quot;width=400&quot;</span></span>), you can increase the size of the text without changing the absolute width of the table:</span></div></h2></div><div><div><img src="/_next/static/images/06-mag_table_11d4kjkX.png" alt="&quot;Averages&quot; pod image from “tides Seattle” query" class="_qxSu"/></div></div></section></div></div><div class="_iwaL"><div class="_48MV"><section id="specifying-your-location"><h1 class="_JLFn"><span>Specifying Your Location</span></h1><div><h2 id="specifying-your-location"><div class="_4aml"><span>Many queries return results that depend on your current location. A query about weather conditions, for example, needs to know the caller&#x27;s location, and a mortgage computation wants to present results in the local currency. By default, Wolfram|Alpha attempts to determine the caller&#x27;s location from the IP address, but you can override this by specifying location information in one of the three forms listed.</span></div></h2></div><div><h2 id="specifying-your-location"><div class="_4aml"><span>Note that the units used in query results are altered by these location parameters. See the <a href="/api/documentation?scrollTo=assumption-Unit" class="_3BQD orange19RedHover _xzt6 _hCSh sc-34cb55e4-2 sc-34cb55e4-3 jojysd kPdgYi"><span class="sc-34cb55e4-0 hLNrE"><span>Unit Assumption</span></span></a> subsection in the <a href="/api/documentation?scrollTo=applying-assumptions" class="_3BQD orange19RedHover _xzt6 _hCSh sc-34cb55e4-2 sc-34cb55e4-3 jojysd kPdgYi"><span class="sc-34cb55e4-0 hLNrE"><span>Applying Assumptions</span></span></a> section for more information on changing units.</span></div></h2></div><div><h2 id="semantic-location"><div class="_UX7b"><span>Semantic Location</span></div></h2></div><div><h2 id="semantic-location"><div class="_4aml"><span>The <span class="_v_lT"><span>location</span></span> parameter lets you specify a string like &quot;Los Angeles, CA&quot; or &quot;Madrid&quot; to be semantically interpreted as a location. This is essentially the same as calling the Wolfram Language&#x27;s <a href="https://reference.wolfram.com/language/ref/Interpreter.html" class="_3BQD _dGJe _ZJzB sc-34cb55e4-2 sc-34cb55e4-3 cwjaCb kPdgYi _h_2l"><span class="sc-34cb55e4-0 hLNrE"><span>Interpreter</span></span></a> function and using the first result as the location for the query.</span></div></h2></div><div><h2 id="latitude-and-longitude"><div class="_UX7b"><span>Latitude and Longitude</span></div></h2></div><div><h2 id="latitude-and-longitude"><div class="_4aml"><span>The <span class="_v_lT"><span>latlong</span></span> parameter lets you specify a latitude/longitude pair like &quot;40.42,-3.71&quot;. Negative latitude values are south, and negative longitude values are west. Although this is the most exact way to specify a location, it will fail if no valid data is available nearby for the query.</span></div></h2></div><div><h2 id="ip-address"><div class="_UX7b"><span>IP Address</span></div></h2></div><div><h2 id="ip-address"><div class="_4aml"><span>The <span class="_v_lT"><span>ip</span></span> parameter lets you set the IP address of the caller, which will be used to determine a location. With this parameter, if you are forwarding calls from your own web visitors to the Full Results API, you can propagate their IP addresses.</span></div></h2></div><div><h2 id="combining-location-parameters"><div class="_UX7b"><span>Combining Location Parameters</span></div></h2></div><div><h2 id="combining-location-parameters"><div class="_4aml"><span>You can include multiple location parameters in your query, and they will be evaluated in order of precedence (location → latlong → ip) until a valid location is found. In this way, you can use extra location parameters as &quot;backups&quot; in case the initial specification fails. For instance, if you were executing a &quot;weather&quot; query using a location string, you might also want to include a default latitude/longitude location in case the given string is invalid:</span></div></h2></div><div><h2 id="combining-location-parameters"><div class="_S_tS"><span>http://api.wolframalpha.com/v2/query?appid=DEMO&amp;input=weather&amp;format=image&amp;location=the+moon&amp;latlong=51.5,-0.1167</span></div></h2></div><div><h2 id="combining-location-parameters"><div class="_4aml"><span>In this case, Wolfram|Alpha will attempt to parse the location string first. Since &quot;the Moon&quot; is not a valid location for a weather query, the given latitude/longitude will be used instead.</span></div></h2></div></section></div></div><div class="_iwaL"><div class="_48MV"><section id="informational-elements"><h1 class="_JLFn"><span>Informational Elements</span></h1><div><h2 id="information"><div class="_UX7b"><span>Information</span></div></h2></div><div><h2 id="information"><div class="_4aml"><span>Some pods on the Wolfram|Alpha website have text buttons in their lower-right corners that provide extra information about the contents of that pod. In the results from the &quot;tides Seattle&quot; query, the &quot;Tide measurement&quot; pod has buttons titled &quot;Satellite image&quot; and &quot;Units&quot;. Clicking these types of buttons will cause either a popup window or a new browser window to appear with more information about the request:</span></div></h2></div><div><div><img src="/_next/static/images/07-popup_P6OA0Hus.png" alt="magnified version of &quot;Averages&quot; pod image from &quot;tides Seattle&quot; query" class="_qxSu"/></div></div><div><h2 id="information"><div class="_4aml"><span>The data for these informational links is available in the API via the <span class="_HR3c"><span>&lt;infos&gt;</span></span> element, which appears inside any <span class="_HR3c"><span>&lt;pod&gt;</span></span> elements for which information links are available. Here is the <span class="_HR3c"><span>&lt;infos&gt;</span></span> XML element from this query:</span></div></h2></div><div><h2 id="informational-elements"><div class="_S_tS"><span>&lt;pod title=&quot;Tide measurement station&quot; scanner=&quot;Tide&quot; id=&quot;TideMeasurementStation&quot; position=&quot;400&quot; error=&quot;false&quot; numsubpods=&quot;1&quot;&gt;
  &lt;subpod title=&quot;&quot;&gt;...&lt;/subpod&gt;
  &lt;states count=&quot;2&quot;&gt;...&lt;/states&gt;
  &lt;infos count=&quot;2&quot;&gt;
    &lt;info&gt;
      &lt;units count=&quot;1&quot;&gt;
        &lt;unit short=&quot;mi&quot; long=&quot;miles&quot;/&gt;
        &lt;img src=&quot;http://www1.wolframalpha.com/Calculate/MSP/MSP1231c61gh85106867i900006848e4e79bchdi50?MSPStoreType=image/gif&amp;s=13&quot; width=&quot;88&quot; height=&quot;26&quot;/&gt;
      &lt;/units&gt;
    &lt;/info&gt;
      &lt;info&gt;
        &lt;link url=&quot;http://maps.google.com?ie=UTF8&amp;z=17&amp;t=k&amp;ll=47.6017%2C-122.338&amp;q=47.6017%20N%2C%20122.338%20W&quot; text=&quot;Satellite image&quot;/&gt;
      &lt;/info&gt;
    &lt;/infos&gt;
&lt;/pod&gt;</span></div></h2></div><div><h2 id="informational-elements"><div class="_4aml"><span>The content of the <span class="_HR3c"><span>&lt;infos&gt;</span></span> element is always one or more <span class="_HR3c"><span>&lt;info&gt;</span></span> elements. Each <span class="_HR3c"><span>&lt;info&gt;</span></span> element represents one piece of information about the contents of the pod. In some cases, these bits of information are formatted as separate lines on the website (as shown above), and in other cases they are placed together on a single line separated by a vertical bar.</span></div></h2></div><div><h2 id="informational-elements"><div class="_4aml"><span>Here is another example of an <span class="_HR3c"><span>&lt;infos&gt;</span></span> element. This is the &quot;Alternative representations&quot; pod for the &quot;pi&quot; query:</span></div></h2></div><div><h2 id="informational-elements"><div class="_S_tS"><span>&lt;infos count=&quot;4&quot;&gt;
  &lt;info text=&quot;log(x) is the natural logarithm&quot;&gt;
    &lt;img src=&quot;http://www1.wolframalpha.com/Calculate/MSP/MSP1171bagf712c7721c3i000014840g8d3116fgd4?MSPStoreType=image/gif&amp;s=14&quot; 
         alt=&quot;log(x) is the natural logarithm&quot; 
         title=&quot;log(x) is the natural logarithm&quot; 
         width=&quot;198&quot; height=&quot;18&quot;/&gt;
    &lt;link url=&quot;http://reference.wolfram.com/mathematica/ref/Log.html&quot; text=&quot;Documentation&quot; title=&quot;Mathematica&quot;/&gt;
    &lt;link url=&quot;http://functions.wolfram.com/ElementaryFunctions/Log&quot; text=&quot;Properties&quot; title=&quot;Wolfram Functions Site&quot;/&gt;
    &lt;link url=&quot;http://mathworld.wolfram.com/NaturalLogarithm.html&quot; text=&quot;Definition&quot; title=&quot;MathWorld&quot;/&gt;
  &lt;/info&gt;
  &lt;info text=&quot;i is the imaginary unit&quot;&gt;
    &lt;img src=&quot;http://www1.wolframalpha.com/Calculate/MSP/MSP1181bagf712c7721c3i00005a6fh9g2b203976h?MSPStoreType=image/gif&amp;s=14&quot; 
         alt=&quot;i is the imaginary unit&quot; 
         title=&quot;i is the imaginary unit&quot; 
         width=&quot;146&quot; height=&quot;18&quot;/&gt;
    &lt;link url=&quot;http://reference.wolfram.com/mathematica/ref/I.html&quot; text=&quot;Documentation&quot; title=&quot;Documentation&quot;/&gt;
    &lt;link url=&quot;http://mathworld.wolfram.com/i.html&quot; text=&quot;Definition&quot; title=&quot;MathWorld&quot;/&gt;
  &lt;/info&gt;
  &lt;info text=&quot;cos^(-1)(x) is the inverse cosine function&quot;&gt;
    &lt;img src=&quot;http://www1.wolframalpha.com/Calculate/MSP/MSP1191bagf712c7721c3i0000395b11i0377aigfh?MSPStoreType=image/gif&amp;s=14&quot; 
         alt=&quot;cos^(-1)(x) is the inverse cosine function&quot; 
         title=&quot;cos^(-1)(x) is the inverse cosine function&quot; 
         width=&quot;275&quot; height=&quot;18&quot;/&gt;
    &lt;link url=&quot;http://reference.wolfram.com/mathematica/ref/ArcCos.html&quot; text=&quot;Documentation&quot; title=&quot;Mathematica&quot;/&gt;
    &lt;link url=&quot;http://functions.wolfram.com/ElementaryFunctions/ArcCos&quot; text=&quot;Properties&quot; title=&quot;Wolfram Functions Site&quot;/&gt;
    &lt;link url=&quot;http://mathworld.wolfram.com/InverseCosine.html&quot; text=&quot;Definition&quot; title=&quot;MathWorld&quot;/&gt;
  &lt;/info&gt;
  &lt;info&gt;
    &lt;link url=&quot;http://functions.wolfram.com/Constants/Pi/27/ShowAll.html&quot; text=&quot;More information&quot;/&gt;
  &lt;/info&gt;
&lt;/infos&gt;</span></div></h2></div><div><h2 id="informational-elements"><div class="_4aml"><span>If you do that query on the website, you will see four info lines for that pod, the first three of which are text followed by several mouseover links:</span></div></h2></div><div><div><img src="/_next/static/images/08-mouseover_links_3GHLpZh0.png" alt="Informational elements popup image" class="_qxSu"/></div></div><div><h2 id="informational-elements"><div class="_4aml"><span>The content on the <span class="_HR3c"><span>&lt;info&gt;</span></span> element varies. In some cases, there is a text attribute that gives a string of textual information that is not intended to be a link in itself. The possible subelements are:</span></div></h2></div><div><div><div class="_1EgR"><span>&lt;link&gt;</span></div></div></div><div><h2 id="informational-elements"><div class="_4aml"><span>Used when the item is just a standard link of some text pointing to a URL, like in the &quot;Satellite image&quot; link in the result above, or the common &quot;More information&quot; link pointing to a <a href="https://mathworld.wolfram.com" class="_3BQD _dGJe _ZJzB sc-34cb55e4-2 sc-34cb55e4-3 cwjaCb kPdgYi _h_2l"><span class="sc-34cb55e4-0 hLNrE"><span>MathWorld</span></span></a> page. The <span class="_HR3c"><span>&lt;link&gt;</span></span> element contains a <span class="_v_lT"><span>url</span></span> attribute giving the URL containing the referenced information, a <span class="_v_lT"><span>text</span></span> attribute giving a textual name for the link (the website uses this as the text of the link itself) and in some cases a <span class="_v_lT"><span>title</span></span> attribute (used by the website as a popup when the mouse hovers over the link).</span></div></h2></div><div><div><div class="_1EgR"><span>&lt;units&gt;</span></div></div></div><div><h2 id="informational-elements"><div class="_4aml"><span>Used when the link is a popup window showing a table of unit abbreviations used in the pod alongside their long names. The tides example above shows an unusual case where the table has only one row. Each row is represented as a <span class="_HR3c"><span>&lt;unit&gt;</span></span> element giving the short and long names of the unit. Wolfram|Alpha creates nicely rendered images of these units tables, so there is also an <span class="_HR3c"><span>&lt;img&gt;</span></span> element that points to the URL for the image of the entire table if you want to show your users a picture.</span></div></h2></div><div><div><div class="_1EgR"><span>&lt;img&gt;</span></div></div></div><div><h2 id="informational-elements"><div class="_4aml"><span>Some info lines contain descriptive text along with one or more links. The text is provided in the text attribute of the <span class="_HR3c"><span>&lt;info&gt;</span></span> element, but often the text contains a mathematical symbol or nomenclature that looks best when displayed as a typeset image. The <span class="_HR3c"><span>&lt;img&gt;</span></span> element contains a link to an image of the text. This is the same image that is displayed on the website.</span></div></h2></div><div><h2 id="sources"><div class="_UX7b"><span>Sources</span></div></h2></div><div><h2 id="sources"><div class="_4aml"><span>In the bottom section of many Wolfram|Alpha results is a link titled &quot;Sources&quot;. On the website this displays a popup window listing information about data sources that were either used to compute the result or could be referenced for more information. Here is the expanded &quot;Sources&quot; element for the &quot;tides Seattle&quot; query:</span></div></h2></div><div><div><img src="/_next/static/images/09-sources_nfa3VJ5y.png" alt="Links within results image" class="_qxSu"/></div></div><div><h2 id="sources"><div class="_4aml"><span>The API returns this information inside the <span class="_HR3c"><span>&lt;sources&gt;</span></span> element. The <span class="_HR3c"><span>&lt;sources&gt;</span></span> element contains a series of <span class="_HR3c"><span>&lt;source&gt;</span></span> subelements, each one defining a link to a webpage of source information:</span></div></h2></div><div><h2 id="sources"><div class="_S_tS"><span>&lt;sources count=&quot;2&quot;&gt;
  &lt;source url=&quot;http://www.wolframalpha.com/sources/CityDataSourceInformationNotes.html&quot; text=&quot;City data&quot;/&gt;
  &lt;source url=&quot;http://www.wolframalpha.com/sources/TideDataSourceInformationNotes.html&quot; text=&quot;Tide data&quot;/&gt;
&lt;/sources&gt;</span></div></h2></div><div><h2 id="sources"><div class="_4aml"><span>Source information is not always present, such as for a purely mathematical computation.</span></div></h2></div><div><h2 id="generalizations"><div class="_UX7b"><span>Generalizations</span></div></h2></div><div><h2 id="generalizations"><div class="_4aml"><span>For some types of queries, Wolfram|Alpha decides that although it can provide some results for the precise query that was given, there is a &quot;generalization&quot; of the query for which more information can be provided. In these cases, it reports the suggested generalized query via the <span class="_HR3c"><span>&lt;generalization&gt;</span></span> element. Queries that produce this element are relatively rare. An example is &quot;price of copernicium&quot;: if you try this query on the website, you will see that it displays the two pods available for &quot;price of copernicium&quot;, then a separator that reads &quot;General results for: copernicium&quot;, followed by the pods generated by the &quot;copernicium&quot; query:</span></div></h2></div><div><div><img src="/_next/static/images/10-general_results_2Ss78OdU.png" alt="Image of sources for results" class="_qxSu"/></div></div><div><h2 id="generalizations"><div class="_4aml"><span>The query returns two small pods, but suggests the generalization &quot;copernicium&quot;, about which much more information is available. Here is the XML result generated by sending this query to the Full Results API:</span></div></h2></div><div><h2 id="generalizations"><div class="_S_tS"><span>&lt;queryresult success=&quot;true&quot; error=&quot;false&quot; numpods=&quot;1&quot; datatypes=&quot;Element&quot; timedout=&quot;&quot; timedoutpods=&quot;&quot; timing=&quot;1.313&quot; parsetiming=&quot;0.259&quot; parsetimedout=&quot;false&quot; recalculate=&quot;&quot; id=&quot;MSPa641c6749c3894adgef000045hg0hc62e590bf6&quot; host=&quot;http://www1.wolframalpha.com&quot; server=&quot;13&quot; version=&quot;2.6&quot;&gt;
  &lt;pod title=&quot;Input interpretation&quot; scanner=&quot;Identity&quot; id=&quot;Input&quot; position=&quot;100&quot; error=&quot;false&quot; numsubpods=&quot;1&quot;&gt;...&lt;/pod&gt;
  &lt;sources count=&quot;1&quot;&gt;...&lt;/sources&gt;
  &lt;generalization topic=&quot;copernicium&quot; desc=&quot;General results for:&quot; url=&quot;<span class="_v_lT"><span>http://www1.wolframalpha.com/api/v2/query?id=MSPa671c6749c3894adgef0000469f1ii4h3ca513c&amp;s=13</span></span>&quot;/&gt;
&lt;/queryresult&gt;</span></div></h2></div><div><h2 id="generalizations"><div class="_4aml"><span>If you want to display the extra results available for that query or give users a chance to click something to request them, you can get the pods from the generalized query by calling the URL given in the url attribute (highlighted above). Note that you must append your own AppID to this URL:</span></div></h2></div><div><h2 id="generalizations"><div class="_S_tS"><span>http://www1.wolframalpha.com/api/v2/query?id=MSPa1431c67498dg069cdf700004e52c8i1e6fbe3b0&amp;s=13<span class="_v_lT"><span>&amp;appid=DEMO</span></span></span></div></h2></div><div><h2 id="generalizations"><div class="_4aml"><span>What comes back is a standard <span class="_HR3c"><span>&lt;queryresult&gt;</span></span> element with results from the &quot;copernicium&quot; query. Using the URL provided is faster than simply issuing a new query for &quot;copernicium&quot;, since the work of parsing the query has already been performed.</span></div></h2></div><div><h2 id="primary-result-tagging"><div class="_UX7b"><span>Primary Result Tagging</span></div></h2></div><div><h2 id="primary-result-tagging"><div class="_4aml"><span>Although Wolfram|Alpha returns many pods for most queries, there is sometimes the notion of a &quot;primary result&quot; for a given query. This is especially true for queries that correspond to Wolfram Language computations (e.g. &quot;2+2&quot;) or simple data lookups (e.g. &quot;France GDP&quot;). If you are looking to display the closest thing to a simple &quot;answer&quot; that Wolfram|Alpha can provide, you can look for pods tagged as primary results via the <span class="_HR3c"><span>primary=true</span></span> attribute. Here is an example—the &quot;Result&quot; pod from the query &quot;France GDP&quot;:</span></div></h2></div><div><h2 id="primary-result-tagging"><div class="_S_tS"><span>&lt;pod title=&quot;Result&quot; scanner=&quot;Data&quot; id=&quot;Result&quot; position=&quot;200&quot; error=&quot;false&quot; numsubpods=&quot;1&quot; <span class="_v_lT"><span>primary=&quot;true&quot;&gt;</span></span>
  &lt;subpod title=&quot;&quot;&gt;
    &lt;plaintext&gt;
      $2.829 trillion per year (world rank: 6th) (2014 estimate)
    &lt;/plaintext&gt;
    &lt;img src= ... /&gt;
&lt;/subpod&gt;
&lt;/pod&gt;</span></div></h2></div><div><h2 id="primary-result-tagging"><div class="_4aml"><span>Primary result tagging is a relatively new feature in Wolfram|Alpha, and many queries do not have a primary result, often because it is not meaningful for that query.</span></div></h2></div><div><h2 id="pod-states"><div class="_UX7b"><span>Pod States</span></div></h2></div><div><h2 id="pod-states"><div class="_4aml"><span>Many pods on the Wolfram|Alpha website have text buttons in their upper-right corners that substitute the contents of that pod with a modified version (a different state). Clicking any of these buttons will recompute just that one pod to display different information. The API returns information about these pod states and allows you to programmatically invoke them (similar to <a href="/api/documentation?scrollTo=applying-assumptions" class="_3BQD orange19RedHover _xzt6 _hCSh sc-34cb55e4-2 sc-34cb55e4-3 jojysd kPdgYi"><span class="sc-34cb55e4-0 hLNrE"><span>applying assumptions</span></span></a>, described later).</span></div></h2></div><div><h2 id="pod-states"><div class="_4aml"><span>A simple example is the query &quot;pi&quot;, which returns a pod titled &quot;Decimal approximation&quot; with a button named &quot;More digits&quot;. A website user can click this button to replace the pod with a new one showing more digits of pi:</span></div></h2></div><div><div><img src="/_next/static/images/11-more_less_digits_nK2BJ6kq.png" alt="General results example image" class="_qxSu"/></div></div><div><h2 id="pod-states"><div class="_4aml"><span>Here is what that pod looks like in the API result:</span></div></h2></div><div><h2 id="pod-states"><div class="_S_tS"><span>&lt;pod title=&quot;Decimal approximation&quot; scanner=&quot;Numeric&quot; id=&quot;DecimalApproximation&quot; position=&quot;200&quot; error=&quot;false&quot; numsubpods=&quot;1&quot; primary=&quot;true&quot;&gt;
  &lt;subpod title=&quot;&quot;&gt;
    &lt;plaintext&gt;
      3.1415926535897932384626433832795028841971693993751058...
    &lt;/plaintext&gt;
    &lt;img ... /&gt;
  &lt;/subpod&gt;
  &lt;states count=&quot;1&quot;&gt;
    <span class="_v_lT"><span>&lt;state name=&quot;More digits&quot; input=&quot;DecimalApproximation__More digits&quot;/&gt;</span></span>
  &lt;/states&gt;
&lt;/pod&gt;</span></div></h2></div><div><h2 id="pod-states"><div class="_4aml"><span>The <span class="_HR3c"><span>&lt;states&gt;</span></span> element contains all the alternative states available for that pod. The name of each state is the same as the text that appears on the Wolfram|Alpha website. You can perform the &quot;pi&quot; query and ask that the &quot;More digits&quot; state be invoked automatically by using the <span class="_v_lT"><span>podstate</span></span> parameter, passing the value of the input attribute from the corresponding &lt;state&gt; element:</span></div></h2></div><div><h2 id="pod-states"><div class="_S_tS"><span>http://api.wolframalpha.com/v2/query?appid=DEMO&amp;input=pi<span class="_v_lT"><span>&amp;podstate=DecimalApproximation__More+digits</span></span></span></div></h2></div><div><h2 id="pod-states"><div class="_4aml"><span>Note that the value of the input attribute in the <span class="_HR3c"><span>&lt;state&gt;</span></span> element is not URL encoded, so you will have to perform this encoding yourself when you use it. The result from the above query will be exactly as if a website user had clicked the &quot;More digits&quot; button (notice the difference in the plaintext output):</span></div></h2></div><div><h2 id="pod-states"><div class="_S_tS"><span>&lt;pod title=&quot;Decimal approximation&quot; scanner=&quot;Numeric&quot; id=&quot;DecimalApproximation&quot; position=&quot;200&quot; error=&quot;false&quot; numsubpods=&quot;1&quot; primary=&quot;true&quot;&gt;
  &lt;subpod title=&quot;&quot;&gt;
    &lt;plaintext&gt;<span class="_v_lT"><span>3.1415926535897932384626433832795028841971693993751058...</span></span>&lt;/plaintext&gt;
    &lt;img ... /&gt;
  &lt;/subpod&gt;
  &lt;states count=&quot;2&quot;&gt;
    <span class="_v_lT"><span>&lt;state name=&quot;Fewer digits&quot; input=&quot;DecimalApproximation__Fewer digits&quot;/&gt;</span></span>
    <span class="_v_lT"><span>&lt;state name=&quot;More digits&quot; input=&quot;DecimalApproximation__More digits&quot;/&gt;</span></span>
  &lt;/states&gt;
&lt;/pod&gt;</span></div></h2></div><div><h2 id="pod-states"><div class="_4aml"><span>Changing the current state of a pod may also invoke more possible states—in this case, a &quot;Fewer digits&quot; state is now available, along with an extended &quot;More digits&quot; state. State changes can be chained together to simulate any sequence of button clicks. You can simulate clicking the &quot;More digits&quot; button twice as follows:</span></div></h2></div><div><h2 id="pod-states"><div class="_S_tS"><span>http://api.wolframalpha.com/v2/query?appid=DEMO&amp;input=pi<span class="_v_lT"><span>&amp;podstate=DecimalApproximation__More+digits&amp;podstate=DecimalApproximation__More+digits</span></span></span></div></h2></div><div><h2 id="pod-states"><div class="_4aml"><span>When invoking the same pod state change multiple times, as in the above query, you can use a shortcut of specifying only one podstate parameter and indicating the multiplicity by prepending &quot;n@&quot;. For example, the following query invokes the &quot;More digits&quot; state twice, exactly like the previous example:</span></div></h2></div><div><h2 id="pod-states"><div class="_S_tS"><span>http://api.wolframalpha.com/v2/query?appid=DEMO&amp;input=pi<span class="_v_lT"><span>&amp;podstate=2@DecimalApproximation__More+digits</span></span></span></div></h2></div><div><h2 id="pod-states"><div class="_4aml"><span>Some states are logically grouped into sets, which are represented on the website as popup menus. For example, the &quot;Weather history and forecast&quot; pod from the query &quot;weather&quot; shows some charts along with a popup menu that controls the time period (it has values like &quot;Current week&quot;, &quot;Last month&quot;, etc.) This type of state control is represented with the <span class="_HR3c"><span>&lt;statelist&gt;</span></span> element. Here is the <span class="_HR3c"><span>&lt;states&gt;</span></span> element in the API result for that pod. Note that this pod has two other button-type states (&quot;Show metric&quot; and &quot;More&quot;):</span></div></h2></div><div><h2 id="pod-states"><div class="_S_tS"><span>&lt;states count=&quot;3&quot;&gt;
  &lt;statelist count=&quot;9&quot; value=&quot;Current week&quot; delimiters=&quot;&quot;&gt;
    &lt;state name=&quot;Current week&quot; input=&quot;WeatherCharts:WeatherData__Current week&quot;/&gt;
    &lt;state name=&quot;Current day&quot; input=&quot;WeatherCharts:WeatherData__Current day&quot;/&gt;
    &lt;state name=&quot;Next week&quot; input=&quot;WeatherCharts:WeatherData__Next week&quot;/&gt;
    &lt;state name=&quot;Past week&quot; input=&quot;WeatherCharts:WeatherData__Past week&quot;/&gt;
    &lt;state name=&quot;Past month&quot; input=&quot;WeatherCharts:WeatherData__Past month&quot;/&gt;
    &lt;state name=&quot;Past year&quot; input=&quot;WeatherCharts:WeatherData__Past year&quot;/&gt;
    &lt;state name=&quot;Past 5 years&quot; input=&quot;WeatherCharts:WeatherData__Past 5 years&quot;/&gt;
    &lt;state name=&quot;Past 10 years&quot; input=&quot;WeatherCharts:WeatherData__Past 10 years&quot;/&gt;
    &lt;state name=&quot;All&quot; input=&quot;WeatherCharts:WeatherData__All&quot;/&gt;
  &lt;/statelist&gt;
&lt;state name=&quot;Show metric&quot; input=&quot;WeatherCharts:WeatherData__Show metric&quot;/&gt;
&lt;state name=&quot;More&quot; input=&quot;WeatherCharts:WeatherData__More&quot;/&gt;
&lt;/states&gt;</span></div></h2></div><div><h2 id="pod-states"><div class="_4aml"><span>The value attribute of the <span class="_HR3c"><span>&lt;statelist&gt;</span></span> element names the state that is currently in effect. To request that this pod show data for the last five years, you would use this URL:</span></div></h2></div><div><h2 id="pod-states"><div class="_S_tS"><span>http://api.wolframalpha.com/v2/query?input=weather&amp;appid=DEMO<span class="_v_lT"><span>&amp;podstate=WeatherCharts:WeatherData__Past+5+years</span></span></span></div></h2></div><div><h2 id="subpod-states"><div class="_UX7b"><span>Subpod States</span></div></h2></div><div><h2 id="subpod-states"><div class="_4aml"><span>Most podstate changes are for entire pods, but a few Wolfram|Alpha queries have podstate changes at the subpod level. An example of one such query is &quot;inductance of a circular coil&quot;. On the website, the third pod is titled &quot;Self-inductance of a single-layer circular coil of small radius&quot;, and it has two subpods. The second one is called &quot;Result&quot;, and it has a podstate button called &quot;Show formula&quot;:</span></div></h2></div><div><div><img src="/_next/static/images/12-show_formula_26UXdr_c.png" alt="More and fewer button example image" class="_qxSu"/></div></div><div><h2 id="subpod-states"><div class="_4aml"><span>You can see by the position and behavior of this button that it only modifies the &quot;Result&quot; subpod, not the entire pod. In the API, each such subpod has its own <span class="_HR3c"><span>&lt;states&gt;</span></span> element. Here is the XML for that pod:</span></div></h2></div><div><h2 id="subpod-states"><div class="_S_tS"><span>&lt;pod title=&quot;Self-inductance of a single-layer circular coil&quot; scanner=&quot;Formula&quot; id=&quot;SelfInductanceSingleLayerCircularCoil&quot; position=&quot;300&quot; error=&quot;false&quot; numsubpods=&quot;2&quot;&gt;
  &lt;subpod title=&quot;Input values&quot;&gt;
    &lt;plaintext&gt;
      coil turns | 10 
      coil radius | 1 cm (centimeter) 
      coil length | 20 cm (centimeters)
    &lt;/plaintext&gt;
    &lt;img src= ... /&gt;
  &lt;/subpod&gt;
  &lt;subpod title=&quot;Result&quot;&gt;
    &lt;plaintext&gt;
      self-inductance | 189.3 nH (nanohenries) 
      = 0.1893 muH (microhenries) 
      = 1.893*10^-7 H (henries)
    &lt;/plaintext&gt;
    &lt;img src= ... /&gt;
    <span class="_v_lT"><span>&lt;states count=&quot;1&quot;&gt;
      &lt;state name=&quot;Show formula&quot; input=&quot;SelfInductanceSingleLayerCircularCoil__Result_Show formula&quot;/&gt;
    &lt;/states&gt;</span></span>
  &lt;/subpod&gt;
&lt;/pod&gt;</span></div></h2></div><div><h2 id="subpod-states"><div class="_4aml"><span>You can see that the <span class="_HR3c"><span>&lt;states&gt;</span></span> element is a subelement of <span class="_HR3c"><span>&lt;subpod&gt;</span></span>, not <span class="_HR3c"><span>&lt;pod&gt;</span></span>. To invoke this podstate change, you use it like any other podstate:</span></div></h2></div><div><h2 id="subpod-states"><div class="_S_tS"><span>http://api.wolframalpha.com/v2/query?appid=DEMO&amp;input=weather<span class="_v_lT"><span>&amp;podstate=Self-inductanceOfASingle-layerCircularCoil__Result _Show+formula</span></span></span></div></h2></div><div><h2 id="subpod-states"><div class="_4aml"><span>The result would have a third pod in which only the Result subpod was modified compared to the original query.</span></div></h2></div><div><h2 id="subpod-states"><div class="_4aml _8rLA"><span>Note: In previous versions of the API, there was no input attribute in the <span class="_8DOr"><span>&lt;state&gt;</span></span> element, and the value passed for the podstate parameter was just the name of the state (e.g. &quot;More digits&quot;). This is still supported, but it has the drawback that state changes cannot be invoked on a per-pod basis, so any pod with a &quot;More digits&quot; state would have it invoked, not just the &quot;Decimal approximation&quot; pod. Using the value of the input attribute will restrict the state change to a specific pod, and is the preferred form.</span></div></h2></div></section></div></div><div class="_iwaL"><div class="_48MV"><section id="using-assumptions"><h1 class="_JLFn"><span>Using Assumptions</span></h1><div><h2 id="using-assumptions"><div class="_4aml"><span>Wolfram|Alpha makes numerous assumptions when analyzing a query and deciding how to present its results. A simple example is a word that can refer to multiple things, like &quot;pi&quot;, which is a well-known mathematical constant but is also the name of a movie. Other classes of assumptions are the meaning of a unit abbreviation like &quot;m&quot;, which could be meters or minutes, or the default value of a variable in a formula, or whether 12/13/2001 is a date or a computation. Using the API, you can programmatically invoke these assumption values to alter the output of a query (similar to <a href="/api/documentation?scrollTo=pod-states" class="_3BQD orange19RedHover _xzt6 _hCSh sc-34cb55e4-2 sc-34cb55e4-3 jojysd kPdgYi"><span class="sc-34cb55e4-0 hLNrE"><span>pod states</span></span></a>, described above).</span></div></h2></div><div><h2 id="listing-of-assumption-types"><div class="_UX7b"><span>Listing of Assumption Types</span></div></h2></div><div><h2 id="listing-of-assumption-types"><div class="_4aml"><span>This is a complete listing of possible assumptions, categorized by functionality. Each assumption name links to a more in-depth explanation of the parameter, its usage and available options.</span></div></h2></div><div><div><ul class="_tV4K"><span>Categorical assumptions</span><ul><li class="_h6XR"><span><a href="/api/documentation?scrollTo=assumption-Clash" class="_3BQD orange19RedHover _xzt6 _hCSh sc-34cb55e4-2 sc-34cb55e4-3 jojysd kPdgYi"><span class="sc-34cb55e4-0 hLNrE"><span>Clash</span></span></a> — choose among possible interpretation categories for a query (e.g. &quot;pi&quot; could be a named constant or a movie)</span></li><li class="_h6XR"><span><a href="/api/documentation?scrollTo=assumption-MultiClash" class="_3BQD orange19RedHover _xzt6 _hCSh sc-34cb55e4-2 sc-34cb55e4-3 jojysd kPdgYi"><span class="sc-34cb55e4-0 hLNrE"><span>MultiClash</span></span></a> — choose among possible interpretation categories for in Structure of Assumptions
dividual words in a query (e.g. in &quot;log 0.5&quot;, &quot;log&quot; could be a PDF or a plotting function)</span></li><li class="_h6XR"><span><a href="/api/documentation?scrollTo=assumption-SubCategory" class="_3BQD orange19RedHover _xzt6 _hCSh sc-34cb55e4-2 sc-34cb55e4-3 jojysd kPdgYi"><span class="sc-34cb55e4-0 hLNrE"><span>SubCategory</span></span></a> — choose among similar results within the same interpretation category (e.g. &quot;hamburger&quot; could be a basic hamburger, McDonald&#x27;s hamburger, etc.)</span></li><li class="_h6XR"><span><a href="/api/documentation?scrollTo=assumption-Attribute" class="_3BQD orange19RedHover _xzt6 _hCSh sc-34cb55e4-2 sc-34cb55e4-3 jojysd kPdgYi"><span class="sc-34cb55e4-0 hLNrE"><span>Attribute</span></span></a> — choose specific traits of results within a SubCategory (e.g. for a &quot;basic hamburger&quot; you can specify patty size, condiments, etc.)</span></li></ul></ul></div></div><div><div><ul class="_tV4K"><span>Mathematical assumptions</span><ul><li class="_h6XR"><span><a href="/api/documentation?scrollTo=assumption-Unit" class="_3BQD orange19RedHover _xzt6 _hCSh sc-34cb55e4-2 sc-34cb55e4-3 jojysd kPdgYi"><span class="sc-34cb55e4-0 hLNrE"><span>Unit</span></span></a> — choose among possible interpretations of a query as a unit of measure (e.g. &quot;m&quot; could be meters or minutes)</span></li><li class="_h6XR"><span><a href="/api/documentation?scrollTo=assumption-AngleUnit" class="_3BQD orange19RedHover _xzt6 _hCSh sc-34cb55e4-2 sc-34cb55e4-3 jojysd kPdgYi"><span class="sc-34cb55e4-0 hLNrE"><span>AngleUnit</span></span></a> — choose whether to interpret angles in degrees or radians (e.g. &quot;sin(30)&quot; could be 30 degrees or 30 radians)</span></li><li class="_h6XR"><span><a href="/api/documentation?scrollTo=assumption-Function" class="_3BQD orange19RedHover _xzt6 _hCSh sc-34cb55e4-2 sc-34cb55e4-3 jojysd kPdgYi"><span class="sc-34cb55e4-0 hLNrE"><span>Function</span></span></a> — choose among possible interpretations of a query as a mathematical function (e.g. &quot;log&quot; could be the natural logarithm or the base 10 logarithm)</span></li><li class="_h6XR"><span><a href="/api/documentation?scrollTo=assumption-ListOrTimes" class="_3BQD orange19RedHover _xzt6 _hCSh sc-34cb55e4-2 sc-34cb55e4-3 jojysd kPdgYi"><span class="sc-34cb55e4-0 hLNrE"><span>ListOrTimes</span></span></a> — choose whether to interpret space-separated elements as a list of items or as multiplication (e.g. &quot;3 x&quot; could be {3, x} or 3×x)</span></li><li class="_h6XR"><span><a href="/api/documentation?scrollTo=assumption-ListOrNumber" class="_3BQD orange19RedHover _xzt6 _hCSh sc-34cb55e4-2 sc-34cb55e4-3 jojysd kPdgYi"><span class="sc-34cb55e4-0 hLNrE"><span>ListOrNumber</span></span></a> — choose whether to treat commas between numbers as thousands separators or list delimiters (e.g. &quot;1,234.5&quot; could be 1234.5 or {1, 234.5})</span></li><li class="_h6XR"><span><a href="/api/documentation?scrollTo=assumption-CoordinateSystem" class="_3BQD orange19RedHover _xzt6 _hCSh sc-34cb55e4-2 sc-34cb55e4-3 jojysd kPdgYi"><span class="sc-34cb55e4-0 hLNrE"><span>CoordinateSystem</span></span></a> — choose which coordinate system to use, given an ambiguous query (e.g. &quot;div(x rho, y z, z x)&quot; could refer to Cartesian3D or Cylindrical3D)</span></li><li class="_h6XR"><span><a href="/api/documentation?scrollTo=assumption-I" class="_3BQD orange19RedHover _xzt6 _hCSh sc-34cb55e4-2 sc-34cb55e4-3 jojysd kPdgYi"><span class="sc-34cb55e4-0 hLNrE"><span>I</span></span></a> — choose whether to interpret &quot;i&quot; as a variable or as the imaginary unit (e.g. &quot;5x+3i&quot; could be a complex number with one variable or an expression with two variables)</span></li><li class="_h6XR"><span><a href="/api/documentation?scrollTo=assumption-NumberBase" class="_3BQD orange19RedHover _xzt6 _hCSh sc-34cb55e4-2 sc-34cb55e4-3 jojysd kPdgYi"><span class="sc-34cb55e4-0 hLNrE"><span>NumberBase</span></span></a> — choose which number base to use, given an ambiguous query (e.g. &quot;100110101&quot; could be binary or decimal)</span></li><li class="_h6XR"><span><a href="/api/documentation?scrollTo=assumption-MixedFraction" class="_3BQD orange19RedHover _xzt6 _hCSh sc-34cb55e4-2 sc-34cb55e4-3 jojysd kPdgYi"><span class="sc-34cb55e4-0 hLNrE"><span>MixedFraction</span></span></a> — choose whether to interpret input as a mixed fraction or as multiplication (e.g. &quot;3 1/2&quot; could be 3½ or 3×½)</span></li></ul></ul></div></div><div><div><ul class="_tV4K"><span>Date and time assumptions</span><ul><li class="_h6XR"><span><a href="/api/documentation?scrollTo=assumption-TimeAMOrPM" class="_3BQD orange19RedHover _xzt6 _hCSh sc-34cb55e4-2 sc-34cb55e4-3 jojysd kPdgYi"><span class="sc-34cb55e4-0 hLNrE"><span>TimeAMOrPM</span></span></a> — choose whether a time is in the morning or the afternoon (e.g. &quot;3:00&quot; could be 3am or 3pm)</span></li><li class="_h6XR"><span><a href="/api/documentation?scrollTo=assumption-DateOrder" class="_3BQD orange19RedHover _xzt6 _hCSh sc-34cb55e4-2 sc-34cb55e4-3 jojysd kPdgYi"><span class="sc-34cb55e4-0 hLNrE"><span>DateOrder</span></span></a> — choose the order of day, year and month elements in a date (e.g. &quot;12/11/1996&quot; could be Dec. 11, 1996, or Nov. 12, 1996)</span></li><li class="_h6XR"><span><a href="/api/documentation?scrollTo=assumption-MortalityYearDOB" class="_3BQD orange19RedHover _xzt6 _hCSh sc-34cb55e4-2 sc-34cb55e4-3 jojysd kPdgYi"><span class="sc-34cb55e4-0 hLNrE"><span>MortalityYearDOB</span></span></a> — choose whether a mortality rate refers to a data year or a birth year (e.g. &quot;life expectancy France 1910&quot; could refer to statistics from 1910 or those for people born in 1910)</span></li></ul></ul></div></div><div><div><ul class="_tV4K"><span>Scientific assumptions</span><ul><li class="_h6XR"><span><a href="/api/documentation?scrollTo=assumption-TideStation" class="_3BQD orange19RedHover _xzt6 _hCSh sc-34cb55e4-2 sc-34cb55e4-3 jojysd kPdgYi"><span class="sc-34cb55e4-0 hLNrE"><span>TideStation</span></span></a> — choose among tide stations in a tide query (e.g. &quot;tides Seattle&quot; could use Seattle, Bangor or Tacoma tide stations as a source)</span></li></ul></ul></div></div><div><div><ul class="_tV4K"><span>Formula input assumptions</span><ul><li class="_h6XR"><span><a href="/api/documentation?scrollTo=assumption-FormulaSelect" class="_3BQD orange19RedHover _xzt6 _hCSh sc-34cb55e4-2 sc-34cb55e4-3 jojysd kPdgYi"><span class="sc-34cb55e4-0 hLNrE"><span>FormulaSelect</span></span></a> — choose among possible interpretations of a query as a mathematical formula (e.g. &quot;Doppler shift&quot; can refer to either the classical or relativistic Doppler shift)</span></li><li class="_h6XR"><span><a href="/api/documentation?scrollTo=assumption-FormulaSolve" class="_3BQD orange19RedHover _xzt6 _hCSh sc-34cb55e4-2 sc-34cb55e4-3 jojysd kPdgYi"><span class="sc-34cb55e4-0 hLNrE"><span>FormulaSolve</span></span></a> — choose which value to solve for in a formula (e.g. solving for sound speed in the Doppler shift formula)</span></li><li class="_h6XR"><span><a href="/api/documentation?scrollTo=assumption-FormulaVariable" class="_3BQD orange19RedHover _xzt6 _hCSh sc-34cb55e4-2 sc-34cb55e4-3 jojysd kPdgYi"><span class="sc-34cb55e4-0 hLNrE"><span>FormulaVariable</span></span></a> — supply a non-default value to a specific variable in a formula (e.g. give the &quot;Doppler shift&quot; query a source speed of 30 m/s)</span></li><li class="_h6XR"><span><a href="/api/documentation?scrollTo=assumption-FormulaVariableOption" class="_3BQD orange19RedHover _xzt6 _hCSh sc-34cb55e4-2 sc-34cb55e4-3 jojysd kPdgYi"><span class="sc-34cb55e4-0 hLNrE"><span>FormulaVariableOption</span></span></a> — choose among different representations of a variable or variables in a formula (e.g. the Doppler shift formula can split the frequency reduction factor into source and observed frequencies)</span></li><li class="_h6XR"><span><a href="/api/documentation?scrollTo=assumption-FormulaVariableInclude" class="_3BQD orange19RedHover _xzt6 _hCSh sc-34cb55e4-2 sc-34cb55e4-3 jojysd kPdgYi"><span class="sc-34cb55e4-0 hLNrE"><span>FormulaVariableInclude</span></span></a> — choose extra variables to include in a formula (e.g. &quot;Doppler shift&quot; can also include the observer&#x27;s speed and wind speed)</span></li></ul></ul></div></div><div><h2 id="structure-of-assumptions"><div class="_UX7b"><span>Structure of Assumptions</span></div></h2></div><div><h2 id="structure-of-assumptions"><div class="_4aml"><span>On the website, the space just above the first pod is used to describe assumptions used and give the user the option of changing them. Clicking any of the links in this area will prompt Wolfram|Alpha to send a new query based on the given information. Here is the assumptions area from the result for &quot;pi&quot;:</span></div></h2></div><div><div><img src="/_next/static/images/13-assumptions_3yJbrgot.png" alt="Subpod states of &quot;Show formula&quot; button image" class="_qxSu"/></div></div><div><h2 id="structure-of-assumptions"><div class="_4aml"><span>The API makes this same information available via the <span class="_HR3c"><span>&lt;assumptions&gt;</span></span> element, which, if present, is a top-level subelement of <span class="_HR3c"><span>&lt;queryresult&gt;</span></span>. Each assumption is represented as a separate <span class="_HR3c"><span>&lt;assumption&gt;</span></span> subelement containing a sequence of <span class="_HR3c"><span>&lt;value&gt;</span></span> subelements, one for each possible value of the assumption. The <span class="_HR3c"><span>&lt;assumption&gt;</span></span> element has a <span class="_v_lT"><span>type</span></span> attribute that tells you what class of assumption it is. In this example, it is a &quot;Clash&quot; assumption, which is generated when a word in the query can refer to multiple different entities. Here is the <span class="_HR3c"><span>&lt;assumptions&gt;</span></span> element in the &quot;pi&quot; query:</span></div></h2></div><div><h2 id="structure-of-assumptions"><div class="_S_tS"><span>&lt;assumptions count=&quot;1&quot;&gt;
  &lt;assumption type=&quot;Clash&quot; word=&quot;pi&quot; template=&quot;Assuming &quot;${word}&quot; is ${desc1}. Use as ${desc2} instead&quot; count=&quot;6&quot;&gt;
    &lt;value name=&quot;NamedConstant&quot; desc=&quot;a mathematical constant&quot; input=&quot;*C.pi-_*NamedConstant-&quot;/&gt;
    &lt;value name=&quot;Character&quot; desc=&quot;a character&quot; input=&quot;*C.pi-_*Character-&quot;/&gt;
    &lt;value name=&quot;MathWorld&quot; desc=&quot; referring to a mathematical definition&quot; input=&quot;*C.pi-_*MathWorld-&quot;/&gt;
    &lt;value name=&quot;MathWorldClass&quot; desc=&quot;a class of mathematical terms&quot; input=&quot;*C.pi-_*MathWorldClass-&quot;/&gt;
    &lt;value name=&quot;Movie&quot; desc=&quot;a movie&quot; input=&quot;*C.pi-_*Movie-&quot;/&gt;
    &lt;value name=&quot;Word&quot; desc=&quot;a word&quot; input=&quot;*C.pi-_*Word-&quot;/&gt;
  &lt;/assumption&gt;
&lt;/assumptions&gt;</span></div></h2></div><div><h2 id="structure-of-assumptions"><div class="_4aml"><span>Each <span class="_HR3c"><span>&lt;value&gt;</span></span> element has three attributes: <span class="_v_lT"><span>name</span></span>, which is a unique internal identifier (often with some descriptive value to the programmer); <span class="_v_lT"><span>desc</span></span>, which is a textual description suitable for displaying to users; and <span class="_v_lT"><span>input</span></span>, which gives the exact parameter value needed to invoke this assumption in a subsequent query. The <span class="_v_lT"><span>template</span></span> attribute shows the natural language statement normally displayed by the Wolfram|Alpha website to allow users to alter the current query. In this example, ${word} refers to the input, &quot;pi&quot;, ${desc1} refers to the current interpretation of &quot;a mathematical constant&quot; and ${desc2} refers to a new interpretation (e.g. &quot;a character&quot; or &quot;a movie&quot;). These values are populated from information within the XML, with each ${wordX} drawing from the &quot;word&quot; attribute of the <span class="_HR3c"><span>&lt;assumption&gt;</span></span> element and each ${descX} drawing from the &quot;desc&quot; attributes of individual <span class="_HR3c"><span>&lt;value&gt;</span></span> elements. The first-listed <span class="_HR3c"><span>&lt;value&gt;</span></span> element always names the assumption value that was in effect for the current query.</span></div></h2></div><div><h2 id="structure-of-assumptions"><div class="_4aml"><span>Many other assumption types exist. For instance, Wolfram|Alpha interprets the query &quot;12/5/1999&quot; as a date; however, it&#x27;s ambiguous whether this is written in the order month/day/year or day/month/year, so an assumption is generated. Here is the relevant &lt;assumption&gt; element, which has type &quot;DateOrder&quot;. The month/day/year value is listed first, which means that it is the value that was used to get the current result:</span></div></h2></div><div><h2 id="structure-of-assumptions"><div class="_S_tS"><span>&lt;assumption type=&quot;DateOrder&quot; template=&quot;Assuming ${desc1}. Use ${desc2} instead&quot; count=&quot;2&quot;&gt;
  <span class="_v_lT"><span>&lt;value name=&quot;MonthDayYear&quot; desc=&quot;month/day/year&quot; input=&quot;DateOrder_**Month.Day.Year--&quot;/&gt;</span></span>
  &lt;value name=&quot;DayMonthYear&quot; desc=&quot;day/month/year&quot; input=&quot;DateOrder_**Day.Month.Year--&quot;/&gt;
&lt;/assumption&gt;</span></div></h2></div><div><h2 id="structure-of-assumptions"><div class="_4aml"><span>The next section includes a listing of the main assumption types that can be generated, with examples. Note that formula input assumptions are covered in the <a href="/api/documentation?scrollTo=formulas-with-input-fields" class="_3BQD orange19RedHover _xzt6 _hCSh sc-34cb55e4-2 sc-34cb55e4-3 jojysd kPdgYi"><span class="sc-34cb55e4-0 hLNrE"><span>Formulas with Input Fields</span></span></a> section.</span></div></h2></div><div><h2 id="applying-assumptions"><div class="_UX7b"><span>Applying Assumptions</span></div></h2></div><div><h2 id="applying-assumptions"><div class="_4aml"><span>To apply an assumption in a query, use the <span class="_v_lT"><span>assumption</span></span> parameter. The value you pass for this parameter is the same as the string found in the input attribute of a <span class="_HR3c"><span>&lt;value&gt;</span></span> element returned from a previous query. Here is how to invoke the query &quot;pi&quot;, but specify that you want pi treated as the name of a movie. The assumption string here was taken from the earlier <span class="_HR3c"><span>&lt;assumptions&gt;</span></span> output for this query:</span></div></h2></div><div><h2 id="applying-assumptions"><div class="_S_tS"><span>http://api.wolframalpha.com/v2/query?appid=DEMO&amp;input=pi<span class="_v_lT"><span>&amp;assumption=*C.pi-_*Movie-</span></span></span></div></h2></div><div><h2 id="applying-assumptions"><div class="_4aml"><span>Here is how you would modify the &quot;12/5/1999&quot; query to change the date order to day/month/year:</span></div></h2></div><div><h2 id="applying-assumptions"><div class="_S_tS"><span>http://api.wolframalpha.com/v2/query?appid=DEMO&amp;input=12%2F5%2F1999<span class="_v_lT"><span>&amp;assumption=DateOrder_**Day.Month.Year--</span></span></span></div></h2></div><div><h2 id="applying-assumptions"><div class="_4aml"><span>The values for the assumption parameter are complicated-looking strings, but you don&#x27;t have to understand their syntax—just use the tokens that you are given in the <span class="_HR3c"><span>&lt;assumptions&gt;</span></span> output of a previous query. You can apply more than one assumption in a given query by including multiple &quot;assumption=value&quot; specifications in the URL.</span></div></h2></div><div><div><div class="_1EgR"><span>Clash</span></div></div></div><div><h2 id="applying-assumptions"><div class="_4aml"><span>The <span class="_v_lT"><span>Clash</span></span> assumption is generated when a word can represent different categories of things, such as &quot;pi&quot; being treated as a mathematical constant, a movie, a character or simply as a word. Here is a typical example of a Clash <span class="_HR3c"><span>&lt;assumption&gt;</span></span> element, generated from the query &quot;pi&quot;:</span></div></h2></div><div><h2 id="applying-assumptions"><div class="_S_tS"><span>&lt;assumptions count=&quot;1&quot;&gt;
  &lt;assumption <span class="_v_lT"><span>type=&quot;Clash&quot;</span></span> word=&quot;pi&quot; template=&quot;Assuming &quot;${word}&quot; is ${desc1}. Use as ${desc2} instead&quot; count=&quot;6&quot;&gt;
    &lt;value name=&quot;NamedConstant&quot; desc=&quot;a mathematical constant&quot; input=&quot;*C.pi-_*NamedConstant-&quot;/&gt;
    &lt;value name=&quot;Character&quot; desc=&quot;a character&quot; input=&quot;*C.pi-_*Character-&quot;/&gt;
    &lt;value name=&quot;MathWorld&quot; desc=&quot; referring to a mathematical definition&quot; input=&quot;*C.pi-_*MathWorld-&quot;/&gt;
    &lt;value name=&quot;MathWorldClass&quot; desc=&quot;a class of mathematical terms&quot; input=&quot;*C.pi-_*MathWorldClass-&quot;/&gt;
    &lt;value name=&quot;Movie&quot; desc=&quot;a movie&quot; input=&quot;*C.pi-_*Movie-&quot;/&gt;
    &lt;value name=&quot;Word&quot; desc=&quot;a word&quot; input=&quot;*C.pi-_*Word-&quot;/&gt;
  &lt;/assumption&gt;
&lt;/assumptions&gt;</span></div></h2></div><div><div><div class="_1EgR"><span>MultiClash</span></div></div></div><div><h2 id="applying-assumptions"><div class="_4aml"><span>The <span class="_v_lT"><span>MultiClash</span></span> assumption is a type of clash where multiple overlapping strings can have different interpretations. An example is the query &quot;delta sigma&quot;, where the whole phrase can be interpreted as a formula, or the word &quot;delta&quot; can be interpreted as a financial entity, a variable or an administrative division:</span></div></h2></div><div><h2 id="applying-assumptions"><div class="_S_tS"><span>&lt;assumptions count=&quot;1&quot;&gt;
  &lt;assumption <span class="_v_lT"><span>type=&quot;MultiClash&quot;</span></span> word=&quot;&quot; template=&quot;Assuming ${word1} is referring to ${desc1}. Use &quot;${word2}&quot; as ${desc2}. Use &quot;${word3}&quot; as ${desc3}. Use &quot;${word4}&quot; as ${desc4}.&quot; count=&quot;4&quot;&gt;
    &lt;value name=&quot;Financial&quot; word=&quot;delta&quot; desc=&quot;a financial entity&quot; input=&quot;*MC.%7E-_*Financial-&quot;/&gt;
    &lt;value name=&quot;Variable&quot; word=&quot;delta&quot; desc=&quot;a variable&quot; input=&quot;*MC.%7E-_*Variable-&quot;/&gt;
    &lt;value name=&quot;AdministrativeDivision&quot; word=&quot;delta&quot; desc=&quot;an administrative division&quot; input=&quot;*MC.%7E-_*AdministrativeDivision-&quot;/&gt;
    &lt;value name=&quot;Formula&quot; word=&quot;&quot; desc=&quot;a formula&quot; input=&quot;*MC.%7E-_*Formula-&quot;/&gt;
  &lt;/assumption&gt;
&lt;/assumptions&gt;</span></div></h2></div><div><h2 id="applying-assumptions"><div class="_4aml"><span>In contrast to Clash, the MultiClash assumption can interpret phrases in addition to individual words.</span></div></h2></div><div><div><div class="_1EgR"><span>SubCategory</span></div></div></div><div><h2 id="applying-assumptions"><div class="_4aml"><span>The <span class="_v_lT"><span>SubCategory</span></span> assumption is similar to the Clash type in that a word can refer to multiple types of entities, but for SubCategory all the interpretations are within the same overall category. An example is the query &quot;hamburger&quot;, which generates a SubCategory assumption for different types of hamburger (basic hamburger, McDonald&#x27;s hamburger, Burger King hamburger, etc.) The hamburger query also generates a Clash assumption over whether hamburger should be treated as a type of food or a simple word, but given that Wolfram|Alpha is treating hamburger as a type of food in this query, it also can be resolved into subcategories of hamburger. Here is the SubCategory <span class="_HR3c"><span>&lt;assumption&gt;</span></span> element from the &quot;hamburger&quot; query:</span></div></h2></div><div><h2 id="applying-assumptions"><div class="_S_tS"><span>&lt;assumption <span class="_v_lT"><span>type=&quot;SubCategory&quot;</span></span> word=&quot;hamburger&quot; template=&quot;Assuming ${desc1}. Use ${desc2} instead&quot; count=&quot;8&quot;&gt;
  &lt;value name=&quot;Hamburger&quot; desc=&quot;hamburger&quot; input=&quot;*DPClash.ExpandedFoodE.hamburger-_*Hamburger-&quot;/&gt;
  &lt;value name=&quot;GroundBeefPatty&quot; desc=&quot;ground beef patty&quot; input=&quot;*DPClash.ExpandedFoodE.hamburger-_*GroundBeefPatty-&quot;/&gt;
  &lt;value name=&quot;GroundBeef&quot; desc=&quot;ground beef&quot; input=&quot;*DPClash.ExpandedFoodE.hamburger-_*GroundBeef-&quot;/&gt;
   ... Remaining elements deleted for brevity ...
&lt;/assumption&gt;</span></div></h2></div><div><div><div class="_1EgR"><span>Attribute</span></div></div></div><div><h2 id="applying-assumptions"><div class="_4aml"><span>You can think of the <span class="_v_lT"><span>Attribute</span></span> assumption as the next step down in the sequence of Clash and SubCategory. Wolfram|Alpha emits an Attribute assumption to allow you to modify an attribute of an already well-characterized entity. In the query &quot;hamburger&quot;, Wolfram|Alpha assumes you mean that hamburger is a food item (although it gives you a Clash assumption to modify this) and that you mean a &quot;basic&quot; hamburger (and it gives you a SubCategory assumption to make this, say, a McDonald&#x27;s hamburger). It also gives you an Attribute assumption to modify details like patty size and whether it has condiments. Here is the Attribute <span class="_HR3c"><span>&lt;assumption&gt;</span></span> element from the &quot;hamburger&quot; query:</span></div></h2></div><div><h2 id="applying-assumptions"><div class="_S_tS"><span>&lt;assumption <span class="_v_lT"><span>type=&quot;Attribute&quot;</span></span> word=&quot;Hamburger&quot; template=&quot;Assuming ${desc1}. Use ${desc2} instead&quot; count=&quot;9&quot;&gt;
  &lt;value name=&quot;Hamburger&quot; 
         desc=&quot;any type of hamburger&quot; 
         input=&quot;*EAC.ExpandedFood.Hamburger-_**a.Hamburger--&quot;/&gt;
  &lt;value name=&quot;{Food:FoodSize -&gt; Food:LargePatty, Food:PattyCount -&gt; Food:Single, Food:Variety -&gt; Food:FastFood, Food:Variety -&gt; Food:Plain}&quot; 
         desc=&quot;hamburger, fast food, large patty, plain, single&quot;
         input=&quot;*EAC.ExpandedFood.Hamburger-_**Hamburger.*Food%3AFoodSize_Food%3ALargePatty.Food%3APattyCount_Food%3ASingle.Food%3AVariety_Food%3AFastFood.Food%3AVariety_Food%3APlain---&quot;/&gt;
  ... Remaining elements deleted for brevity ...
&lt;/assumption&gt;</span></div></h2></div><div><h2 id="applying-assumptions"><div class="_4aml"><span>The names and input values for Attribute assumptions can become rather cryptic, but the desc attributes are always given in natural language for clarity.</span></div></h2></div><div><div><div class="_1EgR"><span>Unit</span></div></div></div><div><h2 id="applying-assumptions"><div class="_4aml"><span>The <span class="_v_lT"><span>Unit</span></span> assumption is generated when a word is interpreted as a unit abbreviation, but it is ambiguous as to what unit it represents. An example is &quot;m&quot;, meaning either meters or minutes. Here is a typical example of a Unit <span class="_HR3c"><span>&lt;assumption&gt;</span></span> element, this generated from the query &quot;10 m&quot;:</span></div></h2></div><div><h2 id="applying-assumptions"><div class="_S_tS"><span>&lt;assumption <span class="_v_lT"><span>type=&quot;Unit&quot;</span></span> word=&quot;m&quot; template=&quot;Assuming ${desc1} for &quot;${word}&quot;. Use ${desc2} instead&quot; count=&quot;3&quot;&gt;
  &lt;value name=&quot;Meters&quot; desc=&quot;meters&quot; input=&quot;UnitClash_*m.*Meters--&quot;/&gt;
  &lt;value name=&quot;MinimsUS&quot; desc=&quot;US minims of volume&quot; input=&quot;UnitClash_*m.*MinimsUS--&quot;/&gt;
  &lt;value name=&quot;Minutes&quot; desc=&quot;minutes of time&quot; input=&quot;UnitClash_*m.*Minutes--&quot;/&gt;
&lt;/assumption&gt;</span></div></h2></div><div><div><div class="_1EgR"><span>AngleUnit</span></div></div></div><div><h2 id="applying-assumptions"><div class="_4aml"><span>The <span class="_v_lT"><span>AngleUnit</span></span> assumption is generated when a number is interpreted as a unit of angle, but it is ambiguous whether it should be interpreted as degrees or radians. This assumption type always has two <span class="_HR3c"><span>&lt;value&gt;</span></span> elements, one for the assumption of degrees and the other for the assumption of radians. Here is the AngleUnit <span class="_HR3c"><span>&lt;assumption&gt;</span></span> element generated from the query &quot;sin(30)&quot;:</span></div></h2></div><div><h2 id="applying-assumptions"><div class="_S_tS"><span>&lt;assumption <span class="_v_lT"><span>type=&quot;AngleUnit&quot;</span></span> template=&quot;Assuming trigonometric arguments in ${desc1}. Use ${desc2} instead&quot; count=&quot;2&quot;&gt;
  &lt;value name=&quot;D&quot; desc=&quot;degrees&quot; input=&quot;TrigRD_D&quot;/&gt;
  &lt;value name=&quot;R&quot; desc=&quot;radians&quot; input=&quot;TrigRD_R&quot;/&gt;
&lt;/assumption&gt;</span></div></h2></div><div><div><div class="_1EgR"><span>Function</span></div></div></div><div><h2 id="applying-assumptions"><div class="_4aml"><span>The <span class="_v_lT"><span>Function</span></span> assumption is generated when a word is interpreted as referring to a mathematical function, but it is ambiguous which function is meant. An example is &quot;log&quot;, meaning either log base e or log base 10. Here is a typical example of a Function <span class="_HR3c"><span>&lt;assumption&gt;</span></span> element, this generated from the query &quot;log 20&quot;:</span></div></h2></div><div><h2 id="applying-assumptions"><div class="_S_tS"><span>&lt;assumption <span class="_v_lT"><span>type=&quot;Function&quot;</span></span> word=&quot;log&quot; template=&quot;Assuming &quot;${word}&quot; is ${desc1}. Use ${desc2} instead&quot; count=&quot;2&quot;&gt;
  &lt;value name=&quot;Log&quot; desc=&quot;the natural logarithm&quot; input=&quot;*FunClash.log-_*Log.Log10-&quot;/&gt;
  &lt;value name=&quot;Log10&quot; desc=&quot;the base 10 logarithm&quot; input=&quot;*FunClash.log-_*Log10.Log-&quot;/&gt;
&lt;/assumption&gt;</span></div></h2></div><div><div><div class="_1EgR"><span>TimeAMOrPM</span></div></div></div><div><h2 id="applying-assumptions"><div class="_4aml"><span>When Wolfram|Alpha recognizes a string in a query as referring to a time, and it is ambiguous as to whether it represents AM or PM, a <span class="_v_lT"><span>TimeAMOrPM</span></span> assumption is generated. Here is the <span class="_HR3c"><span>&lt;assumption&gt;</span></span> element from the query &quot;3:00&quot;:</span></div></h2></div><div><h2 id="applying-assumptions"><div class="_S_tS"><span>&lt;assumption <span class="_v_lT"><span>type=&quot;TimeAMOrPM&quot;</span></span> template=&quot;Assuming ${desc1}. Use ${desc2} instead&quot; count=&quot;2&quot;&gt;
  &lt;value name=&quot;pm&quot; desc=&quot;3:00 PM&quot; input=&quot;*TimeAMOrPM.*%7FAutomatic.%7FAutomatic.%7FAutomatic.%7F3.%7F0.%7FAutomatic--_pm&quot;/&gt;
  &lt;value name=&quot;am&quot; desc=&quot;AM&quot; input=&quot;*TimeAMOrPM.*%7FAutomatic.%7FAutomatic.%7FAutomatic.%7F3.%7F0.%7FAutomatic--_am&quot;/&gt;
&lt;/assumption&gt;</span></div></h2></div><div><h2 id="applying-assumptions"><div class="_4aml"><span>There are always two <span class="_HR3c"><span>&lt;value&gt;</span></span> elements in this assumption: one for am and one for pm. As always, the first-listed one is the current value for the assumption, and this will depend on what time of day the query is executed.</span></div></h2></div><div><div><div class="_1EgR"><span>DateOrder</span></div></div></div><div><h2 id="applying-assumptions"><div class="_4aml"><span>When Wolfram|Alpha recognizes a string in a query as referring to a date in numerical format, and it is ambiguous as to the order of the day, month and year elements (such as 12/11/1996), a <span class="_HR3c"><span>&lt;assumption&gt;</span></span> assumption is generated. Here is the <span class="_HR3c"><span>&lt;assumption&gt;</span></span> element from the query &quot;12/11/1996&quot;:</span></div></h2></div><div><h2 id="applying-assumptions"><div class="_S_tS"><span>&lt;assumption <span class="_v_lT"><span>type=&quot;DateOrder&quot;</span></span> template=&quot;Assuming ${desc1}. Use ${desc2} instead&quot; count=&quot;2&quot;&gt;
  &lt;value name=&quot;MonthDayYear&quot; desc=&quot;month/day/year&quot; input=&quot;DateOrder_**Month.Day.Year--&quot;/&gt;
  &lt;value name=&quot;DayMonthYear&quot; desc=&quot;day/month/year&quot; input=&quot;DateOrder_**Day.Month.Year--&quot;/&gt;
&lt;/assumption&gt;</span></div></h2></div><div><h2 id="applying-assumptions"><div class="_4aml"><span>The number and order of <span class="_HR3c"><span>&lt;value&gt;</span></span> elements depends on specifics of the date string in the query, and also on the locale of the caller. The name attributes will be a combination of day, month and year in the corresponding order.</span></div></h2></div><div><div><div class="_1EgR"><span>MortalityYearDOB</span></div></div></div><div><h2 id="applying-assumptions"><div class="_4aml"><span>The <span class="_v_lT"><span>MortalityYearDOB</span></span> assumption is a very specialized type generated in some mortality-related queries, such as &quot;life expectancy France 1910&quot;. The year 1910 could refer to the year of the data (that is, life expectancy data from France in the year 1910), or the year of birth (&quot;life expectancy data in France for people born in 1910&quot;). The MortalityYearDOB assumption distinguishes between those two meanings. Here is the <span class="_HR3c"><span>&lt;assumption&gt;</span></span> element from that query:</span></div></h2></div><div><h2 id="applying-assumptions"><div class="_S_tS"><span>&lt;assumption <span class="_v_lT"><span>type=&quot;MortalityYearDOB&quot;</span></span> word=&quot;1910&quot; template=&quot;Assuming ${word} is ${desc1}. Use as ${desc2} instead&quot; count=&quot;2&quot;&gt;
  &lt;value name=&quot;Year&quot; desc=&quot;the year of the data&quot; input=&quot;MortYrDOB_*Yr.1910-&quot;/&gt;
  &lt;value name=&quot;DateOfBirth&quot; desc=&quot;the year of birth&quot; input=&quot;MortYrDOB_*DOB.1910-&quot;/&gt;
&lt;/assumption&gt;</span></div></h2></div><div><h2 id="applying-assumptions"><div class="_4aml"><span>The MortalityYearDOB assumption always has two <span class="_HR3c"><span>&lt;value&gt;</span></span> elements: one named &quot;Year&quot; and one named &quot;DateOfBirth.&quot;</span></div></h2></div><div><div><div class="_1EgR"><span>ListOrTimes</span></div></div></div><div><h2 id="applying-assumptions"><div class="_4aml"><span>The <span class="_v_lT"><span>ListOrTimes</span></span> assumption is generated when a query contains elements separated by spaces and it is unclear whether this is to be interpreted as multiplication or a list of values. For example, the query &quot;3 x&quot; is interpreted as 3×x, but it could also be the list {3, x}. Here is the ListOrTimes <span class="_HR3c"><span>&lt;assumption&gt;</span></span> element from that query:</span></div></h2></div><div><h2 id="applying-assumptions"><div class="_S_tS"><span>&lt;assumption <span class="_v_lT"><span>type=&quot;ListOrTimes&quot;</span></span> template=&quot;Assuming ${desc1}. Use ${desc2} instead&quot; count=&quot;2&quot;&gt;
  &lt;value name=&quot;Times&quot; desc=&quot;multiplication&quot; input=&quot;ListOrTimes_Times&quot;/&gt;
  &lt;value name=&quot;List&quot; desc=&quot;a list&quot; input=&quot;ListOrTimes_List&quot;/&gt;
&lt;/assumption&gt;</span></div></h2></div><div><h2 id="applying-assumptions"><div class="_4aml"><span>The ListOrTimes assumption always has two <span class="_HR3c"><span>&lt;value&gt;</span></span> elements: one named &quot;List&quot; and one named &quot;Times.&quot; There is no word attribute in the <span class="_HR3c"><span>&lt;assumption&gt;</span></span> element for this type.</span></div></h2></div><div><div><div class="_1EgR"><span>ListOrNumber</span></div></div></div><div><h2 id="applying-assumptions"><div class="_4aml"><span>The <span class="_v_lT"><span>ListOrNumber</span></span> assumption is generated when a query contains a string that could be either a number with a comma as a thousands separator or a list of two separate numbers, such as the query &quot;1,234.5.&quot; Here is the ListOrNumber <span class="_HR3c"><span>&lt;assumption&gt;</span></span> element from that query:</span></div></h2></div><div><h2 id="applying-assumptions"><div class="_S_tS"><span>&lt;assumption <span class="_v_lT"><span>type=&quot;ListOrNumber&quot;</span></span> word=&quot;1,234.5&quot; template=&quot;Assuming ${word} is a ${desc1}. Use ${word} as a ${desc2} instead&quot; count=&quot;2&quot;&gt;
  &lt;value name=&quot;Number&quot; desc=&quot;number&quot; input=&quot;ListOrNumber_*Number.1%2C234%21.5-&quot;/&gt;
  &lt;value name=&quot;List&quot; desc=&quot;list&quot; input=&quot;ListOrNumber_*List.1%2C234%21.5-&quot;/&gt;
&lt;/assumption&gt;</span></div></h2></div><div><h2 id="applying-assumptions"><div class="_4aml"><span>The ListOrNumber assumption always has two <span class="_HR3c"><span>&lt;value&gt;</span></span> elements: one named &quot;List&quot; and one named &quot;Number.&quot;</span></div></h2></div><div><div><div class="_1EgR"><span>CoordinateSystem</span></div></div></div><div><h2 id="applying-assumptions"><div class="_4aml"><span>The <span class="_v_lT"><span>CoordinateSystem</span></span> assumption is generated when it is ambiguous which coordinate system a query refers to. For example, the query &quot;div(x rho,y z,z x)&quot; mixes elements from standard notation for 3D Cartesian coordinates and cylindrical coordinates. Here is the CoordinateSystem <span class="_HR3c"><span>&lt;assumption&gt;</span></span> element from that query:</span></div></h2></div><div><h2 id="applying-assumptions"><div class="_S_tS"><span>&lt;assumption <span class="_v_lT"><span>type=&quot;CoordinateSystem&quot;</span></span> template=&quot;Using ${desc1}. Use ${desc2} instead&quot; count=&quot;2&quot;&gt;
  &lt;value name=&quot;Cartesian3D&quot; desc=&quot;3D Cartesian coordinates&quot; input=&quot;CoordinateSystem_*Cartesian3D-&quot;/&gt;
  &lt;value name=&quot;Cylindrical3D&quot; desc=&quot;cylindrical coordinates&quot; input=&quot;CoordinateSystem_*Cylindrical3D-&quot;/&gt;
&lt;/assumption&gt;</span></div></h2></div><div><h2 id="applying-assumptions"><div class="_4aml"><span>The possible values for the name attribute are Cartesian2D, Cartesian3D, Polar2D, Cylindrical3D, Spherical3D, General2D and General3D. There is no word attribute in the <span class="_HR3c"><span>&lt;assumption&gt;</span></span> element for this type.</span></div></h2></div><div><div><div class="_1EgR"><span>I</span></div></div></div><div><h2 id="applying-assumptions"><div class="_4aml"><span>The <span class="_v_lT"><span>I</span></span> assumption is generated when a query uses &quot;i&quot; in a way that could refer to a simple variable name (similar to, say, &quot;x&quot;) or the mathematical constant equal to the square root of -1. Here is what this assumption looks like:</span></div></h2></div><div><h2 id="applying-assumptions"><div class="_S_tS"><span>&lt;assumption <span class="_v_lT"><span>type=&quot;I&quot;</span></span> template=&quot;Assuming ${desc1}. Use ${desc2} instead&quot; count=&quot;2&quot;&gt;
  &lt;value name=&quot;ImaginaryI&quot; desc=&quot;i is the imaginary unit&quot; input=&quot;i_ImaginaryI&quot;/&gt;
  &lt;value name=&quot;Variable&quot; desc=&quot;i is a variable&quot; input=&quot;i_Variable&quot;/&gt;
&lt;/assumption&gt;</span></div></h2></div><div><h2 id="applying-assumptions"><div class="_4aml"><span>The I assumption always has two <span class="_HR3c"><span>&lt;value&gt;</span></span> elements: one named &quot;ImaginaryI&quot; and one named &quot;Variable&quot;. There is no word attribute in the <span class="_HR3c"><span>&lt;assumption&gt;</span></span> element for this type, as it always refers to the letter &quot;i&quot;.</span></div></h2></div><div><div><div class="_1EgR"><span>NumberBase</span></div></div></div><div><h2 id="applying-assumptions"><div class="_4aml"><span>The <span class="_v_lT"><span>NumberBase</span></span> assumption is generated when a number could be interpreted as being written in more than one base, such as &quot;1011001110&quot;, which looks like a binary number (base 2) but could also be base 10 (it could be other bases as well, but those are rarely used and thus do not occur as assumption values). Here is the NumberBase <span class="_HR3c"><span>&lt;assumption&gt;</span></span> element from that query:</span></div></h2></div><div><h2 id="applying-assumptions"><div class="_S_tS"><span>&lt;assumption <span class="_v_lT"><span>type=&quot;NumberBase&quot;</span></span> word=&quot;1011001110&quot; template=&quot;Assuming ${word} is ${desc1}. Use ${desc2} instead&quot; count=&quot;2&quot;&gt;
  &lt;value name=&quot;Binary&quot; desc=&quot;binary&quot; input=&quot;NumberBase_*Binary.1011001110-&quot;/&gt;
  &lt;value name=&quot;Decimal&quot; desc=&quot;decimal&quot; input=&quot;NumberBase_*Decimal.1011001110-&quot;/&gt;
&lt;/assumption&gt;</span></div></h2></div><div><h2 id="applying-assumptions"><div class="_4aml"><span>At the present time, the only possible <span class="_HR3c"><span>&lt;value&gt;</span></span> elements for this assumption are &quot;Decimal&quot; and &quot;Binary&quot;.</span></div></h2></div><div><div><div class="_1EgR"><span>MixedFraction</span></div></div></div><div><h2 id="applying-assumptions"><div class="_4aml"><span>The <span class="_v_lT"><span>MixedFraction</span></span> assumption is generated when a string could be interpreted as either a mixed fraction or as multiplication, such as &quot;3 1/2&quot;. Here is the MixedFraction <span class="_HR3c"><span>&lt;assumption&gt;</span></span> element from that query:</span></div></h2></div><div><h2 id="applying-assumptions"><div class="_S_tS"><span>&lt;assumption <span class="_v_lT"><span>type=&quot;MixedFraction&quot;</span></span> word=&quot;3 1/2&quot; template=&quot;Assuming ${word} is a ${desc1}. Use ${word} as a ${desc2} instead&quot; count=&quot;2&quot;&gt;
  &lt;value name=&quot;Mix&quot; desc=&quot;mixed fraction&quot; input=&quot;MixFrac_*Mix.3+1%2F2-&quot;/&gt;
  &lt;value name=&quot;Mult&quot; desc=&quot;product&quot; input=&quot;MixFrac_*Mult.3+1%2F2-&quot;/&gt;
&lt;/assumption&gt;</span></div></h2></div><div><h2 id="applying-assumptions"><div class="_4aml"><span>The MixedFraction assumption always has two <span class="_HR3c"><span>&lt;value&gt;</span></span> elements: one named &quot;Mix&quot; and one named &quot;Mult&quot;.</span></div></h2></div><div><div><div class="_1EgR"><span>TideStation</span></div></div></div><div><h2 id="applying-assumptions"><div class="_4aml"><span>The <span class="_v_lT"><span>TideStation</span></span> assumption is generated in tide-related queries. It distinguishes between different tide stations. Here is an example from the &quot;tides Seattle&quot; query:</span></div></h2></div><div><h2 id="applying-assumptions"><div class="_S_tS"><span>&lt;assumption <span class="_v_lT"><span>type=&quot;TideStation&quot;</span></span> template=&quot;Using ${desc1}. Use ${desc2} instead&quot; count=&quot;5&quot;&gt;
  &lt;value name=&quot;PrimaryStation&quot; desc=&quot;nearest primary station&quot; input=&quot;TideStation_PrimaryStation&quot;/&gt;
  &lt;value name=&quot;NearestStation&quot; desc=&quot;nearest station&quot; input=&quot;TideStation_NearestStation&quot;/&gt;
  &lt;value name=&quot;Seattle, Washington (1.4 mi)&quot; desc=&quot;Seattle, Washington (1.4 mi)&quot; input=&quot;TideStation_*UnitedStates.9447130.PrimaryStation-&quot;/&gt;
  &lt;value name=&quot;Bangor, Washington (19.6 mi)&quot; desc=&quot;Bangor, Washington (19.6 mi)&quot; input=&quot;TideStation_*UnitedStates.9445133.PrimaryStation-&quot;/&gt;
  &lt;value name=&quot;Tacoma, Washington (24.6 mi)&quot; desc=&quot;Tacoma, Washington (24.6 mi)&quot; input=&quot;TideStation_*UnitedStates.9446484.PrimaryStation-&quot;/&gt;
&lt;/assumption&gt;</span></div></h2></div><div><h2 id="applying-assumptions"><div class="_4aml"><span>Note that the default station for these queries is the nearest station to the caller&#x27;s location.</span></div></h2></div><div><h2 id="formulas-with-input-fields"><div class="_UX7b"><span>Formulas with Input Fields</span></div></h2></div><div><h2 id="formulas-with-input-fields"><div class="_4aml"><span>Some Wolfram|Alpha inputs are interpreted as referring to mathematical formulas. In such cases, the Wolfram|Alpha website provides a user interface for controlling aspects of the formula, such as what variable is being solved for and what values the variables should be given. Formula solving is part of the Wolfram|Alpha Assumptions facility, and the API gives you complete control over all aspects of formula manipulation.</span></div></h2></div><div><h2 id="formulas-with-input-fields"><div class="_4aml"><span>Here is the <span class="_HR3c"><span>&lt;assumption&gt;</span></span> section from the API output for the &quot;Doppler shift&quot; query:</span></div></h2></div><div><h2 id="formulas-with-input-fields"><div class="_S_tS"><span>&lt;assumptions count=&quot;7&quot;&gt;
  &lt;assumption type=&quot;Clash&quot; word=&quot;Doppler shift&quot; template=&quot;Assuming &quot;${word}&quot; is ${desc1}. Use as ${desc2} instead&quot; count=&quot;3&quot;&gt;...&lt;/assumption&gt;
  &lt;assumption type=&quot;FormulaSolve&quot; template=&quot;Calculate ${desc1}&quot; count=&quot;3&quot;&gt;
    &lt;value name=&quot;DopplerShift.DopplerRatio&quot; desc=&quot;frequency reduction factor&quot; input=&quot;*FS-_**DopplerShift.DopplerRatio--&quot;/&gt;
    &lt;value name=&quot;DopplerShift.vs&quot; desc=&quot;speed of the source away from the observer&quot; input=&quot;*FS-_**DopplerShift.vs--&quot;/&gt;
    &lt;value name=&quot;DopplerShift.c&quot; desc=&quot;sound speed&quot; input=&quot;*FS-_**DopplerShift.c--&quot;/&gt;
  &lt;/assumption&gt;
  &lt;assumption type=&quot;FormulaSelect&quot; template=&quot;Assuming ${desc1}. Use ${desc2} instead&quot; count=&quot;2&quot;&gt;
    &lt;value name=&quot;DopplerShift&quot; desc=&quot;Doppler shift&quot; input=&quot;FSelect_*DopplerShift-&quot;/&gt;
    &lt;value name=&quot;RelativisticDopplerShift&quot; desc=&quot;relativistic Doppler shift&quot; input=&quot;FSelect_**RelativisticDopplerShift--&quot;/&gt;
  &lt;/assumption&gt;
  &lt;assumption type=&quot;FormulaVariable&quot; desc=&quot;speed of the source away from the observer&quot; current=&quot;1&quot; count=&quot;1&quot;&gt;
    &lt;value name=&quot;DopplerShift.vs&quot; desc=&quot;10 m/s&quot; valid=&quot;true&quot; input=&quot;*F.DopplerShift.vs-_10+m%2Fs&quot;/&gt;
  &lt;/assumption&gt;
  &lt;assumption type=&quot;FormulaVariable&quot; desc=&quot;sound speed&quot; current=&quot;1&quot; count=&quot;1&quot;&gt;
    &lt;value name=&quot;DopplerShift.c&quot; desc=&quot;340.3 m/s&quot; valid=&quot;true&quot; input=&quot;*F.DopplerShift.c-_340.3+m%2Fs&quot;/&gt;
  &lt;/assumption&gt;
  &lt;assumption type=&quot;FormulaVariableOption&quot; template=&quot;Assuming ${desc1}. Use ${desc2} instead&quot; count=&quot;2&quot;&gt;
    &lt;value name=&quot;DopplerShift.DopplerRatio&quot; desc=&quot;frequency reduction factor&quot; input=&quot;*FVarOpt-_**DopplerShift.DopplerRatio--&quot;/&gt;
    &lt;value name=&quot;DopplerShift.fo,DopplerShift.fs&quot; desc=&quot;frequency observed and frequency at the source&quot; input=&quot;*FVarOpt-_**DopplerShift.fo-.*DopplerShift.fs--&quot;/&gt;
  &lt;/assumption&gt;
  &lt;assumption type=&quot;FormulaVariableInclude&quot; template=&quot;Also include ${desc1}&quot; count=&quot;2&quot;&gt;
    &lt;value name=&quot;DopplerShift.vo&quot; desc=&quot;speed of the observer&quot; input=&quot;*FVarOpt-_**DopplerShift.vo-.*DopplerShift.DopplerRatio--&quot;/&gt;
    &lt;value name=&quot;DopplerShift.vw&quot; desc=&quot;wind speed&quot; input=&quot;*FVarOpt-_**DopplerShift.vw-.*DopplerShift.DopplerRatio--&quot;/&gt;
  &lt;/assumption&gt;
&lt;/assumptions&gt;</span></div></h2></div><div><h2 id="formulas-with-input-fields"><div class="_4aml"><span>Most of this output should be self-explanatory in the context of the earlier discussion of assumptions in general. Using the information in this output, you could build a user interface that allows your users to interact with the Doppler formula in exactly the same way as the Wolfram|Alpha website.</span></div></h2></div><div><h2 id="applying-formula-assumptions"><div class="_UX7b"><span>Applying Formula Assumptions</span></div></h2></div><div><h2 id="applying-formula-assumptions"><div class="_4aml"><span>You apply formula-related assumptions just like other types of assumptions—by using the value of an <span class="_HR3c"><span>&lt;assumption&gt;</span></span> element&#x27;s input attribute in a subsequent query. For example, to perform the Doppler shift query with wind speed as an added variable, you would use this URL:</span></div></h2></div><div><h2 id="applying-formula-assumptions"><div class="_S_tS"><span>http://api.wolframalpha.com/v2/query?appid=DEMO&amp;input=Doppler+shift<span class="_v_lT"><span>&amp;assumption=*FVarOpt-_**DopplerShift.vw-.*DopplerShift.DopplerRatio--</span></span></span></div></h2></div><div><h2 id="applying-formula-assumptions"><div class="_4aml"><span>You can specify as many assumptions as you want in a single query, which is often necessary when working with formulas (such as setting the value of multiple variables). To do this, include multiple <span class="_HR3c"><span>assumption=value</span></span> specifications in the URL.</span></div></h2></div><div><h2 id="formula-assumption-types"><div class="_UX7b"><span>Formula Assumption Types</span></div></h2></div><div><h2 id="formula-assumption-types"><div class="_4aml"><span>The following is a screenshot from the website for the query &quot;Doppler shift&quot;:</span></div></h2></div><div><div><img src="/_next/static/images/14-formula_assumption_types_3nP9E0AD.png" alt="Assumptions example image" class="_qxSu"/></div></div><div><h2 id="formula-assumption-types"><div class="_4aml"><span>The box at the top is part of the standard Assumptions section, with labels showing the names the API uses for these assumption types. This particular example shows all the formula-related assumptions that Wolfram|Alpha can produce; not all formulas will have all of these assumptions available. Here is a guide to the five different formula assumption types:</span></div></h2></div><div><div><div class="_1EgR"><span>FormulaSelect</span></div></div></div><div><h2 id="formula-assumption-types"><div class="_4aml"><span>Some queries have more than one formula that applies. The <span class="_v_lT"><span>FormulaSelect</span></span> assumption allows you to choose the one you want. In this Doppler example, you can choose the classical Doppler shift formula (the default) or the relativistic one:</span></div></h2></div><div><h2 id="formula-assumption-types"><div class="_S_tS"><span>&lt;assumption <span class="_v_lT"><span>type=&quot;FormulaSelect&quot;</span></span> template=&quot;Assuming ${desc1}. Use ${desc2} instead&quot; count=&quot;2&quot;&gt;
  &lt;value name=&quot;DopplerShift&quot; desc=&quot;Doppler shift&quot; input=&quot;FSelect_*DopplerShift-&quot;/&gt;
  &lt;value name=&quot;RelativisticDopplerShift&quot; desc=&quot;relativistic Doppler shift&quot; input=&quot;FSelect_**RelativisticDopplerShift--&quot;/&gt;
&lt;/assumption&gt;</span></div></h2></div><div><div><div class="_1EgR"><span>FormulaSolve</span></div></div></div><div><h2 id="formula-assumption-types"><div class="_4aml"><span>Formulas can be rearranged to solve for different variables. The <span class="_v_lT"><span>FormulaSolve</span></span> assumption lets you pick which one you want. In this example, the variables are the frequency reduction factor (<span class="_8rLA"><span>f</span></span><sub class="_6xTn _8rLA"><span>0</span></sub><span class="_8rLA"><span>/f</span></span><sub class="_6xTn _8rLA"><span>n</span></sub>, treated as a single entity), the speed of sound (c) and the speed of the source (<span class="_8rLA"><span>v</span></span><sub class="_6xTn _8rLA"><span>s</span></sub>). Notice in the Result pod it shows a value for frequency reduction factor, which is the current choice for the variable to solve for. If you were to choose a different variable to solve for, it would show that value in this pod:</span></div></h2></div><div><h2 id="formula-assumption-types"><div class="_S_tS"><span>&lt;assumption <span class="_v_lT"><span>type=&quot;FormulaSolve&quot;</span></span> template=&quot;Calculate ${desc1}&quot; count=&quot;3&quot;&gt;
  &lt;value name=&quot;DopplerShift.DopplerRatio&quot; desc=&quot;frequency reduction factor&quot; input=&quot;*FS-_**DopplerShift.DopplerRatio--&quot;/&gt;
  &lt;value name=&quot;DopplerShift.vs&quot; desc=&quot;speed of the source away from the observer&quot; input=&quot;*FS-_**DopplerShift.vs--&quot;/&gt;
  &lt;value name=&quot;DopplerShift.c&quot; desc=&quot;sound speed&quot; input=&quot;*FS-_**DopplerShift.c--&quot;/&gt;
&lt;/assumption&gt;</span></div></h2></div><div><div><div class="_1EgR"><span>FormulaVariable</span></div></div></div><div><h2 id="formula-assumption-types"><div class="_4aml"><span>The <span class="_v_lT"><span>FormulaVariable</span></span> assumption lets you supply a value for a variable in a formula. It corresponds to an input field or pull-down menu of choices on the website. You have to understand a few extra details when applying a FormulaVariable assumption. Let&#x27;s take a closer look at the <span class="_HR3c"><span>&lt;assumption&gt;</span></span> element from the &quot;Doppler shift&quot; query that deals with the value of the speed of the source:</span></div></h2></div><div><h2 id="formula-assumption-types"><div class="_S_tS"><span><span class="_v_lT"><span>&lt;assumption type=&quot;FormulaVariable&quot; desc=&quot;speed of the source away from the observer&quot; current=&quot;1&quot; count=&quot;1&quot;&gt;</span></span>
  &lt;value name=&quot;DopplerShift.vs&quot; 
         desc=&quot;10 m/s&quot; 
         valid=&quot;true&quot; 
         input=&quot;*F.DopplerShift.vs-_10+m%2Fs&quot;/&gt;
&lt;/assumption&gt;</span></div></h2></div><div><h2 id="formula-assumption-types"><div class="_4aml"><span>When you see such an assumption in output, you might choose to provide your users with an input field or other means to specify a value. The label for this input field would be the <span class="_v_lT"><span>desc</span></span> attribute of the <span class="_HR3c"><span>&lt;assumption&gt;</span></span> element. The <span class="_v_lT"><span>count</span></span> attribute gives the number of <span class="_HR3c"><span>&lt;value&gt;</span></span> elements. For variables that take an arbitrary value, typically entered via an input field, the count will always be 1, but for variables that take one of a fixed set of values, typically represented as a pull-down menu of choices, the count will be the number of possible choices, with one <span class="_HR3c"><span>&lt;value&gt;</span></span> element for each possibility.</span></div></h2></div><div><h2 id="formula-assumption-types"><div class="_4aml"><span>For the moment, we restrict our attention to the common case of a variable that can take any user-specified value. The single <span class="_HR3c"><span>&lt;value&gt;</span></span> element for this assumption will have a desc attribute that gives the currently assumed value for the variable. If you were providing an input field for your users to specify a new value, you would probably want to &quot;prime&quot; the input field with this initial value, like the Wolfram|Alpha website does. To specify a different value, you need to work with the value of the input attribute. You can ignore everything that comes before the &quot;-_&quot; in the string. What comes after is the value—in this case, &quot;10+m%2Fs&quot;, the URL-encoded form of &quot;10 m/s&quot;. To specify a different value for this variable, replace what comes after the &quot;-_&quot; character pair with the URL-encoded new value. Here is how to set the speed of the source to 6.5 m/s:</span></div></h2></div><div><h2 id="formula-assumption-types"><div class="_S_tS"><span>http://api.wolframalpha.com/v2/query?appid=DEMO&amp;input=Doppler+shift<span class="_v_lT"><span>&amp;assumption=*F.DopplerShift.vs-_6.5+m%2Fs</span></span></span></div></h2></div><div><h2 id="formula-assumption-types"><div class="_4aml"><span>Wolfram|Alpha intelligently parses the value, so it understands that &quot;m/s&quot; means &quot;meters per second.&quot; Those are the default units for this value, so you could leave the units specification out entirely and just give a number. You could also write out &quot;meters/second&quot;, &quot;meters per second&quot;, etc. If you submit a value that cannot be understood by Wolfram|Alpha, then the corresponding <span class="_HR3c"><span>&lt;value&gt;</span></span> element in the result will have the valid=false attribute. For example, if you try to set the value to 6.5 f/s, then this is what the resulting <span class="_HR3c"><span>&lt;assumption&gt;</span></span> element looks like:</span></div></h2></div><div><h2 id="formula-assumption-types"><div class="_S_tS"><span>&lt;assumption type=&quot;FormulaVariable&quot; desc=&quot;speed of the source away from the observer&quot; current=&quot;1&quot; count=&quot;1&quot;&gt;
  &lt;value name=&quot;DopplerShift.vs&quot; 
         <span class="_v_lT"><span>desc=&quot;6.5 f/s&quot; 
         valid=&quot;false&quot;</span></span> 
         input=&quot;*F.DopplerShift.vs-_6.5+f%2Fs&quot;/&gt;
&lt;/assumption&gt;</span></div></h2></div><div><h2 id="formula-assumption-types"><div class="_4aml"><span>The problem is that Wolfram|Alpha does not understand the &quot;f/s&quot; units. To specify feet per second, you would need to use &quot;ft/s&quot;, &quot;feet/second&quot;, etc.</span></div></h2></div><div><h2 id="formula-assumption-types"><div class="_4aml"><span>Now consider the case where a formula variable assumption can take on only a fixed set of values. These are not common in Wolfram|Alpha, but an example query that generates such assumptions is &quot;heart disease&quot;, which on the website produces a fillable form with several pull-down menus allowing you to choose whether the person in question is a smoker, diabetic, etc.:</span></div></h2></div><div><div><img src="/_next/static/images/15-fillable_form_1Q7-wEPH.png" alt="Formula assumption types diagram" class="_qxSu"/></div></div><div><h2 id="formula-assumption-types"><div class="_4aml"><span>Note that the fillable fields in this formula work as described in the previous example. However, the pull-down menus are derived from assumptions with only a few specific options available. Here is the XML returned by the API for one of these assumptions:</span></div></h2></div><div><h2 id="formula-assumption-types"><div class="_S_tS"><span>&lt;assumption type=&quot;FormulaVariable&quot; desc=&quot;gender&quot; <span class="_v_lT"><span>current=&quot;1&quot;</span></span> count=&quot;2&quot;&gt;
  &lt;value name=&quot;Gender:Male&quot; 
         desc=&quot;male&quot; 
         valid=&quot;true&quot; 
         input=&quot;*FP.HeartDisease.gender-_Gender%3AMale&quot;/&gt;
  &lt;value name=&quot;Gender:Female&quot; 
         desc=&quot;female&quot; 
         valid=&quot;true&quot; 
         input=&quot;*FP.HeartDisease.gender-_Gender%3AFemale&quot;/&gt;
&lt;/assumption&gt;</span></div></h2></div><div><h2 id="formula-assumption-types"><div class="_4aml"><span>In all other assumption types, the first-listed <span class="_HR3c"><span>&lt;value&gt;</span></span> element names the currently active assumption, but in this one case that rule is violated. Instead, the current attribute of <span class="_HR3c"><span>&lt;assumption&gt;</span></span> gives the index of the <span class="_HR3c"><span>&lt;value&gt;</span></span> element that is currently active (in this case, &quot;1&quot; for &quot;male&quot; and &quot;2&quot; for &quot;female&quot;). In this way, the natural order of the different values is preserved, without artificially moving the current value to the top of the list. Whether representing these options in a pull-down menu, as radio buttons, or using some other representation, it will probably make sense to preserve the order of the <span class="_HR3c"><span>&lt;value&gt;</span></span> elements. The process for applying a fixed FormulaVariable assumption is the same as for other types described in <a href="/api/documentation?scrollTo=using-assumptions" class="_3BQD orange19RedHover _xzt6 _hCSh sc-34cb55e4-2 sc-34cb55e4-3 jojysd kPdgYi"><span class="sc-34cb55e4-0 hLNrE"><span>the Using Assumptions section</span></span></a>.</span></div></h2></div><div><div><div class="_1EgR"><span>FormulaVariableInclude</span></div></div></div><div><h2 id="formula-assumption-types"><div class="_4aml"><span>The <span class="_v_lT"><span>FormulaVariableInclude</span></span> assumption lets you add additional variables into a formula. For simplicity, Wolfram|Alpha presents the Doppler shift formula with a small number of variables, but it knows how to include two more: the speed of the observer and the wind speed. On the website, if you click to add one of these variables, the formula will change to include this variable, the tabular results will get an extra row for it and you will get an extra input field to enter its value.</span></div></h2></div><div><h2 id="formula-assumption-types"><div class="_S_tS"><span>&lt;assumption <span class="_v_lT"><span>type=&quot;FormulaVariableInclude&quot;</span></span> template=&quot;Also include ${desc1}&quot; count=&quot;2&quot;&gt;
  &lt;value name=&quot;DopplerShift.vo&quot; desc=&quot;speed of the observer&quot; input=&quot;*FVarOpt-_**DopplerShift.vo-.*DopplerShift.DopplerRatio--&quot;/&gt;
  &lt;value name=&quot;DopplerShift.vw&quot; desc=&quot;wind speed&quot; input=&quot;*FVarOpt-_**DopplerShift.vw-.*DopplerShift.DopplerRatio--&quot;/&gt;
&lt;/assumption&gt;</span></div></h2></div><div><div><div class="_1EgR"><span>FormulaVariableOption</span></div></div></div><div><h2 id="formula-assumption-types"><div class="_4aml"><span>Wolfram|Alpha can sometimes present the same basic formula in terms of a different set of variables. In the Doppler example, you can choose to have the frequency reduction factor (<span class="_8rLA"><span>f</span></span><sub class="_6xTn _8rLA"><span>0</span></sub><span class="_8rLA"><span>/f</span></span><sub class="_6xTn _8rLA"><span>n</span></sub>) broken up into two separate variables (<span class="_8rLA"><span>f</span></span><sub class="_6xTn _8rLA"><span>0</span></sub> and <span class="_8rLA"><span>f</span></span><sub class="_6xTn _8rLA"><span>n</span></sub>). You&#x27;re not substituting a completely different formula (like FormulaSelect) or simply adding a new variable (like FormulaVariableInclude).</span></div></h2></div><div><h2 id="formula-assumption-types"><div class="_S_tS"><span>&lt;assumption <span class="_v_lT"><span>type=&quot;FormulaVariableOption&quot;</span></span> template=&quot;Assuming ${desc1}. Use ${desc2} instead&quot; count=&quot;2&quot;&gt;
  &lt;value name=&quot;DopplerShift.DopplerRatio&quot; desc=&quot;frequency reduction factor&quot; input=&quot;*FVarOpt-_**DopplerShift.DopplerRatio--&quot;/&gt;
  &lt;value name=&quot;DopplerShift.fo,DopplerShift.fs&quot; desc=&quot;frequency observed and frequency at the source&quot; input=&quot;*FVarOpt-_**DopplerShift.fo-.*DopplerShift.fs--&quot;/&gt;
&lt;/assumption&gt;</span></div></h2></div></section></div></div><div class="_iwaL"><div class="_48MV"><section id="advanced-topics"><h1 class="_JLFn"><span>Advanced Topics</span></h1><div><h2 id="classifying-queries"><div class="_UX7b"><span>Classifying Queries</span></div></h2></div><div><h2 id="classifying-queries"><div class="_4aml"><span>If you are using the Full Results API in a chemistry application, you probably want to know if Wolfram|Alpha interprets one of your user&#x27;s queries as referring to music before you splash the results onto the user&#x27;s screen. The API gives access to several ways to understand the subject areas and &quot;data types&quot; that Wolfram|Alpha thinks a query represents. A more formal characterization of queries is under development, but for now you can use the following main pieces of information.</span></div></h2></div><div><div><div class="_1EgR"><span>Clash Assumptions</span></div></div></div><div><h2 id="classifying-queries"><div class="_4aml"><span>Assumptions and their applications are described in detail above. The Clash assumption provides especially useful information about the meaning of a word or words in a query. Although this element does not provide generalized disambiguation, it can be helpful in discovering possible points of confusion in typical queries for your application.</span></div></h2></div><div><div><div class="_1EgR"><span>The Datatypes Attribute</span></div></div></div><div><h2 id="classifying-queries"><div class="_4aml"><span>The <span class="_v_lT"><span>datatypes</span></span> attribute of the <span class="_HR3c"><span>&lt;queryresult&gt;</span></span> tag is the most useful way to obtain a list of subject categories for a query. This attribute gives a comma-separated sequence of subject areas and types of data that Wolfram|Alpha uses in generating the set of results. As an example, consider an application that allows its users to enter DNA sequences and uses Wolfram|Alpha as part of its analysis. The query &quot;GATTACACCAGGATAAC&quot; results in the following queryresult element:</span></div></h2></div><div><h2 id="classifying-queries"><div class="_S_tS"><span>&lt;queryresult success=&quot;true&quot; error=&quot;false&quot; numpods=&quot;6&quot; <span class="_v_lT"><span>datatypes=&quot;DNAString&quot;</span></span> timedout=&quot;&quot; timedoutpods=&quot;&quot; timing=&quot;1.981&quot; parsetiming=&quot;0.672&quot; parsetimedout=&quot;false&quot; recalculate=&quot;&quot;
  id=&quot;MSPa71g3d0a8ddia7d88i00001e5413i1ich9b439&quot; host=&quot;http://www1.wolframalpha.com&quot; server=&quot;12&quot;
  related=&quot;http://www1.wolframalpha.com/api/v2/relatedQueries.jsp?id=MSPa71g3d0a8ddia7d88i00001e5413i1ich9b439&amp;s=12&quot; version=&quot;2.6&quot;&gt;</span></div></h2></div><div><h2 id="classifying-queries"><div class="_4aml"><span>The value of the datatypes attribute is &quot;DNAString&quot;, which tells your application that Wolfram|Alpha recognized this query as a DNA sequence. For such a long string of characteristic letters, there is little chance that Wolfram|Alpha will not recognize it as a DNA sequence. In contrast, here is what is returned from the query &quot;GATA&quot;:</span></div></h2></div><div><h2 id="classifying-queries"><div class="_S_tS"><span>&lt;queryresult success=&quot;true&quot; error=&quot;false&quot; numpods=&quot;4&quot; <span class="_v_lT"><span>datatypes=&quot;Country,Language,WritingScript&quot;</span></span>
             timedout=&quot;&quot; timedoutpods=&quot;&quot; timing=&quot;4.133&quot; parsetiming=&quot;0.239&quot; parsetimedout=&quot;false&quot; recalculate=&quot;&quot; 
             id=&quot;MSPa591c678icaa2gbgchh00000i9d13be67bcb57b&quot; host=&quot;http://www1.wolframalpha.com&quot; server=&quot;13&quot;
             related=&quot;http://www1.wolframalpha.com/api/v2/relatedQueries.jsp?id=MSPa601c678icaa2gbgchh00004ib18g06hebf1706&amp;s=13&quot; version=&quot;2.6&quot;&gt;

 ... pods describing Gata as a language in India deleted ...
 
    &lt;assumption type=&quot;Clash&quot; word=&quot;GATA&quot; template=&quot;Assuming &quot;${word}&quot; is ${desc1}. Use as ${desc2} instead&quot; count=&quot;2&quot;&gt;
      &lt;value name=&quot;Language&quot; desc=&quot;a language&quot; input=&quot;*C.GATA-_*Language-&quot;/&gt;
      &lt;value name=&quot;DNAString&quot; desc=&quot;a genome sequence&quot; input=&quot;*C.GATA-_*DNAString-&quot;/&gt;
    &lt;/assumption&gt;
  &lt;/assumptions&gt;
&lt;sources count=&quot;2&quot;&gt;...&lt;/sources&gt;
&lt;/queryresult&gt;</span></div></h2></div><div><h2 id="classifying-queries"><div class="_4aml"><span>Now the datatypes attribute is &quot;Country,Language,WritingSystem&quot;, which is a clear indication that Wolfram|Alpha did not interpret this query in the way that you wanted. Note also that there is an <span class="_HR3c"><span>&lt;assumption&gt;</span></span> element of the Clash type that clearly shows the ambiguous meaning of &quot;gata&quot;, as well as the currently chosen value (always the first-listed one). You could use the assumptions mechanism to force short, ambiguous strings to be interpreted as DNA strings. (In this example, however, simply adding the word DNA to the query is enough to get Wolfram|Alpha to interpret GATA as a DNA sequence.)</span></div></h2></div><div><h2 id="classifying-queries"><div class="_4aml"><span>Because many Wolfram|Alpha results are tailored to the user&#x27;s present location, the &quot;City&quot; data type appears frequently. This does not mean that the query was interpreted as directly referring to a city. For example, the query &quot;12/5/2007 moon&quot; returns &quot;Astronomical,City&quot;, for datatypes. If you try this query on the website, you will find that some pods, such as &quot;Sky position&quot;, refer to the caller&#x27;s city.</span></div></h2></div><div><div><div class="_1EgR"><span>Scanner Names</span></div></div></div><div><h2 id="classifying-queries"><div class="_4aml"><span>As described earlier, pods are produced by computational units called <a href="/api/documentation?scrollTo=selecting-pods-by-scanner" class="_3BQD orange19RedHover _xzt6 _hCSh sc-34cb55e4-2 sc-34cb55e4-3 jojysd kPdgYi"><span class="sc-34cb55e4-0 hLNrE"><span>&quot;scanners&quot;</span></span></a>, which correspond roughly to single subject areas. For example, there are scanners called Tide, Statistics, Species, Physiology, NumberSystems and many more. Each &lt;pod&gt; element has a scanner attribute that gives the name of the scanner that produced it. This is a good guide to the contents of the pod. The complete set of scanner names for all pods returned can be used as a guide to the overall characterization of the query.</span></div></h2></div><div><h2 id="timeouts-and-asynchronous-behavior"><div class="_UX7b"><span>Timeouts and Asynchronous Behavior</span></div></h2></div><div><h2 id="timeouts-and-asynchronous-behavior"><div class="_4aml"><span>The API allows you to control how long queries are allowed to take by specifying timeout parameters for various stages of Wolfram|Alpha processing. You can also request that time-consuming pods be returned asynchronously, so that some results are returned before all pods have finished.</span></div></h2></div><div><h2 id="timeouts-and-asynchronous-behavior"><div class="_4aml"><span>To understand the four timeout parameters, it is important to know a bit about the stages of a Wolfram|Alpha computation. In the first stage, called the &quot;parse&quot; stage, the input is interpreted into something that Wolfram|Alpha can understand. In the second, &quot;scan&quot; stage, it is handed off to a series of computational entities called scanners that correspond roughly to individual areas of knowledge (e.g. food, airports, chemistry, music). The scanners produce data structures that will correspond to pods in the final output. For purely computational queries, the bulk of processing is done during the scan stage. The third and final stage is the &quot;format&quot; stage, where these pod expressions are processed and rendered into various output formats. Despite its name, the format stage often involves significant computation that is deliberately deferred from the scan stage to support the asynchronous style of pod loading used on the website and also available via the API. For some types of inputs, the scan stage dominates the overall timing, but for many others the format stage is the longest.</span></div></h2></div><div><h2 id="timeouts-and-asynchronous-behavior"><div class="_4aml"><span>The format stage only occurs for pods that will be included in the output, so if you are limiting which pods are returned via the includepodid, podtitle, podindex or related parameters, then the cost of formatting is only incurred for pods that are included. You can use any combination of the following parameters to limit the processing time for your queries. All timeout values are in seconds.</span></div></h2></div><div><div><div class="_1EgR"><span>The parsetimeout Parameter</span></div></div></div><div><h2 id="timeouts-and-asynchronous-behavior"><div class="_4aml"><span>The <span class="_v_lT"><span>parsetimeout</span></span> parameter limits how long the parse stage is allowed to take. The default value is five seconds, and the vast majority of queries take considerably less time than that. In very rare cases, though, a query can time out in the parse stage. When this happens, you will get a <span class="_v_lT"><span>&lt;queryresult&gt;</span></span> element with <span class="_HR3c"><span>success=false</span></span> and <span class="_HR3c"><span>parsetimedout=true</span></span>. When this happens, you can retry the query with a longer parse time using the parsetimeout parameter.</span></div></h2></div><div><div><div class="_1EgR"><span>The scantimeout Parameter</span></div></div></div><div><h2 id="timeouts-and-asynchronous-behavior"><div class="_4aml"><span>The <span class="_v_lT"><span>scantimeout</span></span> parameter limits how long the scan stage is allowed to take. You can think of the scan stage as the period where Wolfram|Alpha &quot;thinks&quot; about a query, what data might be available and what pods to return. Most queries complete scanning in considerably less than the default of three seconds. If you stop the scanning process before it finishes, then you might get a smaller number of pods in the result. Any lost pods would typically be higher-numbered pods (ones that appear lower down on the page on the website). The <span class="_HR3c"><span>&lt;queryresult&gt;</span></span> element contains a timedout attribute that gives a comma-separated sequence of names of scanners that timed out. If this is not an empty string, then you might get more pods by increasing the scantimeout value, especially if the names of the timed-out scanners represent categories in which you are interested.</span></div></h2></div><div><h2 id="timeouts-and-asynchronous-behavior"><div class="_4aml"><span>Increasing the scantimeout parameter can allow more processing time for large computations. The query &quot;10,000,000th Fibonacci number&quot; times out during calculation with the default setting (notice the value of the timedout attribute):</span></div></h2></div><div><h2 id="timeouts-and-asynchronous-behavior"><div class="_S_tS"><span>&lt;queryresult success=&quot;true&quot; error=&quot;false&quot; numpods=&quot;0&quot; datatypes=&quot;&quot; 
             <span class="_v_lT"><span>timedout=&quot;PowerTower,Numeric,List,Factorial&quot;</span></span> timedoutpods=&quot;&quot; timing=&quot;4.785&quot; parsetiming=&quot;0.513&quot; parsetimedout=&quot;false&quot;
             recalculate=&quot;http://www1.wolframalpha.com/api/v2/recalc.jsp?id=MSPa261g3d0ef867ddhf940000522c808eic67ab0d&amp;s=12&quot; 
             id=&quot;MSPa271g3d0ef867ddhf94000061a1ffic9c0h723a&quot; host=&quot;http://www1.wolframalpha.com&quot; server=&quot;12&quot;
             related=&quot;http://www1.wolframalpha.com/api/v2/relatedQueries.jsp?id=MSPa281g3d0ef867ddhf94000025i9chiafeb84fbb&amp;s=12&quot; version=&quot;2.6&quot;&gt;
&lt;sources count=&quot;0&quot;/&gt;
&lt;/queryresult&gt;</span></div></h2></div><div><h2 id="timeouts-and-asynchronous-behavior"><div class="_4aml"><span>But adding <span class="_HR3c"><span>&quot;scantimeout=8&quot;</span></span> allows the computation to finish so that a result is obtained:</span></div></h2></div><div><h2 id="timeouts-and-asynchronous-behavior"><div class="_S_tS"><span>&lt;queryresult success=&quot;true&quot; error=&quot;false&quot; numpods=&quot;2&quot; datatypes=&quot;&quot; 
             <span class="_v_lT"><span>timedout=&quot;&quot;</span></span> timedoutpods=&quot;&quot; timing=&quot;7.741&quot; parsetiming=&quot;0.572&quot; parsetimedout=&quot;false&quot;
             recalculate=&quot;http://www1.wolframalpha.com/api/v2/recalc.jsp?id=MSPa621g3d0eeb27a6af7e00003f471cbb4a9h1081&amp;s=12&quot; 
             id=&quot;MSPa631g3d0eeb27a6af7e00005e4b5c3ea4ae97g8&quot; host=&quot;http://www1.wolframalpha.com&quot; server=&quot;12&quot;
             related=&quot;http://www1.wolframalpha.com/api/v2/relatedQueries.jsp?id=MSPa641g3d0eeb27a6af7e00004009i7df09d2egh3&amp;s=12&quot; version=&quot;2.6&quot;&gt;
  <span class="_v_lT"><span>&lt;pod title=&quot;Input&quot; scanner=&quot;Identity&quot; id=&quot;Input&quot; position=&quot;100&quot; error=&quot;false&quot; numsubpods=&quot;1&quot;&gt;...&lt;/pod&gt;
  &lt;pod title=&quot;Decimal approximation&quot; scanner=&quot;Numeric&quot; id=&quot;Result&quot; position=&quot;200&quot; error=&quot;false&quot; numsubpods=&quot;1&quot; primary=&quot;true&quot;&gt;
    &lt;subpod title=&quot;&quot;&gt;
      &lt;plaintext&gt;
        1.1298343782253997603170636377458663729448371... * 10^2089876
      &lt;/plaintext&gt;
    &lt;/subpod&gt;
    &lt;states count=&quot;1&quot;&gt;...&lt;/states&gt;
  &lt;/pod&gt;</span></span>
  &lt;sources count=&quot;0&quot;/&gt;
&lt;/queryresult&gt;</span></div></h2></div><div><h2 id="timeouts-and-asynchronous-behavior"><div class="_4aml"><span>For certain classes of queries, increasing the scantimeout parameter from the default value may also allow more pods to be generated. For example, a very general query such as &quot;Maine&quot; will generate a long list of information from many scanners that may take more than three seconds to process. By default, this query returns 8 pods with information about the US state of Maine. Increasing the scantimeout value by one second (<span class="_HR3c"><span>scantimeout=4</span></span>) nearly doubles the number of pods returned (additional pods are highlighted):</span></div></h2></div><div><h2 id="timeouts-and-asynchronous-behavior"><div class="_S_tS"><span>&lt;queryresult success=&quot;true&quot; error=&quot;false&quot; numpods=&quot;8&quot; datatypes=&quot;City,USState&quot; 
             <span class="_v_lT"><span>timedout=&quot;Data,Character&quot;</span></span> timedoutpods=&quot;&quot; timing=&quot;6.251&quot; parsetiming=&quot;0.167&quot; parsetimedout=&quot;false&quot;
             recalculate=&quot;http://www1.wolframalpha.com/api/v2/recalc.jsp?id=MSPa371c67962ihf94cb1h000011e033cac3f8316e&amp;s=13&quot; id=&quot;MSPa381c67962ihf94cb1h00005944g42975582hg3&quot;
             host=&quot;http://www1.wolframalpha.com&quot; server=&quot;13&quot; related=&quot;http://www1.wolframalpha.com/api/v2/relatedQueries.jsp?id=MSPa391c67962ihf94cb1h00004igb226h2i54dacb&amp;s=13&quot; version=&quot;2.6&quot;&gt;

  &lt;pod title=&quot;Input interpretation&quot; scanner=&quot;Identity&quot; id=&quot;Input&quot; position=&quot;100&quot; error=&quot;false&quot; numsubpods=&quot;1&quot;&gt;...&lt;/pod&gt;
  &lt;pod title=&quot;Basic information&quot; scanner=&quot;Data&quot; id=&quot;BasicInformation:USStateData&quot; position=&quot;200&quot; error=&quot;false&quot; numsubpods=&quot;1&quot; primary=&quot;true&quot;&gt;...&lt;/pod&gt;
  &lt;pod title=&quot;Location&quot; scanner=&quot;Data&quot; id=&quot;Location:USStateData&quot; position=&quot;300&quot; error=&quot;false&quot; numsubpods=&quot;1&quot;&gt;...&lt;/pod&gt;
  &lt;pod title=&quot;Population&quot; scanner=&quot;Data&quot; id=&quot;Demographics:USStateData&quot; position=&quot;400&quot; error=&quot;false&quot; numsubpods=&quot;1&quot;&gt;...&lt;/pod&gt;
  &lt;pod title=&quot;Population history&quot; scanner=&quot;Data&quot; id=&quot;PopulationHistory:USStateData&quot; position=&quot;500&quot; error=&quot;false&quot; numsubpods=&quot;1&quot;&gt;...&lt;/pod&gt;
  <span class="_v_lT"><span>&lt;pod title=&quot;Demographics&quot; scanner=&quot;Data&quot; id=&quot;ACSPercentageEntrainments:ACSData&quot; position=&quot;600&quot; error=&quot;false&quot; numsubpods=&quot;1&quot;&gt;...&lt;/pod&gt;
  &lt;pod title=&quot;Educational attainment&quot; scanner=&quot;Data&quot; id=&quot;ACSEducationEntrainments:ACSData&quot; position=&quot;700&quot; error=&quot;false&quot; numsubpods=&quot;1&quot;&gt;...&lt;/pod&gt;</span></span>
  &lt;pod title=&quot;Geographic properties&quot; scanner=&quot;Data&quot; id=&quot;GeographicProperties:USStateData&quot; position=&quot;800&quot; error=&quot;false&quot; numsubpods=&quot;1&quot;&gt;...&lt;/pod&gt;
  &lt;pod title=&quot;Housing&quot; scanner=&quot;Data&quot; id=&quot;Housing:USStateData&quot; position=&quot;900&quot; error=&quot;false&quot; numsubpods=&quot;1&quot;&gt;...&lt;/pod&gt;
  &lt;pod title=&quot;Economic properties&quot; scanner=&quot;Data&quot; id=&quot;Economy:USStateData&quot; position=&quot;1000&quot; error=&quot;false&quot; numsubpods=&quot;1&quot;&gt;...&lt;/pod&gt;
  <span class="_v_lT"><span>&lt;pod title=&quot;Crime statistics&quot; scanner=&quot;Data&quot; id=&quot;StateCrimeInformation:CrimeData&quot; position=&quot;1100&quot; error=&quot;false&quot; numsubpods=&quot;1&quot;&gt;...&lt;/pod&gt;
  &lt;pod title=&quot;Flag&quot; scanner=&quot;Data&quot; id=&quot;Flag:USStateData&quot; position=&quot;1200&quot; error=&quot;false&quot; numsubpods=&quot;1&quot;&gt;...&lt;/pod&gt;
  &lt;pod title=&quot;Voting and registration rates&quot; scanner=&quot;Data&quot; id=&quot;VotingAndRegistrationRates:USStateData&quot; position=&quot;1300&quot; error=&quot;false&quot; numsubpods=&quot;1&quot;&gt;...&lt;/pod&gt;
  &lt;pod title=&quot;Public school finance information&quot; scanner=&quot;Data&quot; id=&quot;EducationFunding:USStateData&quot; position=&quot;1400&quot; error=&quot;false&quot; numsubpods=&quot;1&quot;&gt;...&lt;/pod&gt;
  &lt;pod title=&quot;Wikipedia page hits history&quot; scanner=&quot;Data&quot; id=&quot;PopularityPod:WikipediaStatsData&quot; position=&quot;1500&quot; error=&quot;false&quot; numsubpods=&quot;1&quot;&gt;...&lt;/pod&gt;</span></span>
  &lt;assumptions count=&quot;1&quot;&gt;...&lt;/assumptions&gt;
  &lt;sources count=&quot;1&quot;&gt;...&lt;/sources&gt;
&lt;/queryresult&gt;</span></div></h2></div><div><h2 id="timeouts-and-asynchronous-behavior"><div class="_4aml"><span>The non-empty value of &quot;Data,Character&quot; in the timedout attribute implies that even more pods could be generated for this query.</span></div></h2></div><div><div><div class="_1EgR"><span>The podtimeout and formattimeout Parameters</span></div></div></div><div><h2 id="timeouts-and-asynchronous-behavior"><div class="_4aml"><span>The two remaining timeout parameters control the format stage. The <span class="_v_lT"><span>podtimeout</span></span> parameter limits how long any one pod can spend in the format stage. If the pod is not completely formatted and ready within this time span, it will be dropped from the output. You might use this as a way to prevent a single pod from dominating too much processing time, or to return only the &quot;quick&quot; information in your result. However, keep in mind that the most important pods in many queries will not be the quickest to format. You can use the timedoutpods attribute in the <span class="_HR3c"><span>&lt;queryresult&gt;</span></span> element to get a list of pods that timed out during the format stage, giving you an idea of what kind of information might be missing. Setting <span class="_HR3c"><span>podtimeout=0.3</span></span> for the &quot;weather&quot; query results in a number of quickly formatting pods, but it leaves out some pods that could be important, like &quot;Latest recorded weather for Champaign, IL&quot;:</span></div></h2></div><div><h2 id="timeouts-and-asynchronous-behavior"><div class="_S_tS"><span>&lt;queryresult success=&quot;true&quot; error=&quot;false&quot; numpods=&quot;2&quot; datatypes=&quot;City,Weather&quot; 
             <span class="_v_lT"><span>timedout=&quot;Data,Character&quot; timedoutpods=&quot;Latest recorded weather for Champaign%2C Illinois,Weather history &amp; forecast,Historical temperatures for December 1,Weather station information&quot;</span></span>
             timing=&quot;5.077&quot; parsetiming=&quot;0.09&quot; parsetimedout=&quot;false&quot; 
             recalculate=&quot;http://www1.wolframalpha.com/api/v2/recalc.jsp?id=MSPa81bb382f264efhba900003deii48a033ggi4d&amp;s=14&quot; id=&quot;MSPa81bb382f264efhba900003deii48a033ggi4d&quot;
             host=&quot;http://www1.wolframalpha.com&quot; server=&quot;14&quot; 
             related=&quot;http://www1.wolframalpha.com/api/v2/relatedQueries.jsp?id=MSPa101bb382f264efhba900001a5146b20150hah0&amp;s=14&quot; version=&quot;2.6&quot;&gt;
  &lt;pod title=&quot;Input interpretation&quot; scanner=&quot;Identity&quot; id=&quot;Input&quot; position=&quot;100&quot; error=&quot;false&quot; numsubpods=&quot;1&quot;&gt;...&lt;/pod&gt;
  &lt;pod title=&quot;Weather forecast for Champaign, Illinois&quot; scanner=&quot;Data&quot; id=&quot;WeatherForecast:WeatherData&quot; position=&quot;300&quot; error=&quot;false&quot; numsubpods=&quot;2&quot; primary=&quot;true&quot;&gt;...&lt;/pod&gt;
  &lt;pod title=&quot;Weather station information&quot; scanner=&quot;Data&quot; id=&quot;WeatherStationInformation:WeatherData&quot; position=&quot;600&quot; error=&quot;false&quot; numsubpods=&quot;1&quot;&gt;...&lt;/pod&gt;
  &lt;assumptions count=&quot;1&quot;&gt;...&lt;/assumptions&gt;
  &lt;sources count=&quot;4&quot;&gt;...&lt;/sources&gt;
&lt;/queryresult&gt;</span></div></h2></div><div><h2 id="timeouts-and-asynchronous-behavior"><div class="_4aml"><span>In contrast, the <span class="_v_lT"><span>formattimeout</span></span> parameter limits how long the entire format stage can take, for the full collection of pods. If you specify <span class="_HR3c"><span>formattimeout=2</span></span>, then you cap the entire formatting stage at 2 seconds, and you have a reasonably good idea about the maximum time any query can take from start to finish (especially if you also use the scantimeout parameter). However, if the third pod takes 1.9 seconds to format, then later pods might get no chance at all to appear in the output. Setting <span class="_HR3c"><span>formattimeout=2</span></span> for the &quot;weather&quot; query yields a slightly different result, displaying the &quot;most relevant&quot; pods (including the previously dropped &quot;Latest recorded weather for Champaign, IL&quot;) until the timeout limit is reached:</span></div></h2></div><div><h2 id="timeouts-and-asynchronous-behavior"><div class="_S_tS"><span>&lt;queryresult success=&quot;true&quot; error=&quot;false&quot; numpods=&quot;3&quot; datatypes=&quot;City,Weather&quot; 
             <span class="_v_lT"><span>timedout=&quot;Data,Character&quot; timedoutpods=&quot;Weather history &amp; forecast,Historical temperatures for December 1,Weather station information&quot;</span></span> timing=&quot;4.573&quot; parsetiming=&quot;0.09&quot; parsetimedout=&quot;false&quot;
             recalculate=&quot;http://www1.wolframalpha.com/api/v2/recalc.jsp?id=MSPa241bb3824736e9f4h600005cb57b31ibcb9f61&amp;s=14&quot; id=&quot;MSPa251bb3824736e9f4h6000066b50g24ci9gf998&quot;
             host=&quot;http://www1.wolframalpha.com&quot; server=&quot;14&quot; 
             related=&quot;http://www1.wolframalpha.com/api/v2/relatedQueries.jsp?id=MSPa261bb3824736e9f4h600003b3bdig33a7ac85h&amp;s=14&quot; version=&quot;2.6&quot;&gt;
  &lt;pod title=&quot;Input interpretation&quot; scanner=&quot;Identity&quot; id=&quot;Input&quot; position=&quot;100&quot; error=&quot;false&quot; numsubpods=&quot;1&quot;&gt;...&lt;/pod&gt;
  &lt;pod title=&quot;Latest recorded weather for Champaign, Illinois&quot; scanner=&quot;Data&quot; id=&quot;InstantaneousWeather:WeatherData&quot; position=&quot;200&quot; error=&quot;false&quot; numsubpods=&quot;1&quot; primary=&quot;true&quot;&gt;...&lt;/pod&gt;
  &lt;pod title=&quot;Weather forecast for Champaign, Illinois&quot; scanner=&quot;Data&quot; id=&quot;WeatherForecast:WeatherData&quot; position=&quot;300&quot; error=&quot;false&quot; numsubpods=&quot;2&quot; primary=&quot;true&quot;&gt;...&lt;/pod&gt;
  &lt;assumptions count=&quot;1&quot;&gt;...&lt;/assumptions&gt;
  &lt;sources count=&quot;4&quot;&gt;...&lt;/sources&gt;
&lt;/queryresult&gt;</span></div></h2></div><div><h2 id="timeouts-and-asynchronous-behavior"><div class="_4aml"><span>Note that if you are using either of these format timeouts, you should consider using the <a href="/api/documentation?scrollTo=podtimeout-async" class="_3BQD orange19RedHover _xzt6 _hCSh sc-34cb55e4-2 sc-34cb55e4-3 jojysd kPdgYi"><span class="sc-34cb55e4-0 hLNrE"><span>asynchronous mode</span></span></a> of the API, discussed below.</span></div></h2></div><div><div><div class="_1EgR"><span>The totaltimeout Parameter</span></div></div></div><div><h2 id="timeouts-and-asynchronous-behavior"><div class="_4aml"><span>If you want to limit the total time for a query to process, use the <span class="_v_lT"><span>totaltimeout</span></span> parameter. It will set an absolute limit to the processing time for a query, regardless of what stage has been reached. Because it offers no indication of what processing stage was interrupted, this parameter should rarely be used by itself unless you&#x27;ve already explored the other options. When combined with other timeout parameters, totaltimeout will define a last-resort time limit for queries. Its default value is 20.0, which is the sum of the default values for all other timeout values.</span></div></h2></div><div><div><div class="_1EgR"><span>The async parameter</span></div></div></div><div><h2 id="timeouts-and-asynchronous-behavior"><div class="_4aml"><span>The Wolfram|Alpha website is designed to allow some pods to appear in the user&#x27;s browser before all the pods are ready. For many queries (&quot;weather&quot; is a typical example), you will see one to several pods appear quickly, but pods lower down on the screen show up as progress bars that have their content spliced in when it becomes available. The Wolfram|Alpha server stores certain pod expressions as files before they are formatted, and then waits for the client (a web browser, because here we are describing the behavior of the website) to request the formatted versions, at which point the formatting stage of the computation is performed and the result for each pod is returned as a separate transaction. You can get the same behavior in the API using the async parameter.</span></div></h2></div><div><h2 id="timeouts-and-asynchronous-behavior"><div class="_4aml"><span>By default, the API behaves synchronously, meaning that the entire XML document that represents the result of a query is returned as a single unit. The caller gets nothing back until the entire result is ready. By specifying <span class="_HR3c"><span>async=true</span></span>, you can tell Wolfram|Alpha to return an XML document in which some pods are represented as URLs that need to be requested in a second step to get their actual XML content. Do not confuse this with image URLs that are part of a normal result when the image format type is requested. Although the actual data in the images must be requested as a second step, the images themselves are already completely generated by the time the original XML result is returned.</span></div></h2></div><div><h2 id="timeouts-and-asynchronous-behavior"><div class="_4aml"><span>Here is an example using the &quot;weather&quot; query:</span></div></h2></div><div><h2 id="timeouts-and-asynchronous-behavior"><div class="_S_tS"><span>http://api.wolframalpha.com/v2/query?appid=DEMO&amp;input=weather<span class="_v_lT"><span>&amp;async=true</span></span></span></div></h2></div><div><h2 id="timeouts-and-asynchronous-behavior"><div class="_4aml"><span>This returns the following XML:</span></div></h2></div><div><h2 id="timeouts-and-asynchronous-behavior"><div class="_S_tS"><span>&lt;queryresult success=&quot;true&quot; error=&quot;false&quot; numpods=&quot;7&quot; datatypes=&quot;City,Weather&quot; 
             timedout=&quot;&quot; timedoutpods=&quot;&quot; timing=&quot;4.274&quot; parsetiming=&quot;0.11&quot; parsetimedout=&quot;false&quot; recalculate=&quot;&quot; 
             id=&quot;MSPa991c679e3ea1d0h94h00004c75c0230bf09ci5&quot; host=&quot;http://www1.wolframalpha.com&quot; server=&quot;13&quot;
             related=&quot;http://www1.wolframalpha.com/api/v2/relatedQueries.jsp?id=MSPa1001c679e3ea1d0h94h00002i36e8ebag05c7df&amp;s=13&quot; version=&quot;2.6&quot;&gt;
  &lt;pod title=&quot;Input interpretation&quot; scanner=&quot;Identity&quot; id=&quot;Input&quot; position=&quot;100&quot; error=&quot;false&quot; numsubpods=&quot;1&quot;&gt;...&lt;/pod&gt;
  &lt;pod title=&quot;Latest recorded weather for Champaign, Illinois&quot; scanner=&quot;Data&quot; id=&quot;InstantaneousWeather:WeatherData&quot; position=&quot;200&quot; error=&quot;false&quot; numsubpods=&quot;1&quot; primary=&quot;true&quot;&gt;...&lt;/pod&gt;
  &lt;pod title=&quot;Weather forecast for Champaign, Illinois&quot; scanner=&quot;Data&quot; id=&quot;WeatherForecast:WeatherData&quot; position=&quot;300&quot; error=&quot;false&quot; numsubpods=&quot;2&quot; primary=&quot;true&quot;&gt;...&lt;/pod&gt;
  <span class="_v_lT"><span>&lt;pod title=&quot;Weather history &amp; forecast&quot; scanner=&quot;Data&quot; id=&quot;WeatherCharts:WeatherData&quot; position=&quot;400&quot; error=&quot;false&quot; numsubpods=&quot;0&quot;
       async=&quot;http://www1.wolframalpha.com/api/v2/asyncPod.jsp?id=MSPa1061c679e3ea1d0h94h00005cfi845a23f3if9a&amp;s=13&quot;/&gt;
  &lt;pod title=&quot;Historical temperatures for December 1&quot; scanner=&quot;Data&quot; id=&quot;HistoricalTemperature:WeatherData&quot; position=&quot;500&quot; error=&quot;false&quot; numsubpods=&quot;0&quot;
       async=&quot;http://www1.wolframalpha.com/api/v2/asyncPod.jsp?id=MSPa1071c679e3ea1d0h94h00002h3ggc950ehaibf9&amp;s=13&quot;/&gt;</span></span>
&lt;pod title=&quot;Weather station information&quot; scanner=&quot;Data&quot; id=&quot;WeatherStationInformation:WeatherData&quot; position=&quot;600&quot; error=&quot;false&quot; numsubpods=&quot;1&quot;&gt;...&lt;/pod&gt;
&lt;pod title=&quot;Weather station comparisons&quot; scanner=&quot;Data&quot; id=&quot;LocalTemperature:WeatherData&quot; position=&quot;700&quot; error=&quot;false&quot; numsubpods=&quot;1&quot;&gt;...&lt;/pod&gt;
&lt;assumptions count=&quot;1&quot;&gt;...&lt;/assumptions&gt;
&lt;sources count=&quot;4&quot;&gt;...&lt;/sources&gt;
&lt;/queryresult&gt;</span></div></h2></div><div><h2 id="timeouts-and-asynchronous-behavior"><div class="_4aml"><span>You can see in this result that the first three pods are returned in standard format, but the next two have no content. Instead, these <span class="_HR3c"><span>&lt;pod&gt;</span></span> elements have an async attribute that gives a URL that you can use to request the XML content that corresponds to the pod, with all the originally requested properties intact (format types, width, etc.) The XML that gets returned from a request to this URL is a <span class="_HR3c"><span>&lt;pod&gt;</span></span> element and subelements that directly replace the &quot;stub&quot; <span class="_HR3c"><span>&lt;pod&gt;</span></span> element. In the above output, the second async pod (titled &quot;Historical temperatures for December 1&quot;) contains the following URL:</span></div></h2></div><div><h2 id="timeouts-and-asynchronous-behavior"><div class="_S_tS"><span>http://www1.wolframalpha.com/api/v2/asyncPod.jsp?id=MSPa1071c679e3ea1d0h94h00002h3ggc950ehaibf9&amp;s=13</span></div></h2></div><div><h2 id="timeouts-and-asynchronous-behavior"><div class="_4aml"><span>A request to that URL returns the following XML:</span></div></h2></div><div><h2 id="timeouts-and-asynchronous-behavior"><div class="_S_tS"><span>&lt;pod title=&quot;Historical temperatures for December 1&quot; scanner=&quot;Data&quot; id=&quot;HistoricalTemperature:WeatherData&quot; position=&quot;500&quot; error=&quot;false&quot; numsubpods=&quot;1&quot;&gt;
  &lt;subpod title=&quot;&quot;&gt;
    &lt;plaintext&gt;
      low: 8 \[Degree]F Dec 2002 | average high: | 43 \[Degree]F average low: | 28 \[Degree]F | high: 63 \[Degree]F Dec 2012 (daily ranges, not corrected for changes in local weather station environment)
    &lt;/plaintext&gt;
    &lt;img src= ... /&gt;
  &lt;/subpod&gt;
  &lt;states count=&quot;2&quot;&gt;...&lt;/states&gt;
&lt;/pod&gt;</span></div></h2></div><div><h2 id="timeouts-and-asynchronous-behavior"><div class="_4aml"><span>This is exactly the <span class="_HR3c"><span>&lt;pod&gt;</span></span> element that would have been present in the original output if it had not been done asynchronously.</span></div></h2></div><div><h2 id="timeouts-and-asynchronous-behavior"><div class="_4aml"><span>It is usually the case that the first few pods are not delivered asynchronously and later pods are, but this is not guaranteed. Low-numbered pods typically format quickly and thus fall within the internal timeout values that control whether a pod is delivered synchronously or asynchronously. Like the URLs in <span class="_HR3c"><span>&lt;img&gt;</span></span> tags, async URLs refer to temporary files with lifetimes of about a half hour or so. They cannot be stored for retrieval at arbitrary times in the future.</span></div></h2></div><div><h2 id="timeouts-and-asynchronous-behavior"><div class="_4aml"><span>When you specify <span class="_HR3c"><span>async=true</span></span>, the default behavior is to allow pods 0.4 seconds to format, and if they fail to complete within that interval they are handled asynchronously. If you want control over that time interval, you can specify a number of seconds as the value for the async parameter, instead of just true. For example, <span class="_HR3c"><span>async=0.2</span></span> would only allow 0.2 seconds for any given pod to format before switching to asynchronous mode. Asynchronous pods have an error attribute that tells whether the pod content was generated correctly; this can be useful for optimizing your async time.</span></div></h2></div><div><h2 id="timeouts-and-asynchronous-behavior"><div class="_4aml"><span>The async parameter is a powerful way for more advanced programmers to let their users see Wolfram|Alpha results quickly, at the cost of having to manage the extra requests for async pods. It is mainly of use when you are preparing output for users to look at and you want them to be able to get some results right away, with the rest coming soon after. If your program can do nothing useful with partial results, then ignore asynchronicity altogether. If you are using podtitle, podindex or related parameters to request only one or two pods from a given query, then asynchronicity will be of little use. Remember that asynchronous behavior is not enabled by default, so unless you add the async parameter to a query, the entire XML result will always come back from the initial request.</span></div></h2></div><div><div><div class="_1EgR"><span>recalculate</span></div></div></div><div><h2 id="timeouts-and-asynchronous-behavior"><div class="_4aml"><span><a href="/api/documentation?scrollTo=podtimeout-async" class="_3BQD orange19RedHover _xzt6 _hCSh sc-34cb55e4-2 sc-34cb55e4-3 jojysd kPdgYi"><span class="sc-34cb55e4-0 hLNrE"><span>The async parameter</span></span></a> described in the previous section provides a way to get some results back from Wolfram|Alpha quickly, deferring longer computations for later. A related feature is the ability to &quot;recalculate&quot; a query. To understand the recalculate feature, make sure you have read the preceding section on the stages of a Wolfram|Alpha computation and the scantimeout parameter. In the so-called &quot;scan&quot; stage of a computation, multiple scanners are at work to produce pods relating to various topics. Any scanner that does not finish within the scantimeout period is interrupted before it produces a pod. If this happens, the <span class="_HR3c"><span>&lt;queryresult&gt;</span></span> element will name the scanners that timed out in its timedout attribute, and the recalculate attribute will have a non-empty value giving a URL. You can call this URL to redo the query with a longer scantimeout to give the scanners that timed out a chance to finish and give you some new pods. The advantage of using the recalculate URL instead of simply redoing the original query yourself and specifying a longer scantimeout is that the recalculate operation is much faster because it is able to skip a lot of the work that was done in the original query. For example, pods that were already computed are not computed again.</span></div></h2></div><div><h2 id="timeouts-and-asynchronous-behavior"><div class="_4aml"><span>With the default scantimeout interval of three seconds, not many queries will have scanners time out and thus have a recalculate URL. One way to use the recalculate feature is to specify a short scantimeout in the original query, say one second, to get the initial set of pods back quickly, then use the recalculate URL to get the rest of the pods in a second call. This is how the <a href="https://www.wolframalpha.com" class="_3BQD _dGJe _ZJzB sc-34cb55e4-2 sc-34cb55e4-3 cwjaCb kPdgYi _h_2l"><span class="sc-34cb55e4-0 hLNrE"><span>Wolfram|Alpha website</span></span></a> operates, and also <a href="/mobile" class="_3BQD _dGJe _ZJzB sc-34cb55e4-2 sc-34cb55e4-3 cwjaCb kPdgYi _h_2l"><span class="sc-34cb55e4-0 hLNrE"><span>Wolfram Research&#x27;s Wolfram|Alpha Apps for iPhone and Android</span></span></a>. Here is an example of an initial query specifying a short scantimeout:</span></div></h2></div><div><h2 id="timeouts-and-asynchronous-behavior"><div class="_S_tS"><span>http://api.wolframalpha.com/v2/queryappid=DEMO&amp;?input=pi<span class="_v_lT"><span>&amp;scantimeout=1.0</span></span></span></div></h2></div><div><h2 id="timeouts-and-asynchronous-behavior"><div class="_4aml"><span>Note the recalculate URL in the result:</span></div></h2></div><div><h2 id="timeouts-and-asynchronous-behavior"><div class="_S_tS"><span>&lt;queryresult success=&quot;true&quot; error=&quot;false&quot; numpods=&quot;6&quot; datatypes=&quot;MathematicalFunctionIdentity&quot; 
             <span class="_v_lT"><span>timedout=&quot;Numeric,MathematicalFunctionData,Recognize&quot;</span></span> timedoutpods=&quot;&quot; timing=&quot;1.96&quot; parsetiming=&quot;0.258&quot; parsetimedout=&quot;false&quot;
             <span class="_v_lT"><span>recalculate=&quot;http://www1.wolframalpha.com/api/v2/recalc.jsp?id=MSPa741bb3843hh8i9h3ad00001fh9feb817ad9e83&amp;s=14&quot;</span></span>
             id=&quot;MSPa751bb3843hh8i9h3ad0000630fabg4408a7cib&quot; host=&quot;http://www1.wolframalpha.com&quot; server=&quot;14&quot; 
             related=&quot;http://www1.wolframalpha.com/api/v2/relatedQueries.jsp?id=MSPa761bb3843hh8i9h3ad00003echac6dch1h90a1&amp;s=14&quot; version=&quot;2.6&quot;&gt;
&lt;pod title=&quot;Input&quot; scanner=&quot;Identity&quot; id=&quot;Input&quot; position=&quot;100&quot; error=&quot;false&quot; numsubpods=&quot;1&quot;&gt;...&lt;/pod&gt;
&lt;pod title=&quot;Decimal approximation&quot; scanner=&quot;Numeric&quot; id=&quot;DecimalApproximation&quot; position=&quot;200&quot; error=&quot;false&quot; numsubpods=&quot;1&quot; primary=&quot;true&quot;&gt;...&lt;/pod&gt;
&lt;pod title=&quot;Property&quot; scanner=&quot;Numeric&quot; id=&quot;Property&quot; position=&quot;300&quot; error=&quot;false&quot; numsubpods=&quot;1&quot;&gt;...&lt;/pod&gt;
&lt;pod title=&quot;Number line&quot; scanner=&quot;NumberLine&quot; id=&quot;NumberLine&quot; position=&quot;400&quot; error=&quot;false&quot; numsubpods=&quot;1&quot;&gt;...&lt;/pod&gt;
&lt;pod title=&quot;Continued fraction&quot; scanner=&quot;ContinuedFraction&quot; id=&quot;ContinuedFraction&quot; position=&quot;500&quot; error=&quot;false&quot; numsubpods=&quot;1&quot;&gt;...&lt;/pod&gt;
&lt;pod title=&quot;Alternative representations&quot; scanner=&quot;MathematicalFunctionData&quot; id=&quot;AlternativeRepresentations:MathematicalFunctionIdentityData&quot; position=&quot;600&quot; error=&quot;false&quot; numsubpods=&quot;3&quot;&gt;...&lt;/pod&gt;
&lt;assumptions count=&quot;1&quot;&gt;...&lt;/assumptions&gt;
&lt;sources count=&quot;0&quot;/&gt;
&lt;/queryresult&gt;</span></div></h2></div><div><h2 id="timeouts-and-asynchronous-behavior"><div class="_4aml"><span>We see in the above result that only six pods were returned and several scanners timed out. Your client program could display the five pods that came back in the initial result and then immediately make a call to the recalculate URL in the background. Here is what that call returns:</span></div></h2></div><div><h2 id="timeouts-and-asynchronous-behavior"><div class="_S_tS"><span>&lt;queryresult success=&quot;true&quot; error=&quot;false&quot; numpods=&quot;2&quot; datatypes=&quot;MathematicalFunctionIdentity&quot; timedout=&quot;&quot; timedoutpods=&quot;&quot; timing=&quot;2.855&quot; parsetiming=&quot;0.&quot; parsetimedout=&quot;false&quot; recalculate=&quot;&quot; id=&quot;&quot; host=&quot;http://www1.wolframalpha.com&quot; server=&quot;14&quot; related=&quot;&quot; version=&quot;2.6&quot;&gt;
  &lt;pod title=&quot;Series representations&quot; scanner=&quot;MathematicalFunctionData&quot; id=&quot;SeriesRepresentations:MathematicalFunctionIdentityData&quot; position=&quot;700&quot; error=&quot;false&quot; numsubpods=&quot;3&quot;&gt;...&lt;/pod&gt;
  &lt;pod title=&quot;Integral representations&quot; scanner=&quot;MathematicalFunctionData&quot; id=&quot;IntegralRepresentations:MathematicalFunctionIdentityData&quot; position=&quot;800&quot; error=&quot;false&quot; numsubpods=&quot;3&quot;&gt;...&lt;/pod&gt;
&lt;sources count=&quot;0&quot;/&gt;
&lt;/queryresult&gt;</span></div></h2></div><div><h2 id="timeouts-and-asynchronous-behavior"><div class="_4aml"><span>Note that a recalculate call returns a result that is similar to a normal query. One difference is that it will not have <span class="_HR3c"><span>&lt;warnings&gt;</span></span> or <span class="_HR3c"><span>&lt;assumptions&gt;</span></span> elements, as those would have come in the original query. It might have a <span class="_HR3c"><span>&lt;sources&gt;</span></span> element, as new pods can specify new sources for their data. Most programmers will only be concerned with the <span class="_HR3c"><span>&lt;pod&gt;</span></span> elements from a recalculate result.</span></div></h2></div><div><h2 id="timeouts-and-asynchronous-behavior"><div class="_4aml"><span>To use the recalculate result, you splice the new pods into the set returned by the original query. To know where the pods belong, look at their position attributes. The position attributes use the same numbering scheme as the original query, so that the first pod above, with a position of 350, would be inserted between the existing pods with positions 300 and 400 (or whatever are the nearest numbers above and below 350). The recalculate pods often have higher positions than the pods from the original query, and thus belong at the end, but as the above example demonstrates, sometimes they are intended to be spliced in between existing pods. It is possible for a recalculate pod to have the same position number as a pod from the original query, in which case it is a new version of that pod, and you should replace the old one with the new one.</span></div></h2></div><div><h2 id="timeouts-and-asynchronous-behavior"><div class="_4aml"><span>If the original query used the async parameter, then it is possible for recalculate pods to be asynchronous as well. You handle these in the same way you would handle asynchronous pods in the original query.</span></div></h2></div><div><h2 id="miscellaneous-url-parameters"><div class="_UX7b"><span>Miscellaneous URL Parameters</span></div></h2></div><div><h2 id="miscellaneous-url-parameters"><div class="_4aml"><span>This section treats a few URL parameters that do not fit neatly in any other sections. Of the parameters listed here, only reinterpret is likely to be of widespread usefulness.</span></div></h2></div><div><div><div class="_1EgR"><span>reinterpret</span></div></div></div><div><h2 id="miscellaneous-url-parameters"><div class="_4aml"><span>Wolfram|Alpha has the ability to &quot;reinterpret&quot; queries that it does not understand, meaning that it can switch to a related query for which some results are available. The idea is to reduce the number of queries that fall through and produce no results, at the cost of giving the user results for something that might not be what they intended. When Wolfram|Alpha reinterprets a query, it produces a &lt;<a href="/api/documentation?scrollTo=reinterpret" class="_3BQD orange19RedHover _0SmN sc-34cb55e4-2 sc-34cb55e4-3 jojysd kPdgYi"><span class="sc-34cb55e4-0 hLNrE"><span>reinterpret</span></span></a>&gt; warning, as described in the section on <a href="/api/documentation?scrollTo=warnings" class="_3BQD orange19RedHover _xzt6 _hCSh sc-34cb55e4-2 sc-34cb55e4-3 jojysd kPdgYi"><span class="sc-34cb55e4-0 hLNrE"><span>Warnings</span></span></a>. If you want to enable this behavior, you must specify reinterpret=true in your query URL:</span></div></h2></div><div><h2 id="miscellaneous-url-parameters"><div class="_S_tS"><span>http://api.wolframalpha.com/v2/query?appid=DEMO&amp;input=kitty+danger<span class="_v_lT"><span>&amp;reinterpret=true</span></span></span></div></h2></div><div><h2 id="miscellaneous-url-parameters"><div class="_4aml"><span>This will allow Wolfram|Alpha to reinterpret the query &quot;kitty danger&quot; to get a more useful result. This is the default behavior on the website, and many clients will likely want to turn it on as well.</span></div></h2></div><div><div><div class="_1EgR"><span>ignorecase</span></div></div></div><div><h2 id="miscellaneous-url-parameters"><div class="_4aml"><span>By default, Wolfram|Alpha treats uppercase as significant in queries. It is generally quite flexible about case, and callers rarely need to be concerned with case in queries, but there are rare examples where it is useful to force Wolfram|Alpha to ignore case. This is done by setting <span class="_HR3c"><span>ignorecase=true</span></span>. An example of this is the query &quot;mpg&quot;, which is interpreted as &quot;miles per gallon&quot;, but MPG is also an airport code, among other things. The query &quot;MPG&quot; is also interpreted as &quot;miles per gallon&quot;, but an assumption is generated to let users specify that they want the airport code instead.</span></div></h2></div><div><h2 id="miscellaneous-url-parameters"><div class="_S_tS"><span>&lt;assumption type=&quot;Clash&quot; word=&quot;MPG&quot; template=&quot;Assuming &quot;${word}&quot; is ${desc1}. Use as ${desc2} instead&quot; count=&quot;6&quot;&gt;
  &lt;value name=&quot;Unit&quot; desc=&quot;a unit&quot; input=&quot;*C.MPG-_*Unit-&quot;/&gt;
  &lt;value name=&quot;AcronymClass&quot; desc=&quot;an acronym&quot; input=&quot;*C.MPG-_*AcronymClass-&quot;/&gt;
  &lt;value name=&quot;Airport&quot; desc=&quot;an airport&quot; input=&quot;*C.MPG-_*Airport-&quot;/&gt;
  &lt;value name=&quot;Financial&quot; desc=&quot;a financial entity&quot; input=&quot;*C.MPG-_*Financial-&quot;/&gt;
  &lt;value name=&quot;FileFormat&quot; desc=&quot;a file format&quot; input=&quot;*C.MPG-_*FileFormat-&quot;/&gt;
  &lt;value name=&quot;Protein&quot; desc=&quot;a protein&quot; input=&quot;*C.MPG-_*Protein-&quot;/&gt;
&lt;/assumption&gt;</span></div></h2></div><div><h2 id="miscellaneous-url-parameters"><div class="_4aml"><span>This assumption is not generated for the query &quot;mpg&quot;, because the mismatched case makes it a poor fit. If you specify <span class="_HR3c"><span>ignorecase=true</span></span>, however, then the airport code assumption is generated, making the query &quot;mpg&quot; essentially equivalent to &quot;MPG&quot;. Be aware that the ignorecase parameter will often reinterpret short words such as &quot;the&quot; and &quot;for&quot; as acronyms, file extensions, airports or any number of other uppercase entities.</span></div></h2></div><div><div><div class="_1EgR"><span>translation</span></div></div></div><div><h2 id="miscellaneous-url-parameters"><div class="_4aml"><span>Wolfram|Alpha is able to translate some simple non-English queries into English. For example, the query &quot;uno dos tres&quot; is automatically translated into &quot;one two three&quot; and handled as such. A <span class="_HR3c"><span>&lt;translation&gt;</span></span> warning (described in the section on <a href="/api/documentation?scrollTo=warnings" class="_3BQD orange19RedHover _xzt6 _hCSh sc-34cb55e4-2 sc-34cb55e4-3 jojysd kPdgYi"><span class="sc-34cb55e4-0 hLNrE"><span>Warnings</span></span></a>) is generated in such cases to inform the caller that a translation has occurred. If you want to turn automatic translation on, specify translation=true in your query URL.</span></div></h2></div><div><div><div class="_1EgR"><span>signature</span></div></div></div><div><h2 id="miscellaneous-url-parameters"><div class="_4aml"><span>Because the AppID is provided in plain text form in the query URL, some clients might be concerned that a third party could steal and misuse their AppID. There is a special URL parameter called sig that can be used to supply a specially computed signature in each of your query URLs that prevents anyone else from using your AppID. <a href="/contact-us/general" class="_3BQD _dGJe _ZJzB sc-34cb55e4-2 sc-34cb55e4-3 cwjaCb kPdgYi _h_2l"><span class="sc-34cb55e4-0 hLNrE"><span>Contact Wolfram|Alpha</span></span></a> for more information about how to use this feature.</span></div></h2></div><div><div><div class="_1EgR"><span>units</span></div></div></div><div><h2 id="miscellaneous-url-parameters"><div class="_4aml"><span>By default, measurement systems are selected automatically based on location. The units parameter allows you to override this and pick your preferred measurement system—either &quot;metric&quot; or &quot;nonmetric&quot; (US customary units).</span></div></h2></div><div><h2 id="warnings"><div class="_UX7b"><span>Warnings</span></div></h2></div><div><h2 id="warnings"><div class="_4aml"><span>Wolfram|Alpha can return warnings for some circumstances. These generally correspond to situations where Wolfram|Alpha interprets your input as being different than what was actually entered. Warnings on the website appear at the top, above all other output. In the API, they come back as a <span class="_HR3c"><span>&lt;warnings&gt;</span></span> element located near the end of the XML result (just before <span class="_HR3c"><span>&lt;sources&gt;</span></span>). At the moment, there are only four possible warning types, listed below. Each one is represented by its own subelement of <span class="_HR3c"><span>&lt;warnings&gt;</span></span>. More warning subelements are likely to be added in the future, so make sure that your code will not break if new, unrecognized elements are added.</span></div></h2></div><div><div><div class="_1EgR"><span>&lt;reinterpret&gt;</span></div></div></div><div><h2 id="warnings"><div class="_4aml"><span>Wolfram|Alpha can automatically try to reinterpret a query that it does not understand but that seems close to one that it can. This behavior drastically reduces the number of failed queries, at the cost of potentially giving the user a result that is far from the original intent. For example, if you try the query &quot;kitty danger&quot; on the website, it will reinterpret this nonsensical query as simply &quot;kitty&quot;, and provide a message in the warnings section at the top of the page:</span></div></h2></div><div><div><img src="/_next/static/images/16-reinterpret_zwxR5qpK.png" alt="Formula fields example" class="_qxSu"/></div></div><div><h2 id="warnings"><div class="_4aml"><span>On the website, this &quot;reinterpretation&quot; behavior is the default, but in the API it is not, for reasons of backward compatibility. If you want this behavior, and most clients probably do, then you must enable it using the reinterpret=true URL parameter (as described above). When Wolfram|Alpha performs a reinterpretation, it reports this using a <span class="_HR3c"><span>&lt;reinterpret&gt;</span></span> warning element:</span></div></h2></div><div><h2 id="warnings"><div class="_S_tS"><span>&lt;reinterpret text=&quot;Using closest Wolfram|Alpha interpretation:&quot; new=&quot;kitty&quot; score=&quot;0.416667&quot; level=&quot;medium&quot;&gt;
  &lt;alternative score=&quot;0.385429&quot; level=&quot;medium&quot;&gt;danger&lt;/alternative&gt;
&lt;/reinterpret&gt;</span></div></h2></div><div><h2 id="warnings"><div class="_4aml"><span>This element alerts you that the original query has been modified, with the new interpretation being given in the new attribute. In some cases, additional suggested interpretations are provided as <span class="_HR3c"><span>&lt;alternative&gt;</span></span> subelements to the <span class="_HR3c"><span>&lt;reinterpret&gt;</span></span> element. Here is the <span class="_HR3c"><span>&lt;reinterpret&gt;</span></span> element from the query &quot;blue mustang moon&quot;:</span></div></h2></div><div><h2 id="warnings"><div class="_S_tS"><span>&lt;reinterpret text=&quot;Using closest Wolfram|Alpha interpretation:&quot; new=&quot;blue moon&quot;&gt;
  &lt;alternative&gt;blue&lt;/alternative&gt;
  &lt;alternative&gt;moon&lt;/alternative&gt;
&lt;/reinterpret&gt;</span></div></h2></div><div><div><div class="_1EgR"><span>&lt;spellcheck&gt;</span></div></div></div><div><h2 id="warnings"><div class="_4aml"><span>If you enter &quot;Chicag&quot; as a query, Wolfram|Alpha assumes you meant &quot;Chicago.&quot; On the website, it says &quot;Interpreting &#x27;Chicag&#x27; as &#x27;Chicago&#x27;&quot;. Here is the relevant part of the XML result:</span></div></h2></div><div><h2 id="warnings"><div class="_S_tS"><span>&lt;warnings count=&quot;1&quot;&gt;
  <span class="_v_lT"><span>&lt;spellcheck word=&quot;Chicag&quot; suggestion=&quot;Chicago&quot; text=&quot;&amp;quot;chicag&amp;quot; as &amp;quot;chicago&amp;quot;&quot;/&gt;</span></span>
&lt;/warnings&gt;</span></div></h2></div><div><h2 id="warnings"><div class="_4aml"><span>The <span class="_HR3c"><span>&lt;spellcheck&gt;</span></span> element has word and suggestion attributes, which give the actual word entered and the replacement word, respectively, and a text attribute, which gives the same string you see on the website.</span></div></h2></div><div><div><div class="_1EgR"><span>&lt;delimiters&gt;</span></div></div></div><div><h2 id="warnings"><div class="_4aml"><span>If you enter a query with mismatched delimiters like &quot;sin(x&quot;, Wolfram|Alpha attempts to fix the problem and reports this as a warning. On the website it displays a message stating, &quot;An attempt was made to fix mismatched parentheses, brackets or braces.&quot; Here is the <span class="_HR3c"><span>&lt;warnings&gt;</span></span> element in the API result:</span></div></h2></div><div><h2 id="warnings"><div class="_S_tS"><span>&lt;warnings count=&quot;1&quot;&gt;
  <span class="_v_lT"><span>&lt;delimiters text=&quot;An attempt was made to fix mismatched parentheses, brackets, or braces.&quot;/&gt;</span></span>
&lt;/warnings&gt;</span></div></h2></div><div><div><div class="_1EgR"><span>&lt;translation&gt;</span></div></div></div><div><h2 id="warnings"><div class="_4aml"><span>When using the translation parameter, Wolfram|Alpha will attempt to translate simple queries from non-English languages into English. When it does this, you will get a <span class="_HR3c"><span>&lt;translation&gt;</span></span> element in the API result. This example is from the query &quot;wetter heute&quot;, which is translated into &quot;weather today&quot;:</span></div></h2></div><div><h2 id="warnings"><div class="_S_tS"><span>&lt;warnings count=&quot;1&quot;&gt;
  <span class="_v_lT"><span>&lt;translation phrase=&quot;wetter heute&quot; trans=&quot;weather today&quot; lang=&quot;German&quot; text=&quot;Translating from German to &amp;quot;weather today&amp;quot;/&gt;</span></span>
&lt;/warnings&gt;</span></div></h2></div><div><h2 id="warnings"><div class="_4aml"><span>The <span class="_HR3c"><span>&lt;translation&gt;</span></span> element has <span class="_v_lT"><span>phrase</span></span>, <span class="_v_lT"><span>trans</span></span>, <span class="_v_lT"><span>lang</span></span> and <span class="_v_lT"><span>text</span></span> attributes. At present, the only way to see the <span class="_HR3c"><span>&lt;translation&gt;</span></span> warning is to turn on automatic translation with the translation=true URL parameter. This behavior is likely to change over time.</span></div></h2></div><div><h2 id="queries-that-are-not-understood"><div class="_UX7b"><span>Queries That Are Not Understood</span></div></h2></div><div><h2 id="queries-that-are-not-understood"><div class="_4aml"><span>If, after attempting the remedies from the <a href="/api/documentation?scrollTo=warnings" class="_3BQD orange19RedHover _xzt6 _hCSh sc-34cb55e4-2 sc-34cb55e4-3 jojysd kPdgYi"><span class="sc-34cb55e4-0 hLNrE"><span>Warnings</span></span></a> section, a query still cannot be understood by Wolfram|Alpha, the <span class="_HR3c"><span>&lt;queryresult&gt;</span></span> tag will have its success attribute set to false and the error attribute also false. For example, the query &quot;fogasdgrd masdustasn&quot; returns the following <span class="_HR3c"><span>&lt;queryresult&gt;</span></span> element:</span></div></h2></div><div><h2 id="queries-that-are-not-understood"><div class="_S_tS"><span>&lt;queryresult <span class="_v_lT"><span>success=&quot;false&quot; error=&quot;false&quot;</span></span> numpods=&quot;0&quot; datatypes=&quot;&quot; 
             timedout=&quot;&quot; timedoutpods=&quot;&quot; timing=&quot;1.018&quot; parsetiming=&quot;0.068&quot; parsetimedout=&quot;false&quot; 
             recalculate=&quot;&quot; id=&quot;&quot; host=&quot;http://www1.wolframalpha.com&quot; server=&quot;12&quot; related=&quot;&quot; version=&quot;2.6&quot;&gt;</span></div></h2></div><div><h2 id="queries-that-are-not-understood"><div class="_4aml"><span>On the website, this type of query returns a page that says &quot;Wolfram|Alpha doesn&#x27;t know how to interpret your input.&quot; We call these types of results &quot;fallthrough results&quot;. Because Wolfram|Alpha could not understand this query, there is no pod content in the output, but for such queries there can be various other types of elements in the API result. The following sections describe the possible element types.</span></div></h2></div><div><div><div class="_1EgR"><span>&lt;didyoumeans&gt;</span></div></div></div><div><h2 id="queries-that-are-not-understood"><div class="_4aml"><span>The Wolfram|Alpha website sometimes has a &quot;Did you mean...&quot; prompt that suggests a different query close in meaning to the one you entered. This alternative suggestion is available in the API via the <span class="_HR3c"><span>&lt;didyoumeans&gt;</span></span> element. Here is an example for the query &quot;kitty danger&quot;, which suggests &quot;kitty&quot; and &quot;danger&quot; as possible alternatives:</span></div></h2></div><div><h2 id="queries-that-are-not-understood"><div class="_S_tS"><span>&lt;queryresult success=&quot;false&quot; error=&quot;false&quot; numpods=&quot;0&quot; datatypes=&quot;&quot; timedout=&quot;&quot; timedoutpods=&quot;&quot; timing=&quot;1.355&quot; parsetiming=&quot;0.329&quot; parsetimedout=&quot;false&quot; recalculate=&quot;&quot; id=&quot;&quot; host=&quot;http://www1.wolframalpha.com&quot; server=&quot;14&quot; related=&quot;&quot; version=&quot;2.6&quot;&gt;
  <span class="_v_lT"><span>&lt;didyoumeans count=&quot;2&quot;&gt;
    &lt;didyoumean score=&quot;0.416667&quot; level=&quot;medium&quot;&gt;kitty&lt;/didyoumean&gt;
    &lt;didyoumean score=&quot;0.385429&quot; level=&quot;medium&quot;&gt;danger&lt;/didyoumean&gt;
  &lt;/didyoumeans&gt;</span></span>
&lt;/queryresult&gt;</span></div></h2></div><div><h2 id="queries-that-are-not-understood"><div class="_4aml"><span>The <span class="_HR3c"><span>&lt;didyoumeans&gt;</span></span> element&#x27;s count attribute is the number of <span class="_HR3c"><span>&lt;didyoumean&gt;</span></span> subelements generated for the query. Each <span class="_HR3c"><span>&lt;didyoumean&gt;</span></span> subelement includes two attributes, a score between 0 and 1 and a level (low, medium or high), both of which describe the likelihood that each <span class="_HR3c"><span>&lt;didyoumean&gt;</span></span> suggestion is closer to the original intent of the query. This element is useful in testing. Because it is difficult to verify the relevance of these suggestions, we recommend against using them in your implementations.</span></div></h2></div><div><div><div class="_1EgR"><span>&lt;languagemsg&gt;</span></div></div></div><div><h2 id="queries-that-are-not-understood"><div class="_4aml"><span>If Wolfram|Alpha cannot understand your query but recognizes it as a foreign language, it will generate a <span class="_HR3c"><span>&lt;languagemsg&gt;</span></span> element. Here is an example for the query &quot;wo noch nie&quot;:</span></div></h2></div><div><h2 id="queries-that-are-not-understood"><div class="_S_tS"><span>&lt;queryresult success=&quot;false&quot; error=&quot;false&quot; numpods=&quot;0&quot; datatypes=&quot;&quot; timedout=&quot;&quot; timedoutpods=&quot;&quot; timing=&quot;2.387&quot; parsetiming=&quot;0.08&quot; parsetimedout=&quot;false&quot; recalculate=&quot;&quot; id=&quot;&quot; host=&quot;http://www1.wolframalpha.com&quot; server=&quot;12&quot; related=&quot;&quot; version=&quot;2.6&quot;&gt;
  <span class="_v_lT"><span>&lt;languagemsg english=&quot;Wolfram|Alpha does not yet support German.&quot; other=&quot;Wolfram|Alpha versteht noch kein Deutsch.&quot;/&gt;</span></span>
  &lt;tips count=&quot;1&quot;&gt;...&lt;/tips&gt;
&lt;/queryresult&gt;</span></div></h2></div><div><h2 id="queries-that-are-not-understood"><div class="_4aml"><span>The <span class="_HR3c"><span>&lt;languagemsg&gt;</span></span> element has an English attribute giving the textual message in English, and another attribute giving the textual message in whatever language the query appears to be. Note that setting <span class="_HR3c"><span>translation=true</span></span> in your query (as described under <a href="/api/documentation?scrollTo=miscellaneous-url-parameters" class="_3BQD orange19RedHover _xzt6 _hCSh sc-34cb55e4-2 sc-34cb55e4-3 jojysd kPdgYi"><span class="sc-34cb55e4-0 hLNrE"><span>Miscellaneous URL Parameters</span></span></a>) will prompt Wolfram|Alpha to translate certain simple queries, in some cases giving a result for the English-language equivalent (along with a <span class="_HR3c"><span>&lt;translation&gt;</span></span> warning) instead of a <span class="_HR3c"><span>&lt;languagemsg&gt;</span></span> element.</span></div></h2></div><div><div><div class="_1EgR"><span>&lt;futuretopic&gt;</span></div></div></div><div><h2 id="queries-that-are-not-understood"><div class="_4aml"><span>Queries that refer to topics that are under development generate a &lt;futuretopic&gt; element. This example is for the query &quot;Microsoft Windows&quot;:</span></div></h2></div><div><h2 id="queries-that-are-not-understood"><div class="_S_tS"><span>&lt;queryresult success=&quot;false&quot; error=&quot;false&quot; numpods=&quot;0&quot; datatypes=&quot;FutureTopic&quot; 
             timedout=&quot;&quot; timedoutpods=&quot;&quot; timing=&quot;0.325&quot; parsetiming=&quot;0.142&quot; parsetimedout=&quot;false&quot;
             recalculate=&quot;http://www1.wolframalpha.com/api/v2/recalc.jsp?id=MSPa131bb386a30ae881cb0000356575b5c6eda0g3&amp;s=14&quot; id=&quot;MSPa141bb386a30ae881cb00000fhbgiaigf0hi0g7&quot;
             host=&quot;http://www1.wolframalpha.com&quot; server=&quot;14&quot; 
             related=&quot;http://www1.wolframalpha.com/api/v2/relatedQueries.jsp?id=MSPa151bb386a30ae881cb00002f7da6d462h97776&amp;s=14&quot; version=&quot;2.6&quot;&gt;
&lt;sources count=&quot;0&quot;/&gt;
&lt;futuretopic topic=&quot;Operating Systems&quot; msg=&quot;Development of this topic is under investigation...&quot;/&gt;
&lt;/queryresult&gt;</span></div></h2></div><div><h2 id="queries-that-are-not-understood"><div class="_4aml"><span>The <span class="_v_lT"><span>url</span></span> attribute gives a link to an HTML page of sample queries in the topic.</span></div></h2></div><div><div><div class="_1EgR"><span>&lt;examplepage&gt;</span></div></div></div><div><h2 id="queries-that-are-not-understood"><div class="_4aml"><span>When a query cannot be meaningfully computed but is recognized by Wolfram|Alpha as a category for which a set of example queries has already been prepared, it generates an <span class="_HR3c"><span>&lt;examplepage&gt;</span></span> element. Here is the output generated for the query &quot;chemical&quot; (you can ignore the <span class="_HR3c"><span>&lt;assumption&gt;</span></span> element that is also generated):</span></div></h2></div><div><h2 id="queries-that-are-not-understood"><div class="_S_tS"><span>&lt;queryresult success=&quot;false&quot; error=&quot;false&quot; numpods=&quot;0&quot; datatypes=&quot;&quot; timedout=&quot;&quot; timedoutpods=&quot;&quot; timing=&quot;0.638&quot; parsetiming=&quot;0.229&quot; parsetimedout=&quot;false&quot; recalculate=&quot;&quot; id=&quot;MSPa421c679i70ha8g50ff00003370ce1317h24399&quot; host=&quot;http://www1.wolframalpha.com&quot; server=&quot;13&quot; related=&quot;&quot; version=&quot;2.6&quot;&gt;
  &lt;assumptions count=&quot;1&quot;&gt;...&lt;/assumptions&gt;
  <span class="_v_lT"><span>&lt;examplepage category=&quot;ChemicalCompounds&quot; url=&quot;http://www.wolframalpha.com/examples/ChemicalCompounds-content.html&quot;/&gt;</span></span>
&lt;/queryresult&gt;</span></div></h2></div><div><h2 id="queries-that-are-not-understood"><div class="_4aml"><span>The <span class="_v_lT"><span>url</span></span> attribute gives a link to an HTML page of sample queries in the topic.</span></div></h2></div><div><div><div class="_1EgR"><span>&lt;tips&gt;</span></div></div></div><div><h2 id="queries-that-are-not-understood"><div class="_4aml"><span>The <span class="_HR3c"><span>&lt;tips&gt;</span></span> element is generated to give helpful feedback when Wolfram|Alpha is unable to formulate any of the other elements <a href="/api/documentation?scrollTo=queries-that-are-not-understood" class="_3BQD orange19RedHover _xzt6 _hCSh sc-34cb55e4-2 sc-34cb55e4-3 jojysd kPdgYi"><span class="sc-34cb55e4-0 hLNrE"><span>in this section</span></span></a> from your query. Here is the full output from the query &quot;fogasdgrd masdustasn&quot;:</span></div></h2></div><div><h2 id="queries-that-are-not-understood"><div class="_S_tS"><span>&lt;queryresult success=&quot;false&quot; error=&quot;false&quot; numpods=&quot;0&quot; datatypes=&quot;&quot; timedout=&quot;&quot; timedoutpods=&quot;&quot; timing=&quot;1.198&quot; parsetiming=&quot;0.086&quot; parsetimedout=&quot;false&quot; recalculate=&quot;&quot; id=&quot;&quot; host=&quot;http://www1.wolframalpha.com&quot; server=&quot;13&quot; related=&quot;&quot; version=&quot;2.6&quot;&gt;
  <span class="_v_lT"><span>&lt;tips count=&quot;1&quot;&gt;
    &lt;tip text=&quot;Check your spelling, and use English&quot;/&gt;</span></span>
  &lt;/tips&gt;
&lt;/queryresult&gt;</span></div></h2></div><div><h2 id="queries-that-are-not-understood"><div class="_4aml"><span>Each <span class="_HR3c"><span>&lt;tips&gt;</span></span> subelement contains a text attribute with a message that you might choose to display to users (like the website does) so that they may refine their queries for meaningful results.</span></div></h2></div><div><h2 id="errors"><div class="_UX7b"><span>Errors</span></div></h2></div><div><h2 id="errors"><div class="_4aml"><span>There are several circumstances that can trigger errors from the API. Examples of such error conditions are when the input parameters are not legal in some way, the AppID is incorrect or an internal error occurs in Wolfram|Alpha. Errors are indicated by the error=true attribute in the <span class="_HR3c"><span>&lt;queryresult&gt;</span></span> tag. Error results will have an <span class="_HR3c"><span>&lt;error&gt;</span></span> element that gives a code and short description of the error. For example, this query:</span></div></h2></div><div><h2 id="errors"><div class="_S_tS"><span>http://api.wolframalpha.com/v2/query?input=mortgage</span></div></h2></div><div><h2 id="errors"><div class="_4aml"><span>returns the following:</span></div></h2></div><div><h2 id="errors"><div class="_S_tS"><span>&lt;queryresult <span class="_v_lT"><span>success=&quot;false&quot; error=&quot;true&quot;</span></span> numpods=&quot;0&quot; datatypes=&quot;&quot; timedout=&quot;&quot; timedoutpods=&quot;&quot; timing=&quot;0.02&quot; parsetiming=&quot;0.&quot; parsetimedout=&quot;false&quot; recalculate=&quot;&quot; id=&quot;&quot; host=&quot;http://www1.wolframalpha.com&quot; server=&quot;13&quot; related=&quot;&quot; version=&quot;2.6&quot;&gt;
  &lt;error&gt;
    &lt;code&gt;2&lt;/code&gt;
    &lt;msg&gt;Appid missing&lt;/msg&gt;
  &lt;/error&gt;
&lt;/queryresult&gt;</span></div></h2></div><div><h2 id="errors"><div class="_4aml"><span>Errors are distinct from queries that fail because Wolfram|Alpha cannot make sense of the input. As discussed in <a href="/api/documentation?scrollTo=queries-that-are-not-understood" class="_3BQD orange19RedHover _xzt6 _hCSh sc-34cb55e4-2 sc-34cb55e4-3 jojysd kPdgYi"><span class="sc-34cb55e4-0 hLNrE"><span>the previous section</span></span></a>, those results have the <span class="_HR3c"><span>success=false</span></span> attribute, but not <span class="_HR3c"><span>error=true</span></span>. Rather, errors are generated when Wolfram|Alpha experiences a problem that causes it to stop short of the scan stage described earlier.</span></div></h2></div><div><h2 id="errors"><div class="_4aml"><span>It is also possible that the processing of individual pods can fail in some way. In such cases, the query as a whole succeeds, but a specific pod will have the <span class="_HR3c"><span>error=true</span></span> attribute. The body of the <span class="_HR3c"><span>&lt;pod&gt;</span></span> element might then contain an <span class="_HR3c"><span>&lt;error&gt;</span></span> element that describes the error condition.</span></div></h2></div><div><h2 id="the-validatequery-function"><div class="_UX7b"><span>The validatequery Function</span></div></h2></div><div><h2 id="the-validatequery-function"><div class="_4aml"><span>So far we have been dealing with the query function. There is another function in the API called validatequery. This is a specialized function that performs only the initial parsing phase of Wolfram|Alpha processing. Its purpose is to quickly determine whether Wolfram|Alpha can make sense of a given input, bypassing the more time-consuming stages of fully analyzing the input and preparing results. Here is a sample URL that calls the validatequery function:</span></div></h2></div><div><h2 id="the-validatequery-function"><div class="_S_tS"><span>http://api.wolframalpha.com/v2/<span class="_v_lT"><span>validatequery</span></span>?appid=DEMO&amp;input=pi</span></div></h2></div><div><h2 id="the-validatequery-function"><div class="_4aml"><span>Here is the result:</span></div></h2></div><div><h2 id="the-validatequery-function"><div class="_S_tS"><span>&lt;validatequeryresult success=&quot;true&quot; error=&quot;false&quot; timing=&quot;3.556&quot; parsetiming=&quot;3.54&quot; version=&quot;2.6&quot;&gt;
  &lt;assumptions count=&quot;1&quot;&gt;
    &lt;assumption type=&quot;Clash&quot; word=&quot;pi&quot; template=&quot;Assuming &quot;${word}&quot; is ${desc1}. Use as ${desc2} instead&quot; count=&quot;6&quot;&gt;
      &lt;value name=&quot;NamedConstant&quot; desc=&quot;a mathematical constant&quot; input=&quot;*C.pi-_*NamedConstant-&quot;/&gt;
      &lt;value name=&quot;Character&quot; desc=&quot;a character&quot; input=&quot;*C.pi-_*Character-&quot;/&gt;
      &lt;value name=&quot;MathWorld&quot; desc=&quot; referring to a mathematical definition&quot; input=&quot;*C.pi-_*MathWorld-&quot;/&gt;
      &lt;value name=&quot;MathWorldClass&quot; desc=&quot;a class of mathematical terms&quot; input=&quot;*C.pi-_*MathWorldClass-&quot;/&gt;
      &lt;value name=&quot;Movie&quot; desc=&quot;a movie&quot; input=&quot;*C.pi-_*Movie-&quot;/&gt;
      &lt;value name=&quot;Word&quot; desc=&quot;a word&quot; input=&quot;*C.pi-_*Word-&quot;/&gt;
    &lt;/assumption&gt;
  &lt;/assumptions&gt;
&lt;/validatequeryresult&gt;</span></div></h2></div><div><h2 id="the-validatequery-function"><div class="_4aml"><span>The success attribute of the <span class="_HR3c"><span>&lt;validatequeryresult&gt;</span></span> element tells you whether Wolfram|Alpha could successfully parse the input string. If its value is true, then it is highly likely that Wolfram|Alpha can return sensible results for this input using the query function.</span></div></h2></div><div><h2 id="the-validatequery-function"><div class="_4aml"><span>The <span class="_HR3c"><span>&lt;validatequeryresult&gt;</span></span> element has no pod content, but it can contain <span class="_HR3c"><span>&lt;assumptions&gt;</span></span>, <span class="_HR3c"><span>&lt;warnings&gt;</span></span> and <span class="_HR3c"><span>&lt;error&gt;</span></span> elements. You can use <span class="_HR3c"><span>&lt;assumptions&gt;</span></span> information in the same way as you would from the result of the query function, such as to perform a subsequent query call with a modified assumption. Not all of the assumptions that can be generated by a query call appear in the results of validatequery. Some assumptions are generated in later stages of processing that do not occur in validatequery, and these assumptions will not be present in the output.</span></div></h2></div><div><h2 id="handling-future-enhancements"><div class="_UX7b"><span>Handling Future Enhancements</span></div></h2></div><div><h2 id="handling-future-enhancements"><div class="_4aml"><span>The Full Results API will continue to evolve and grow over time, as new capabilities are added to Wolfram|Alpha. There are a few steps you can take to help ensure that your programs continue to work in the future. You will notice that query URLs include the version number &quot;v2&quot; at the moment, so changes to the API that are likely to break a significant fraction of existing programs can be handled at our end by changing the query URL to &quot;v3&quot; and keeping the old behavior in &quot;v2&quot; URLs. Most future changes, however, are additions that should not break existing clients, as long as they are written with future flexibility in mind.</span></div></h2></div><div><h2 id="handling-future-enhancements"><div class="_4aml"><span>The most important thing you can do to avoid problems with future updates is to be tolerant of new element types and attributes showing up. For example, top-level elements (that is, direct subelements of <span class="_HR3c"><span>&lt;queryresult&gt;</span></span>) include <span class="_HR3c"><span>&lt;pod&gt;</span></span>, <span class="_HR3c"><span>&lt;warnings&gt;</span></span>, <span class="_HR3c"><span>&lt;assumptions&gt;</span></span>, <span class="_HR3c"><span>&lt;sources&gt;</span></span>, etc., and it is almost certain that new elements will be added. This is true at all levels of the XML hierarchy. The basic principle is to handle elements you know about, but ignore ones that you don&#x27;t. Similarly for attributes—elements may acquire new attributes over time, although this is generally quite easy for client programs to accommodate by simply ignoring them.</span></div></h2></div><div><h2 id="handling-future-enhancements"><div class="_4aml"><span>Be aware that Wolfram|Alpha output is constantly changing. Queries that were interpreted in one way today might be interpreted differently (more accurately, presumably) tomorrow. The number and types of pods produced by some queries will change over time. This documentation uses &quot;pi&quot; as an example query in many places, and the example outputs had to be redone recently because a new type of pod was introduced in the output for that query. If you are trying to restrict Wolfram|Alpha output to a subset of pods for a given query, using the excludepodid and includepodid parameters is generally preferable to relying on podtitle or podindex parameters, as titles and positions are more likely to drift over time than IDs.</span></div></h2></div><div><h2 id="handling-future-enhancements"><div class="_4aml _qHhy"><span>As mentioned above, asynchronous pods have an error attribute that indicates whether the content was generated correctly or not. Currently, synchronous pods are simply not present in the output if there was an error generating or formatting them. In the future, this is likely to change, so that the initial query result might come back with some pods having error=true. Write your code so as to detect error pods and not to try to display them. Error pods will possibly have an <span class="_HR3c"><span>&lt;error&gt;</span></span> subelement that describes the problem. This error information is intended for programmers, not for display to your users.</span></div></h2></div></section></div></div></div></div></div><div class="_uRBj"><div class="_0mhr"><div class="_bcm5 _taVo"><a href="https://developer.wolframalpha.com" class="_3BQD _dGJe _ZJzB sc-34cb55e4-2 sc-34cb55e4-3 cwjaCb kPdgYi _PZan"><span class="sc-34cb55e4-0 hLNrE"><span>Get Started</span></span></a><span class="_Y4h6"><span>free non-commercial development account</span></span></div><div class="_bcm5"><a href="/contact-us/general" class="_3BQD _dGJe _PZan sc-34cb55e4-2 sc-34cb55e4-3 cwjaCb kPdgYi"><span class="sc-34cb55e4-0 hLNrE"><span>Contact Us</span></span></a><span class="_Y4h6"><span>flexible commercial licensing with low monthly plans available</span></span></div></div></div></div></main><footer class="sc-ef5a1635-0 bjcLUr"><ul class="sc-9bd020f4-0 ODzEY"><li class="sc-4fa8b0c-0 expwDU"><a href="https://www.wolframalpha.com/pro" class="_3BQD grey7OrangeHoverNoBorderNoBg defaultLink sc-34cb55e4-2 sc-34cb55e4-3 gUYtEt cAcIXE"><span class="sc-34cb55e4-0 hLNrE"><span>Pro</span></span></a></li><li class="sc-4fa8b0c-0 expwDU"><a href="/mobile" class="_3BQD grey7OrangeHoverNoBorderNoBg defaultLink sc-34cb55e4-2 sc-34cb55e4-3 gUYtEt cAcIXE"><span class="sc-34cb55e4-0 hLNrE"><span>Mobile Apps</span></span></a></li><li class="sc-4fa8b0c-0 expwDU"><a href="https://products.wolframalpha.com" class="_3BQD grey7OrangeHoverNoBorderNoBg defaultLink sc-34cb55e4-2 sc-34cb55e4-3 gUYtEt cAcIXE"><span class="sc-34cb55e4-0 hLNrE"><span>Products</span></span></a></li><li class="sc-4fa8b0c-0 expwDU"><a href="/enterprise" class="_3BQD grey7OrangeHoverNoBorderNoBg defaultLink sc-34cb55e4-2 sc-34cb55e4-3 gUYtEt cAcIXE"><span class="sc-34cb55e4-0 hLNrE"><span>Business</span></span></a></li><li class="sc-4fa8b0c-0 expwDU"><a href="/api" class="_3BQD grey7OrangeHoverNoBorderNoBg defaultLink sc-34cb55e4-2 sc-34cb55e4-3 gUYtEt cAcIXE"><span class="sc-34cb55e4-0 hLNrE"><span>API &amp; Developer Solutions</span></span></a></li><li class="sc-4fa8b0c-0 expwDU"><a href="https://www.wolfram.com/resources/tools-for-AIs/" class="_3BQD grey7OrangeHoverNoBorderNoBg defaultLink sc-34cb55e4-2 sc-34cb55e4-3 gUYtEt cAcIXE"><span class="sc-34cb55e4-0 hLNrE"><span>LLM Solutions</span></span></a></li></ul><ul class="sc-9bd020f4-0 ODzEY"><li class="sc-4fa8b0c-0 expwDU"><a href="https://www.wolframalpha.com/resources" class="_3BQD grey7OrangeHoverNoBorderNoBg defaultLink sc-34cb55e4-2 sc-34cb55e4-3 gUYtEt cAcIXE"><span class="sc-34cb55e4-0 hLNrE"><span>Resources &amp; Tools</span></span></a></li><li class="sc-4fa8b0c-0 expwDU"><a href="https://www.wolframalpha.com/about" class="_3BQD grey7OrangeHoverNoBorderNoBg defaultLink sc-34cb55e4-2 sc-34cb55e4-3 gUYtEt cAcIXE"><span class="sc-34cb55e4-0 hLNrE"><span>About</span></span></a></li><li class="sc-4fa8b0c-0 expwDU"><a href="https://www.wolframalpha.com/contact-us" class="_3BQD grey7OrangeHoverNoBorderNoBg defaultLink sc-34cb55e4-2 sc-34cb55e4-3 gUYtEt cAcIXE"><span class="sc-34cb55e4-0 hLNrE"><span>Contact</span></span></a></li><li class="sc-4fa8b0c-0 expwDU"><a href="https://www.wolframalpha.com/social" class="_3BQD grey7OrangeHoverNoBorderNoBg defaultLink sc-34cb55e4-2 sc-34cb55e4-3 gUYtEt cAcIXE"><span class="sc-34cb55e4-0 hLNrE"><span>Connect</span></span><ul class="sc-f88f312b-0 eqFKRt"><li class="sc-f88f312b-1 cfByJr"><svg viewBox="0 0 14 14"><path class="mainColor" fill="#777" d="M14 1.5v11a1.5 1.5 0 0 1-1.5 1.5H9.834V8.463h1.894L12 6.35H9.834V5c0-.612.17-1.028 1.047-1.028H12V2.084A15.041 15.041 0 0 0 10.369 2C8.756 2 7.65 2.984 7.65 4.794v1.56h-1.9v2.112h1.903V14H1.5A1.5 1.5 0 0 1 0 12.5v-11A1.5 1.5 0 0 1 1.5 0h11A1.5 1.5 0 0 1 14 1.5z"></path></svg></li><li class="sc-f88f312b-1 cfByJr"><svg viewBox="0 0 42 42"><path class="mainColor" d="M37.5 0A4.5 4.5 0 0142 4.5v33a4.5 4.5 0 01-4.5 4.5h-33A4.5 4.5 0 010 37.5v-33A4.5 4.5 0 014.5 0zM15.21 5.727H6.681l11.18 16.452-11.18 13.14h2.526l9.775-11.49 7.808 11.49h8.527L23.724 18.256l10.661-12.53h-2.526l-9.257 10.88-7.393-10.88zM13.998 7.65L31.86 33.483h-3.88L10.117 7.65h3.88z" fill="#777"></path></svg></li><li class="sc-f88f312b-1 cfByJr"><svg viewBox="0 0 14 14"><path class="mainColor" fill="#777" d="M12.5 0h-11A1.5 1.5 0 0 0 0 1.5v11A1.5 1.5 0 0 0 1.5 14h11a1.5 1.5 0 0 0 1.5-1.5v-11A1.5 1.5 0 0 0 12.5 0zM9.928 11.381c-.266.285-.975.619-1.903.619-2.36 0-2.872-1.734-2.872-2.747V6.441h-.928a.195.195 0 0 1-.194-.194V4.919a.33.33 0 0 1 .222-.313C5.466 4.178 5.843 3.122 5.9 2.32c.016-.216.128-.319.313-.319h1.384c.106 0 .194.087.194.194v2.25h1.621c.107 0 .194.087.194.194v1.596a.195.195 0 0 1-.194.194H7.784v2.603c0 .669.463 1.047 1.329.7.093-.037.175-.062.25-.043.068.015.112.065.143.153l.431 1.256c.032.1.063.21-.009.284z"></path></svg></li><li class="sc-f88f312b-1 cfByJr"><svg viewBox="0 0 14 14"><path class="mainColor" fill="#777" d="M13 0H.997C.447 0 0 .453 0 1.01v11.98C0 13.548.447 14 .997 14H13c.55 0 1-.453 1-1.01V1.01C14 .452 13.55 0 13 0zM4.231 11.994H2.156V5.313h2.078v6.68h-.003zM3.203 4.406A1.204 1.204 0 1 1 3.204 2a1.204 1.204 0 0 1 0 2.407zm8.803 7.597H9.931v-3.25c0-.775-.015-1.772-1.078-1.772-1.081 0-1.247.844-1.247 1.716v3.306H5.531V5.322h1.99v.912h.029c.278-.525.956-1.078 1.966-1.078 2.1 0 2.49 1.385 2.49 3.185v3.662z"></path></svg></li></ul></a></li></ul><ul class="sc-9bd020f4-0 jJVOkq"><li class="sc-4fa8b0c-0 expwDU"><span class="sc-21c13e9a-1 kPOmdP sc-f808361a-0 fbsQmA"><span class="sc-f808361a-1 cvcVox">©<!-- -->2024 </span><span>Wolfram Alpha LLC</span></span></li><li class="sc-4fa8b0c-0 expwDU"><a href="https://www.wolframalpha.com/termsofuse" target="_blank" rel="noopener noreferrer" class="_3BQD grey7OrangeHoverNoBorderNoBg defaultLink sc-34cb55e4-2 sc-34cb55e4-3 gUYtEt cAcIXE"><span class="sc-34cb55e4-0 hLNrE"><span>Terms</span></span></a></li><li class="sc-4fa8b0c-0 expwDU"><a href="https://www.wolfram.com/legal/privacy/wolfram" target="_blank" rel="noopener noreferrer" class="_3BQD grey7OrangeHoverNoBorderNoBg defaultLink sc-34cb55e4-2 sc-34cb55e4-3 gUYtEt cAcIXE"><span class="sc-34cb55e4-0 hLNrE"><span>Privacy</span></span></a></li></ul><ul class="sc-9bd020f4-0 fKqrZN"><li class="sc-4fa8b0c-0 dgCyrk"><a aria-label="wolfram.com" href="https://www.wolfram.com" class="_3BQD grey7OrangeHoverNoBorderNoBg defaultLink sc-34cb55e4-2 sc-34cb55e4-3 gUYtEt cAcIXE"><svg class="sc-55c933b2-0 kSqHck" viewBox="0 0 112 25"><path class="sc-70463ee1-0 irAHPo" d="M26.01 8.34h2.962l1.395 7.621L32.42 8.34h2.606l2.439 7.755 1.426-7.755h2.815L39.3 19.744h-3.25l-2.161-7.115-2.211 7.115h-3.41L26.01 8.34zm21.902 9.345c1.842 0 2.574-1.765 2.574-3.643 0-1.98-.732-3.645-2.574-3.645-1.842 0-2.575 1.666-2.575 3.644 0 1.879.733 3.643 2.575 3.643zm0-9.543c3.748 0 5.704 2.24 5.704 5.9 0 3.627-1.988 5.897-5.704 5.897-3.715 0-5.703-2.27-5.703-5.898 0-3.66 1.955-5.899 5.703-5.899zm7.399.196h3.031v9.15h4.693v2.254h-7.724V8.338zm8.98 0h7.607v2.157H67.32v2.5h4.382v2.156H67.32v4.59h-3.03V8.339zm12.222 4.74h.8c.977 0 2.216-.034 2.216-1.325 0-1.061-1.06-1.258-2.216-1.258h-.8v2.583zm-3.03-4.74h5.41c2.02 0 3.667.914 3.667 2.876 0 1.52-.717 2.533-2.184 2.876v.033c.977.262 1.043 1.128 1.613 2.517l1.107 3.102h-3.16l-.651-2.057c-.62-1.96-1.01-2.452-2.135-2.452h-.637v4.509h-3.03V8.338zm16.064 2.354h-.032l-1.467 4.46h2.85l-1.351-4.46zm-1.86-2.354h3.718l4.383 11.404h-3.325l-.847-2.433h-4.269l-.896 2.433H83.37l4.318-11.404zm18.608.001h3.408l2.258 11.404v.001h-2.963l-1.392-7.65-2.057 7.65h-2.606l-2.429-7.753-1.436 7.753h-2.816l2.41-11.405h3.25l2.16 7.122 2.213-7.122z"></path><path class="sc-70463ee1-1 gUYakR" d="M17.493 16.571l-2.056-.678 2.458-.754 2.302.82-2.704.612zm-3.283 3.02l.071-3.05 2.752.908.344 3.59-3.167-1.449zm-8.405-2.143l2.752-.906.07 3.048-3.167 1.447.345-3.589zm-3.162-1.492l2.3-.817 2.457.754-2.056.677-2.701-.614zm1.57-3.039l1.94-.75-1.508 2.04-2.21.785 1.778-2.075zm-2.434-3.68l3.384-.766 1.626 2.404-2.712 1.047-2.298-2.684zm11.384-4.183L11.42 7.372l-1.743-2.32 1.742-3.105 1.744 3.107zM21.06 9.24l-2.297 2.684-2.713-1.05 1.627-2.402 3.383.768zm-8.878 3.489l2.96-1.038 1.97 2.664-3.103.953-1.827-2.58zm-2.658 4.79l1.424 2.163v2.531L9.575 19.77l-.051-2.25zm1.132-4.79l-1.826 2.58-3.104-.954 1.97-2.664 2.96 1.038zm-4.83-4.984l-.274-2.847 1.391 1.955.07 2.648-1.188-1.756zm6.065.771l3.047-1.128-.09 3.37-2.957 1.037V8.516zm-3.9 2.241L7.9 7.388l3.047 1.128v3.279L7.99 10.757zm3.428 7.905l-1.827-2.776 1.827-2.58 1.827 2.58-1.827 2.776zm5.596-10.916l-1.19 1.756.07-2.648 1.394-1.956-.274 2.848zM14.03 5.494l2.46-1.125-1.355 1.904-2.343.867 1.238-1.646zM10.047 7.14l-2.343-.867-1.356-1.906 2.461 1.126 1.238 1.647zm3.215 12.63l-1.371 2.443v-2.531l1.423-2.162-.052 2.25zm7.14-4.777l-2.209-.786-1.506-2.038 1.94.75 1.775 2.074zm-.87-2.492L22.84 8.64l-4.856-1.102.495-5.149-4.55 2.08L11.418 0 8.913 4.468l-4.55-2.081.494 5.148L0 8.636l3.305 3.863L0 16.362l4.855 1.102-.494 5.148 4.55-2.08L11.42 25l2.507-4.467 4.55 2.08-.494-5.148 4.857-1.1-3.307-3.864z"></path></svg></a></li><li class="sc-4fa8b0c-0 expwDU"><a href="https://www.wolfram.com" class="_3BQD grey7OrangeHoverNoBorderNoBg defaultLink sc-34cb55e4-2 sc-34cb55e4-3 gUYtEt cAcIXE"><span class="sc-34cb55e4-0 hLNrE"><span>wolfram.com</span></span></a></li><li class="sc-4fa8b0c-0 expwDU"><a href="https://www.wolfram.com/language" class="_3BQD grey7OrangeHoverNoBorderNoBg defaultLink sc-34cb55e4-2 sc-34cb55e4-3 gUYtEt cAcIXE"><span class="sc-34cb55e4-0 hLNrE"><span>Wolfram Language</span></span></a></li><li class="sc-4fa8b0c-0 expwDU"><a href="https://www.wolfram.com/mathematica" class="_3BQD grey7OrangeHoverNoBorderNoBg defaultLink sc-34cb55e4-2 sc-34cb55e4-3 gUYtEt cAcIXE"><span class="sc-34cb55e4-0 hLNrE"><span>Mathematica</span></span></a></li><li class="sc-4fa8b0c-0 expwDU"><a href="https://demonstrations.wolfram.com" class="_3BQD grey7OrangeHoverNoBorderNoBg defaultLink sc-34cb55e4-2 sc-34cb55e4-3 gUYtEt cAcIXE"><span class="sc-34cb55e4-0 hLNrE"><span>Wolfram Demonstrations</span></span></a></li><li class="sc-4fa8b0c-0 expwDU"><a href="https://www.wolfram.com/education" class="_3BQD grey7OrangeHoverNoBorderNoBg defaultLink sc-34cb55e4-2 sc-34cb55e4-3 gUYtEt cAcIXE"><span class="sc-34cb55e4-0 hLNrE"><span>Wolfram for Education</span></span></a></li><li class="sc-4fa8b0c-0 expwDU"><a href="https://mathworld.wolfram.com" class="_3BQD grey7OrangeHoverNoBorderNoBg defaultLink sc-34cb55e4-2 sc-34cb55e4-3 gUYtEt cAcIXE"><span class="sc-34cb55e4-0 hLNrE"><span>MathWorld</span></span></a></li></ul></footer><div class="_g55a"></div></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"staticContext":{"cookies":{},"domain":"products.wolframalpha.com"},"isTouch":false,"userIPInfo":{"isGDPR":false,"country":"US"},"browserString":"Safari","language":"en","pageProps":{}},"page":"/[api]/documentation","query":{"api":"api"},"buildId":"DHIeErcHWB5g43HR5O0gg","isFallback":false,"customServer":true,"appGip":true,"scriptLoader":[]}</script></body></html>